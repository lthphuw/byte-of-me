
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserBannerImage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UserBannerImage
 * 
 */
export type UserBannerImageModel = runtime.Types.Result.DefaultSelection<Prisma.$UserBannerImagePayload>

export type AggregateUserBannerImage = {
  _count: UserBannerImageCountAggregateOutputType | null
  _min: UserBannerImageMinAggregateOutputType | null
  _max: UserBannerImageMaxAggregateOutputType | null
}

export type UserBannerImageMinAggregateOutputType = {
  id: string | null
  userId: string | null
  src: string | null
  caption: string | null
}

export type UserBannerImageMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  src: string | null
  caption: string | null
}

export type UserBannerImageCountAggregateOutputType = {
  id: number
  userId: number
  src: number
  caption: number
  _all: number
}


export type UserBannerImageMinAggregateInputType = {
  id?: true
  userId?: true
  src?: true
  caption?: true
}

export type UserBannerImageMaxAggregateInputType = {
  id?: true
  userId?: true
  src?: true
  caption?: true
}

export type UserBannerImageCountAggregateInputType = {
  id?: true
  userId?: true
  src?: true
  caption?: true
  _all?: true
}

export type UserBannerImageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserBannerImage to aggregate.
   */
  where?: Prisma.UserBannerImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserBannerImages to fetch.
   */
  orderBy?: Prisma.UserBannerImageOrderByWithRelationInput | Prisma.UserBannerImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserBannerImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserBannerImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserBannerImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserBannerImages
  **/
  _count?: true | UserBannerImageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserBannerImageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserBannerImageMaxAggregateInputType
}

export type GetUserBannerImageAggregateType<T extends UserBannerImageAggregateArgs> = {
      [P in keyof T & keyof AggregateUserBannerImage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserBannerImage[P]>
    : Prisma.GetScalarType<T[P], AggregateUserBannerImage[P]>
}




export type UserBannerImageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserBannerImageWhereInput
  orderBy?: Prisma.UserBannerImageOrderByWithAggregationInput | Prisma.UserBannerImageOrderByWithAggregationInput[]
  by: Prisma.UserBannerImageScalarFieldEnum[] | Prisma.UserBannerImageScalarFieldEnum
  having?: Prisma.UserBannerImageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserBannerImageCountAggregateInputType | true
  _min?: UserBannerImageMinAggregateInputType
  _max?: UserBannerImageMaxAggregateInputType
}

export type UserBannerImageGroupByOutputType = {
  id: string
  userId: string
  src: string
  caption: string
  _count: UserBannerImageCountAggregateOutputType | null
  _min: UserBannerImageMinAggregateOutputType | null
  _max: UserBannerImageMaxAggregateOutputType | null
}

type GetUserBannerImageGroupByPayload<T extends UserBannerImageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserBannerImageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserBannerImageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserBannerImageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserBannerImageGroupByOutputType[P]>
      }
    >
  > 



export type UserBannerImageWhereInput = {
  AND?: Prisma.UserBannerImageWhereInput | Prisma.UserBannerImageWhereInput[]
  OR?: Prisma.UserBannerImageWhereInput[]
  NOT?: Prisma.UserBannerImageWhereInput | Prisma.UserBannerImageWhereInput[]
  id?: Prisma.StringFilter<"UserBannerImage"> | string
  userId?: Prisma.StringFilter<"UserBannerImage"> | string
  src?: Prisma.StringFilter<"UserBannerImage"> | string
  caption?: Prisma.StringFilter<"UserBannerImage"> | string
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  translations?: Prisma.TranslationListRelationFilter
}

export type UserBannerImageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  src?: Prisma.SortOrder
  caption?: Prisma.SortOrder
  User?: Prisma.UserOrderByWithRelationInput
  translations?: Prisma.TranslationOrderByRelationAggregateInput
  _relevance?: Prisma.UserBannerImageOrderByRelevanceInput
}

export type UserBannerImageWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.UserBannerImageWhereInput | Prisma.UserBannerImageWhereInput[]
  OR?: Prisma.UserBannerImageWhereInput[]
  NOT?: Prisma.UserBannerImageWhereInput | Prisma.UserBannerImageWhereInput[]
  userId?: Prisma.StringFilter<"UserBannerImage"> | string
  src?: Prisma.StringFilter<"UserBannerImage"> | string
  caption?: Prisma.StringFilter<"UserBannerImage"> | string
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  translations?: Prisma.TranslationListRelationFilter
}, "id">

export type UserBannerImageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  src?: Prisma.SortOrder
  caption?: Prisma.SortOrder
  _count?: Prisma.UserBannerImageCountOrderByAggregateInput
  _max?: Prisma.UserBannerImageMaxOrderByAggregateInput
  _min?: Prisma.UserBannerImageMinOrderByAggregateInput
}

export type UserBannerImageScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserBannerImageScalarWhereWithAggregatesInput | Prisma.UserBannerImageScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserBannerImageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserBannerImageScalarWhereWithAggregatesInput | Prisma.UserBannerImageScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserBannerImage"> | string
  userId?: Prisma.StringWithAggregatesFilter<"UserBannerImage"> | string
  src?: Prisma.StringWithAggregatesFilter<"UserBannerImage"> | string
  caption?: Prisma.StringWithAggregatesFilter<"UserBannerImage"> | string
}

export type UserBannerImageCreateInput = {
  id?: string
  src: string
  caption: string
  User: Prisma.UserCreateNestedOneWithoutBannerImagesInput
  translations?: Prisma.TranslationCreateNestedManyWithoutBannerImageInput
}

export type UserBannerImageUncheckedCreateInput = {
  id?: string
  userId: string
  src: string
  caption: string
  translations?: Prisma.TranslationUncheckedCreateNestedManyWithoutBannerImageInput
}

export type UserBannerImageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  src?: Prisma.StringFieldUpdateOperationsInput | string
  caption?: Prisma.StringFieldUpdateOperationsInput | string
  User?: Prisma.UserUpdateOneRequiredWithoutBannerImagesNestedInput
  translations?: Prisma.TranslationUpdateManyWithoutBannerImageNestedInput
}

export type UserBannerImageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  src?: Prisma.StringFieldUpdateOperationsInput | string
  caption?: Prisma.StringFieldUpdateOperationsInput | string
  translations?: Prisma.TranslationUncheckedUpdateManyWithoutBannerImageNestedInput
}

export type UserBannerImageCreateManyInput = {
  id?: string
  userId: string
  src: string
  caption: string
}

export type UserBannerImageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  src?: Prisma.StringFieldUpdateOperationsInput | string
  caption?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserBannerImageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  src?: Prisma.StringFieldUpdateOperationsInput | string
  caption?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserBannerImageListRelationFilter = {
  every?: Prisma.UserBannerImageWhereInput
  some?: Prisma.UserBannerImageWhereInput
  none?: Prisma.UserBannerImageWhereInput
}

export type UserBannerImageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserBannerImageOrderByRelevanceInput = {
  fields: Prisma.UserBannerImageOrderByRelevanceFieldEnum | Prisma.UserBannerImageOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type UserBannerImageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  src?: Prisma.SortOrder
  caption?: Prisma.SortOrder
}

export type UserBannerImageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  src?: Prisma.SortOrder
  caption?: Prisma.SortOrder
}

export type UserBannerImageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  src?: Prisma.SortOrder
  caption?: Prisma.SortOrder
}

export type UserBannerImageNullableScalarRelationFilter = {
  is?: Prisma.UserBannerImageWhereInput | null
  isNot?: Prisma.UserBannerImageWhereInput | null
}

export type UserBannerImageCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserBannerImageCreateWithoutUserInput, Prisma.UserBannerImageUncheckedCreateWithoutUserInput> | Prisma.UserBannerImageCreateWithoutUserInput[] | Prisma.UserBannerImageUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserBannerImageCreateOrConnectWithoutUserInput | Prisma.UserBannerImageCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserBannerImageCreateManyUserInputEnvelope
  connect?: Prisma.UserBannerImageWhereUniqueInput | Prisma.UserBannerImageWhereUniqueInput[]
}

export type UserBannerImageUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserBannerImageCreateWithoutUserInput, Prisma.UserBannerImageUncheckedCreateWithoutUserInput> | Prisma.UserBannerImageCreateWithoutUserInput[] | Prisma.UserBannerImageUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserBannerImageCreateOrConnectWithoutUserInput | Prisma.UserBannerImageCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserBannerImageCreateManyUserInputEnvelope
  connect?: Prisma.UserBannerImageWhereUniqueInput | Prisma.UserBannerImageWhereUniqueInput[]
}

export type UserBannerImageUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserBannerImageCreateWithoutUserInput, Prisma.UserBannerImageUncheckedCreateWithoutUserInput> | Prisma.UserBannerImageCreateWithoutUserInput[] | Prisma.UserBannerImageUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserBannerImageCreateOrConnectWithoutUserInput | Prisma.UserBannerImageCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserBannerImageUpsertWithWhereUniqueWithoutUserInput | Prisma.UserBannerImageUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserBannerImageCreateManyUserInputEnvelope
  set?: Prisma.UserBannerImageWhereUniqueInput | Prisma.UserBannerImageWhereUniqueInput[]
  disconnect?: Prisma.UserBannerImageWhereUniqueInput | Prisma.UserBannerImageWhereUniqueInput[]
  delete?: Prisma.UserBannerImageWhereUniqueInput | Prisma.UserBannerImageWhereUniqueInput[]
  connect?: Prisma.UserBannerImageWhereUniqueInput | Prisma.UserBannerImageWhereUniqueInput[]
  update?: Prisma.UserBannerImageUpdateWithWhereUniqueWithoutUserInput | Prisma.UserBannerImageUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserBannerImageUpdateManyWithWhereWithoutUserInput | Prisma.UserBannerImageUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserBannerImageScalarWhereInput | Prisma.UserBannerImageScalarWhereInput[]
}

export type UserBannerImageUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserBannerImageCreateWithoutUserInput, Prisma.UserBannerImageUncheckedCreateWithoutUserInput> | Prisma.UserBannerImageCreateWithoutUserInput[] | Prisma.UserBannerImageUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserBannerImageCreateOrConnectWithoutUserInput | Prisma.UserBannerImageCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserBannerImageUpsertWithWhereUniqueWithoutUserInput | Prisma.UserBannerImageUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserBannerImageCreateManyUserInputEnvelope
  set?: Prisma.UserBannerImageWhereUniqueInput | Prisma.UserBannerImageWhereUniqueInput[]
  disconnect?: Prisma.UserBannerImageWhereUniqueInput | Prisma.UserBannerImageWhereUniqueInput[]
  delete?: Prisma.UserBannerImageWhereUniqueInput | Prisma.UserBannerImageWhereUniqueInput[]
  connect?: Prisma.UserBannerImageWhereUniqueInput | Prisma.UserBannerImageWhereUniqueInput[]
  update?: Prisma.UserBannerImageUpdateWithWhereUniqueWithoutUserInput | Prisma.UserBannerImageUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserBannerImageUpdateManyWithWhereWithoutUserInput | Prisma.UserBannerImageUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserBannerImageScalarWhereInput | Prisma.UserBannerImageScalarWhereInput[]
}

export type UserBannerImageCreateNestedOneWithoutTranslationsInput = {
  create?: Prisma.XOR<Prisma.UserBannerImageCreateWithoutTranslationsInput, Prisma.UserBannerImageUncheckedCreateWithoutTranslationsInput>
  connectOrCreate?: Prisma.UserBannerImageCreateOrConnectWithoutTranslationsInput
  connect?: Prisma.UserBannerImageWhereUniqueInput
}

export type UserBannerImageUpdateOneWithoutTranslationsNestedInput = {
  create?: Prisma.XOR<Prisma.UserBannerImageCreateWithoutTranslationsInput, Prisma.UserBannerImageUncheckedCreateWithoutTranslationsInput>
  connectOrCreate?: Prisma.UserBannerImageCreateOrConnectWithoutTranslationsInput
  upsert?: Prisma.UserBannerImageUpsertWithoutTranslationsInput
  disconnect?: Prisma.UserBannerImageWhereInput | boolean
  delete?: Prisma.UserBannerImageWhereInput | boolean
  connect?: Prisma.UserBannerImageWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserBannerImageUpdateToOneWithWhereWithoutTranslationsInput, Prisma.UserBannerImageUpdateWithoutTranslationsInput>, Prisma.UserBannerImageUncheckedUpdateWithoutTranslationsInput>
}

export type UserBannerImageCreateWithoutUserInput = {
  id?: string
  src: string
  caption: string
  translations?: Prisma.TranslationCreateNestedManyWithoutBannerImageInput
}

export type UserBannerImageUncheckedCreateWithoutUserInput = {
  id?: string
  src: string
  caption: string
  translations?: Prisma.TranslationUncheckedCreateNestedManyWithoutBannerImageInput
}

export type UserBannerImageCreateOrConnectWithoutUserInput = {
  where: Prisma.UserBannerImageWhereUniqueInput
  create: Prisma.XOR<Prisma.UserBannerImageCreateWithoutUserInput, Prisma.UserBannerImageUncheckedCreateWithoutUserInput>
}

export type UserBannerImageCreateManyUserInputEnvelope = {
  data: Prisma.UserBannerImageCreateManyUserInput | Prisma.UserBannerImageCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserBannerImageUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserBannerImageWhereUniqueInput
  update: Prisma.XOR<Prisma.UserBannerImageUpdateWithoutUserInput, Prisma.UserBannerImageUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserBannerImageCreateWithoutUserInput, Prisma.UserBannerImageUncheckedCreateWithoutUserInput>
}

export type UserBannerImageUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserBannerImageWhereUniqueInput
  data: Prisma.XOR<Prisma.UserBannerImageUpdateWithoutUserInput, Prisma.UserBannerImageUncheckedUpdateWithoutUserInput>
}

export type UserBannerImageUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserBannerImageScalarWhereInput
  data: Prisma.XOR<Prisma.UserBannerImageUpdateManyMutationInput, Prisma.UserBannerImageUncheckedUpdateManyWithoutUserInput>
}

export type UserBannerImageScalarWhereInput = {
  AND?: Prisma.UserBannerImageScalarWhereInput | Prisma.UserBannerImageScalarWhereInput[]
  OR?: Prisma.UserBannerImageScalarWhereInput[]
  NOT?: Prisma.UserBannerImageScalarWhereInput | Prisma.UserBannerImageScalarWhereInput[]
  id?: Prisma.StringFilter<"UserBannerImage"> | string
  userId?: Prisma.StringFilter<"UserBannerImage"> | string
  src?: Prisma.StringFilter<"UserBannerImage"> | string
  caption?: Prisma.StringFilter<"UserBannerImage"> | string
}

export type UserBannerImageCreateWithoutTranslationsInput = {
  id?: string
  src: string
  caption: string
  User: Prisma.UserCreateNestedOneWithoutBannerImagesInput
}

export type UserBannerImageUncheckedCreateWithoutTranslationsInput = {
  id?: string
  userId: string
  src: string
  caption: string
}

export type UserBannerImageCreateOrConnectWithoutTranslationsInput = {
  where: Prisma.UserBannerImageWhereUniqueInput
  create: Prisma.XOR<Prisma.UserBannerImageCreateWithoutTranslationsInput, Prisma.UserBannerImageUncheckedCreateWithoutTranslationsInput>
}

export type UserBannerImageUpsertWithoutTranslationsInput = {
  update: Prisma.XOR<Prisma.UserBannerImageUpdateWithoutTranslationsInput, Prisma.UserBannerImageUncheckedUpdateWithoutTranslationsInput>
  create: Prisma.XOR<Prisma.UserBannerImageCreateWithoutTranslationsInput, Prisma.UserBannerImageUncheckedCreateWithoutTranslationsInput>
  where?: Prisma.UserBannerImageWhereInput
}

export type UserBannerImageUpdateToOneWithWhereWithoutTranslationsInput = {
  where?: Prisma.UserBannerImageWhereInput
  data: Prisma.XOR<Prisma.UserBannerImageUpdateWithoutTranslationsInput, Prisma.UserBannerImageUncheckedUpdateWithoutTranslationsInput>
}

export type UserBannerImageUpdateWithoutTranslationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  src?: Prisma.StringFieldUpdateOperationsInput | string
  caption?: Prisma.StringFieldUpdateOperationsInput | string
  User?: Prisma.UserUpdateOneRequiredWithoutBannerImagesNestedInput
}

export type UserBannerImageUncheckedUpdateWithoutTranslationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  src?: Prisma.StringFieldUpdateOperationsInput | string
  caption?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserBannerImageCreateManyUserInput = {
  id?: string
  src: string
  caption: string
}

export type UserBannerImageUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  src?: Prisma.StringFieldUpdateOperationsInput | string
  caption?: Prisma.StringFieldUpdateOperationsInput | string
  translations?: Prisma.TranslationUpdateManyWithoutBannerImageNestedInput
}

export type UserBannerImageUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  src?: Prisma.StringFieldUpdateOperationsInput | string
  caption?: Prisma.StringFieldUpdateOperationsInput | string
  translations?: Prisma.TranslationUncheckedUpdateManyWithoutBannerImageNestedInput
}

export type UserBannerImageUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  src?: Prisma.StringFieldUpdateOperationsInput | string
  caption?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type UserBannerImageCountOutputType
 */

export type UserBannerImageCountOutputType = {
  translations: number
}

export type UserBannerImageCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  translations?: boolean | UserBannerImageCountOutputTypeCountTranslationsArgs
}

/**
 * UserBannerImageCountOutputType without action
 */
export type UserBannerImageCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBannerImageCountOutputType
   */
  select?: Prisma.UserBannerImageCountOutputTypeSelect<ExtArgs> | null
}

/**
 * UserBannerImageCountOutputType without action
 */
export type UserBannerImageCountOutputTypeCountTranslationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TranslationWhereInput
}


export type UserBannerImageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  src?: boolean
  caption?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  translations?: boolean | Prisma.UserBannerImage$translationsArgs<ExtArgs>
  _count?: boolean | Prisma.UserBannerImageCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userBannerImage"]>



export type UserBannerImageSelectScalar = {
  id?: boolean
  userId?: boolean
  src?: boolean
  caption?: boolean
}

export type UserBannerImageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "src" | "caption", ExtArgs["result"]["userBannerImage"]>
export type UserBannerImageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  translations?: boolean | Prisma.UserBannerImage$translationsArgs<ExtArgs>
  _count?: boolean | Prisma.UserBannerImageCountOutputTypeDefaultArgs<ExtArgs>
}

export type $UserBannerImagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserBannerImage"
  objects: {
    User: Prisma.$UserPayload<ExtArgs>
    translations: Prisma.$TranslationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    src: string
    caption: string
  }, ExtArgs["result"]["userBannerImage"]>
  composites: {}
}

export type UserBannerImageGetPayload<S extends boolean | null | undefined | UserBannerImageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserBannerImagePayload, S>

export type UserBannerImageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserBannerImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserBannerImageCountAggregateInputType | true
  }

export interface UserBannerImageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserBannerImage'], meta: { name: 'UserBannerImage' } }
  /**
   * Find zero or one UserBannerImage that matches the filter.
   * @param {UserBannerImageFindUniqueArgs} args - Arguments to find a UserBannerImage
   * @example
   * // Get one UserBannerImage
   * const userBannerImage = await prisma.userBannerImage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserBannerImageFindUniqueArgs>(args: Prisma.SelectSubset<T, UserBannerImageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserBannerImageClient<runtime.Types.Result.GetResult<Prisma.$UserBannerImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserBannerImage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserBannerImageFindUniqueOrThrowArgs} args - Arguments to find a UserBannerImage
   * @example
   * // Get one UserBannerImage
   * const userBannerImage = await prisma.userBannerImage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserBannerImageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserBannerImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserBannerImageClient<runtime.Types.Result.GetResult<Prisma.$UserBannerImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserBannerImage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserBannerImageFindFirstArgs} args - Arguments to find a UserBannerImage
   * @example
   * // Get one UserBannerImage
   * const userBannerImage = await prisma.userBannerImage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserBannerImageFindFirstArgs>(args?: Prisma.SelectSubset<T, UserBannerImageFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserBannerImageClient<runtime.Types.Result.GetResult<Prisma.$UserBannerImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserBannerImage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserBannerImageFindFirstOrThrowArgs} args - Arguments to find a UserBannerImage
   * @example
   * // Get one UserBannerImage
   * const userBannerImage = await prisma.userBannerImage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserBannerImageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserBannerImageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserBannerImageClient<runtime.Types.Result.GetResult<Prisma.$UserBannerImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserBannerImages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserBannerImageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserBannerImages
   * const userBannerImages = await prisma.userBannerImage.findMany()
   * 
   * // Get first 10 UserBannerImages
   * const userBannerImages = await prisma.userBannerImage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userBannerImageWithIdOnly = await prisma.userBannerImage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserBannerImageFindManyArgs>(args?: Prisma.SelectSubset<T, UserBannerImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserBannerImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserBannerImage.
   * @param {UserBannerImageCreateArgs} args - Arguments to create a UserBannerImage.
   * @example
   * // Create one UserBannerImage
   * const UserBannerImage = await prisma.userBannerImage.create({
   *   data: {
   *     // ... data to create a UserBannerImage
   *   }
   * })
   * 
   */
  create<T extends UserBannerImageCreateArgs>(args: Prisma.SelectSubset<T, UserBannerImageCreateArgs<ExtArgs>>): Prisma.Prisma__UserBannerImageClient<runtime.Types.Result.GetResult<Prisma.$UserBannerImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserBannerImages.
   * @param {UserBannerImageCreateManyArgs} args - Arguments to create many UserBannerImages.
   * @example
   * // Create many UserBannerImages
   * const userBannerImage = await prisma.userBannerImage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserBannerImageCreateManyArgs>(args?: Prisma.SelectSubset<T, UserBannerImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a UserBannerImage.
   * @param {UserBannerImageDeleteArgs} args - Arguments to delete one UserBannerImage.
   * @example
   * // Delete one UserBannerImage
   * const UserBannerImage = await prisma.userBannerImage.delete({
   *   where: {
   *     // ... filter to delete one UserBannerImage
   *   }
   * })
   * 
   */
  delete<T extends UserBannerImageDeleteArgs>(args: Prisma.SelectSubset<T, UserBannerImageDeleteArgs<ExtArgs>>): Prisma.Prisma__UserBannerImageClient<runtime.Types.Result.GetResult<Prisma.$UserBannerImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserBannerImage.
   * @param {UserBannerImageUpdateArgs} args - Arguments to update one UserBannerImage.
   * @example
   * // Update one UserBannerImage
   * const userBannerImage = await prisma.userBannerImage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserBannerImageUpdateArgs>(args: Prisma.SelectSubset<T, UserBannerImageUpdateArgs<ExtArgs>>): Prisma.Prisma__UserBannerImageClient<runtime.Types.Result.GetResult<Prisma.$UserBannerImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserBannerImages.
   * @param {UserBannerImageDeleteManyArgs} args - Arguments to filter UserBannerImages to delete.
   * @example
   * // Delete a few UserBannerImages
   * const { count } = await prisma.userBannerImage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserBannerImageDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserBannerImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserBannerImages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserBannerImageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserBannerImages
   * const userBannerImage = await prisma.userBannerImage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserBannerImageUpdateManyArgs>(args: Prisma.SelectSubset<T, UserBannerImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one UserBannerImage.
   * @param {UserBannerImageUpsertArgs} args - Arguments to update or create a UserBannerImage.
   * @example
   * // Update or create a UserBannerImage
   * const userBannerImage = await prisma.userBannerImage.upsert({
   *   create: {
   *     // ... data to create a UserBannerImage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserBannerImage we want to update
   *   }
   * })
   */
  upsert<T extends UserBannerImageUpsertArgs>(args: Prisma.SelectSubset<T, UserBannerImageUpsertArgs<ExtArgs>>): Prisma.Prisma__UserBannerImageClient<runtime.Types.Result.GetResult<Prisma.$UserBannerImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserBannerImages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserBannerImageCountArgs} args - Arguments to filter UserBannerImages to count.
   * @example
   * // Count the number of UserBannerImages
   * const count = await prisma.userBannerImage.count({
   *   where: {
   *     // ... the filter for the UserBannerImages we want to count
   *   }
   * })
  **/
  count<T extends UserBannerImageCountArgs>(
    args?: Prisma.Subset<T, UserBannerImageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserBannerImageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserBannerImage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserBannerImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserBannerImageAggregateArgs>(args: Prisma.Subset<T, UserBannerImageAggregateArgs>): Prisma.PrismaPromise<GetUserBannerImageAggregateType<T>>

  /**
   * Group by UserBannerImage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserBannerImageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserBannerImageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserBannerImageGroupByArgs['orderBy'] }
      : { orderBy?: UserBannerImageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserBannerImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBannerImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserBannerImage model
 */
readonly fields: UserBannerImageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserBannerImage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserBannerImageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  User<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  translations<T extends Prisma.UserBannerImage$translationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserBannerImage$translationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserBannerImage model
 */
export interface UserBannerImageFieldRefs {
  readonly id: Prisma.FieldRef<"UserBannerImage", 'String'>
  readonly userId: Prisma.FieldRef<"UserBannerImage", 'String'>
  readonly src: Prisma.FieldRef<"UserBannerImage", 'String'>
  readonly caption: Prisma.FieldRef<"UserBannerImage", 'String'>
}
    

// Custom InputTypes
/**
 * UserBannerImage findUnique
 */
export type UserBannerImageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBannerImage
   */
  select?: Prisma.UserBannerImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBannerImage
   */
  omit?: Prisma.UserBannerImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBannerImageInclude<ExtArgs> | null
  /**
   * Filter, which UserBannerImage to fetch.
   */
  where: Prisma.UserBannerImageWhereUniqueInput
}

/**
 * UserBannerImage findUniqueOrThrow
 */
export type UserBannerImageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBannerImage
   */
  select?: Prisma.UserBannerImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBannerImage
   */
  omit?: Prisma.UserBannerImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBannerImageInclude<ExtArgs> | null
  /**
   * Filter, which UserBannerImage to fetch.
   */
  where: Prisma.UserBannerImageWhereUniqueInput
}

/**
 * UserBannerImage findFirst
 */
export type UserBannerImageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBannerImage
   */
  select?: Prisma.UserBannerImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBannerImage
   */
  omit?: Prisma.UserBannerImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBannerImageInclude<ExtArgs> | null
  /**
   * Filter, which UserBannerImage to fetch.
   */
  where?: Prisma.UserBannerImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserBannerImages to fetch.
   */
  orderBy?: Prisma.UserBannerImageOrderByWithRelationInput | Prisma.UserBannerImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserBannerImages.
   */
  cursor?: Prisma.UserBannerImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserBannerImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserBannerImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserBannerImages.
   */
  distinct?: Prisma.UserBannerImageScalarFieldEnum | Prisma.UserBannerImageScalarFieldEnum[]
}

/**
 * UserBannerImage findFirstOrThrow
 */
export type UserBannerImageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBannerImage
   */
  select?: Prisma.UserBannerImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBannerImage
   */
  omit?: Prisma.UserBannerImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBannerImageInclude<ExtArgs> | null
  /**
   * Filter, which UserBannerImage to fetch.
   */
  where?: Prisma.UserBannerImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserBannerImages to fetch.
   */
  orderBy?: Prisma.UserBannerImageOrderByWithRelationInput | Prisma.UserBannerImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserBannerImages.
   */
  cursor?: Prisma.UserBannerImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserBannerImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserBannerImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserBannerImages.
   */
  distinct?: Prisma.UserBannerImageScalarFieldEnum | Prisma.UserBannerImageScalarFieldEnum[]
}

/**
 * UserBannerImage findMany
 */
export type UserBannerImageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBannerImage
   */
  select?: Prisma.UserBannerImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBannerImage
   */
  omit?: Prisma.UserBannerImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBannerImageInclude<ExtArgs> | null
  /**
   * Filter, which UserBannerImages to fetch.
   */
  where?: Prisma.UserBannerImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserBannerImages to fetch.
   */
  orderBy?: Prisma.UserBannerImageOrderByWithRelationInput | Prisma.UserBannerImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserBannerImages.
   */
  cursor?: Prisma.UserBannerImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserBannerImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserBannerImages.
   */
  skip?: number
  distinct?: Prisma.UserBannerImageScalarFieldEnum | Prisma.UserBannerImageScalarFieldEnum[]
}

/**
 * UserBannerImage create
 */
export type UserBannerImageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBannerImage
   */
  select?: Prisma.UserBannerImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBannerImage
   */
  omit?: Prisma.UserBannerImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBannerImageInclude<ExtArgs> | null
  /**
   * The data needed to create a UserBannerImage.
   */
  data: Prisma.XOR<Prisma.UserBannerImageCreateInput, Prisma.UserBannerImageUncheckedCreateInput>
}

/**
 * UserBannerImage createMany
 */
export type UserBannerImageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserBannerImages.
   */
  data: Prisma.UserBannerImageCreateManyInput | Prisma.UserBannerImageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserBannerImage update
 */
export type UserBannerImageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBannerImage
   */
  select?: Prisma.UserBannerImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBannerImage
   */
  omit?: Prisma.UserBannerImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBannerImageInclude<ExtArgs> | null
  /**
   * The data needed to update a UserBannerImage.
   */
  data: Prisma.XOR<Prisma.UserBannerImageUpdateInput, Prisma.UserBannerImageUncheckedUpdateInput>
  /**
   * Choose, which UserBannerImage to update.
   */
  where: Prisma.UserBannerImageWhereUniqueInput
}

/**
 * UserBannerImage updateMany
 */
export type UserBannerImageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserBannerImages.
   */
  data: Prisma.XOR<Prisma.UserBannerImageUpdateManyMutationInput, Prisma.UserBannerImageUncheckedUpdateManyInput>
  /**
   * Filter which UserBannerImages to update
   */
  where?: Prisma.UserBannerImageWhereInput
  /**
   * Limit how many UserBannerImages to update.
   */
  limit?: number
}

/**
 * UserBannerImage upsert
 */
export type UserBannerImageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBannerImage
   */
  select?: Prisma.UserBannerImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBannerImage
   */
  omit?: Prisma.UserBannerImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBannerImageInclude<ExtArgs> | null
  /**
   * The filter to search for the UserBannerImage to update in case it exists.
   */
  where: Prisma.UserBannerImageWhereUniqueInput
  /**
   * In case the UserBannerImage found by the `where` argument doesn't exist, create a new UserBannerImage with this data.
   */
  create: Prisma.XOR<Prisma.UserBannerImageCreateInput, Prisma.UserBannerImageUncheckedCreateInput>
  /**
   * In case the UserBannerImage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserBannerImageUpdateInput, Prisma.UserBannerImageUncheckedUpdateInput>
}

/**
 * UserBannerImage delete
 */
export type UserBannerImageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBannerImage
   */
  select?: Prisma.UserBannerImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBannerImage
   */
  omit?: Prisma.UserBannerImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBannerImageInclude<ExtArgs> | null
  /**
   * Filter which UserBannerImage to delete.
   */
  where: Prisma.UserBannerImageWhereUniqueInput
}

/**
 * UserBannerImage deleteMany
 */
export type UserBannerImageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserBannerImages to delete
   */
  where?: Prisma.UserBannerImageWhereInput
  /**
   * Limit how many UserBannerImages to delete.
   */
  limit?: number
}

/**
 * UserBannerImage.translations
 */
export type UserBannerImage$translationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Translation
   */
  select?: Prisma.TranslationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Translation
   */
  omit?: Prisma.TranslationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TranslationInclude<ExtArgs> | null
  where?: Prisma.TranslationWhereInput
  orderBy?: Prisma.TranslationOrderByWithRelationInput | Prisma.TranslationOrderByWithRelationInput[]
  cursor?: Prisma.TranslationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TranslationScalarFieldEnum | Prisma.TranslationScalarFieldEnum[]
}

/**
 * UserBannerImage without action
 */
export type UserBannerImageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBannerImage
   */
  select?: Prisma.UserBannerImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBannerImage
   */
  omit?: Prisma.UserBannerImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBannerImageInclude<ExtArgs> | null
}
