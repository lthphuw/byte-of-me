
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TechStackOnProjects` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model TechStackOnProjects
 * 
 */
export type TechStackOnProjectsModel = runtime.Types.Result.DefaultSelection<Prisma.$TechStackOnProjectsPayload>

export type AggregateTechStackOnProjects = {
  _count: TechStackOnProjectsCountAggregateOutputType | null
  _min: TechStackOnProjectsMinAggregateOutputType | null
  _max: TechStackOnProjectsMaxAggregateOutputType | null
}

export type TechStackOnProjectsMinAggregateOutputType = {
  projectId: string | null
  techstackId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TechStackOnProjectsMaxAggregateOutputType = {
  projectId: string | null
  techstackId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TechStackOnProjectsCountAggregateOutputType = {
  projectId: number
  techstackId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TechStackOnProjectsMinAggregateInputType = {
  projectId?: true
  techstackId?: true
  createdAt?: true
  updatedAt?: true
}

export type TechStackOnProjectsMaxAggregateInputType = {
  projectId?: true
  techstackId?: true
  createdAt?: true
  updatedAt?: true
}

export type TechStackOnProjectsCountAggregateInputType = {
  projectId?: true
  techstackId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TechStackOnProjectsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TechStackOnProjects to aggregate.
   */
  where?: Prisma.TechStackOnProjectsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechStackOnProjects to fetch.
   */
  orderBy?: Prisma.TechStackOnProjectsOrderByWithRelationInput | Prisma.TechStackOnProjectsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TechStackOnProjectsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechStackOnProjects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechStackOnProjects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TechStackOnProjects
  **/
  _count?: true | TechStackOnProjectsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TechStackOnProjectsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TechStackOnProjectsMaxAggregateInputType
}

export type GetTechStackOnProjectsAggregateType<T extends TechStackOnProjectsAggregateArgs> = {
      [P in keyof T & keyof AggregateTechStackOnProjects]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTechStackOnProjects[P]>
    : Prisma.GetScalarType<T[P], AggregateTechStackOnProjects[P]>
}




export type TechStackOnProjectsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TechStackOnProjectsWhereInput
  orderBy?: Prisma.TechStackOnProjectsOrderByWithAggregationInput | Prisma.TechStackOnProjectsOrderByWithAggregationInput[]
  by: Prisma.TechStackOnProjectsScalarFieldEnum[] | Prisma.TechStackOnProjectsScalarFieldEnum
  having?: Prisma.TechStackOnProjectsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TechStackOnProjectsCountAggregateInputType | true
  _min?: TechStackOnProjectsMinAggregateInputType
  _max?: TechStackOnProjectsMaxAggregateInputType
}

export type TechStackOnProjectsGroupByOutputType = {
  projectId: string
  techstackId: string
  createdAt: Date
  updatedAt: Date
  _count: TechStackOnProjectsCountAggregateOutputType | null
  _min: TechStackOnProjectsMinAggregateOutputType | null
  _max: TechStackOnProjectsMaxAggregateOutputType | null
}

type GetTechStackOnProjectsGroupByPayload<T extends TechStackOnProjectsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TechStackOnProjectsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TechStackOnProjectsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TechStackOnProjectsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TechStackOnProjectsGroupByOutputType[P]>
      }
    >
  > 



export type TechStackOnProjectsWhereInput = {
  AND?: Prisma.TechStackOnProjectsWhereInput | Prisma.TechStackOnProjectsWhereInput[]
  OR?: Prisma.TechStackOnProjectsWhereInput[]
  NOT?: Prisma.TechStackOnProjectsWhereInput | Prisma.TechStackOnProjectsWhereInput[]
  projectId?: Prisma.StringFilter<"TechStackOnProjects"> | string
  techstackId?: Prisma.StringFilter<"TechStackOnProjects"> | string
  createdAt?: Prisma.DateTimeFilter<"TechStackOnProjects"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TechStackOnProjects"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  techstack?: Prisma.XOR<Prisma.TechStackScalarRelationFilter, Prisma.TechStackWhereInput>
}

export type TechStackOnProjectsOrderByWithRelationInput = {
  projectId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
  techstack?: Prisma.TechStackOrderByWithRelationInput
}

export type TechStackOnProjectsWhereUniqueInput = Prisma.AtLeast<{
  projectId_techstackId?: Prisma.TechStackOnProjectsProjectIdTechstackIdCompoundUniqueInput
  AND?: Prisma.TechStackOnProjectsWhereInput | Prisma.TechStackOnProjectsWhereInput[]
  OR?: Prisma.TechStackOnProjectsWhereInput[]
  NOT?: Prisma.TechStackOnProjectsWhereInput | Prisma.TechStackOnProjectsWhereInput[]
  projectId?: Prisma.StringFilter<"TechStackOnProjects"> | string
  techstackId?: Prisma.StringFilter<"TechStackOnProjects"> | string
  createdAt?: Prisma.DateTimeFilter<"TechStackOnProjects"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TechStackOnProjects"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  techstack?: Prisma.XOR<Prisma.TechStackScalarRelationFilter, Prisma.TechStackWhereInput>
}, "projectId_techstackId">

export type TechStackOnProjectsOrderByWithAggregationInput = {
  projectId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TechStackOnProjectsCountOrderByAggregateInput
  _max?: Prisma.TechStackOnProjectsMaxOrderByAggregateInput
  _min?: Prisma.TechStackOnProjectsMinOrderByAggregateInput
}

export type TechStackOnProjectsScalarWhereWithAggregatesInput = {
  AND?: Prisma.TechStackOnProjectsScalarWhereWithAggregatesInput | Prisma.TechStackOnProjectsScalarWhereWithAggregatesInput[]
  OR?: Prisma.TechStackOnProjectsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TechStackOnProjectsScalarWhereWithAggregatesInput | Prisma.TechStackOnProjectsScalarWhereWithAggregatesInput[]
  projectId?: Prisma.StringWithAggregatesFilter<"TechStackOnProjects"> | string
  techstackId?: Prisma.StringWithAggregatesFilter<"TechStackOnProjects"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TechStackOnProjects"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TechStackOnProjects"> | Date | string
}

export type TechStackOnProjectsCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutTechstacksInput
  techstack: Prisma.TechStackCreateNestedOneWithoutProjectsInput
}

export type TechStackOnProjectsUncheckedCreateInput = {
  projectId: string
  techstackId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TechStackOnProjectsUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutTechstacksNestedInput
  techstack?: Prisma.TechStackUpdateOneRequiredWithoutProjectsNestedInput
}

export type TechStackOnProjectsUncheckedUpdateInput = {
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  techstackId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TechStackOnProjectsCreateManyInput = {
  projectId: string
  techstackId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TechStackOnProjectsUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TechStackOnProjectsUncheckedUpdateManyInput = {
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  techstackId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TechStackOnProjectsListRelationFilter = {
  every?: Prisma.TechStackOnProjectsWhereInput
  some?: Prisma.TechStackOnProjectsWhereInput
  none?: Prisma.TechStackOnProjectsWhereInput
}

export type TechStackOnProjectsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TechStackOnProjectsProjectIdTechstackIdCompoundUniqueInput = {
  projectId: string
  techstackId: string
}

export type TechStackOnProjectsCountOrderByAggregateInput = {
  projectId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TechStackOnProjectsMaxOrderByAggregateInput = {
  projectId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TechStackOnProjectsMinOrderByAggregateInput = {
  projectId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TechStackOnProjectsCreateNestedManyWithoutTechstackInput = {
  create?: Prisma.XOR<Prisma.TechStackOnProjectsCreateWithoutTechstackInput, Prisma.TechStackOnProjectsUncheckedCreateWithoutTechstackInput> | Prisma.TechStackOnProjectsCreateWithoutTechstackInput[] | Prisma.TechStackOnProjectsUncheckedCreateWithoutTechstackInput[]
  connectOrCreate?: Prisma.TechStackOnProjectsCreateOrConnectWithoutTechstackInput | Prisma.TechStackOnProjectsCreateOrConnectWithoutTechstackInput[]
  createMany?: Prisma.TechStackOnProjectsCreateManyTechstackInputEnvelope
  connect?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
}

export type TechStackOnProjectsUncheckedCreateNestedManyWithoutTechstackInput = {
  create?: Prisma.XOR<Prisma.TechStackOnProjectsCreateWithoutTechstackInput, Prisma.TechStackOnProjectsUncheckedCreateWithoutTechstackInput> | Prisma.TechStackOnProjectsCreateWithoutTechstackInput[] | Prisma.TechStackOnProjectsUncheckedCreateWithoutTechstackInput[]
  connectOrCreate?: Prisma.TechStackOnProjectsCreateOrConnectWithoutTechstackInput | Prisma.TechStackOnProjectsCreateOrConnectWithoutTechstackInput[]
  createMany?: Prisma.TechStackOnProjectsCreateManyTechstackInputEnvelope
  connect?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
}

export type TechStackOnProjectsUpdateManyWithoutTechstackNestedInput = {
  create?: Prisma.XOR<Prisma.TechStackOnProjectsCreateWithoutTechstackInput, Prisma.TechStackOnProjectsUncheckedCreateWithoutTechstackInput> | Prisma.TechStackOnProjectsCreateWithoutTechstackInput[] | Prisma.TechStackOnProjectsUncheckedCreateWithoutTechstackInput[]
  connectOrCreate?: Prisma.TechStackOnProjectsCreateOrConnectWithoutTechstackInput | Prisma.TechStackOnProjectsCreateOrConnectWithoutTechstackInput[]
  upsert?: Prisma.TechStackOnProjectsUpsertWithWhereUniqueWithoutTechstackInput | Prisma.TechStackOnProjectsUpsertWithWhereUniqueWithoutTechstackInput[]
  createMany?: Prisma.TechStackOnProjectsCreateManyTechstackInputEnvelope
  set?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  disconnect?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  delete?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  connect?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  update?: Prisma.TechStackOnProjectsUpdateWithWhereUniqueWithoutTechstackInput | Prisma.TechStackOnProjectsUpdateWithWhereUniqueWithoutTechstackInput[]
  updateMany?: Prisma.TechStackOnProjectsUpdateManyWithWhereWithoutTechstackInput | Prisma.TechStackOnProjectsUpdateManyWithWhereWithoutTechstackInput[]
  deleteMany?: Prisma.TechStackOnProjectsScalarWhereInput | Prisma.TechStackOnProjectsScalarWhereInput[]
}

export type TechStackOnProjectsUncheckedUpdateManyWithoutTechstackNestedInput = {
  create?: Prisma.XOR<Prisma.TechStackOnProjectsCreateWithoutTechstackInput, Prisma.TechStackOnProjectsUncheckedCreateWithoutTechstackInput> | Prisma.TechStackOnProjectsCreateWithoutTechstackInput[] | Prisma.TechStackOnProjectsUncheckedCreateWithoutTechstackInput[]
  connectOrCreate?: Prisma.TechStackOnProjectsCreateOrConnectWithoutTechstackInput | Prisma.TechStackOnProjectsCreateOrConnectWithoutTechstackInput[]
  upsert?: Prisma.TechStackOnProjectsUpsertWithWhereUniqueWithoutTechstackInput | Prisma.TechStackOnProjectsUpsertWithWhereUniqueWithoutTechstackInput[]
  createMany?: Prisma.TechStackOnProjectsCreateManyTechstackInputEnvelope
  set?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  disconnect?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  delete?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  connect?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  update?: Prisma.TechStackOnProjectsUpdateWithWhereUniqueWithoutTechstackInput | Prisma.TechStackOnProjectsUpdateWithWhereUniqueWithoutTechstackInput[]
  updateMany?: Prisma.TechStackOnProjectsUpdateManyWithWhereWithoutTechstackInput | Prisma.TechStackOnProjectsUpdateManyWithWhereWithoutTechstackInput[]
  deleteMany?: Prisma.TechStackOnProjectsScalarWhereInput | Prisma.TechStackOnProjectsScalarWhereInput[]
}

export type TechStackOnProjectsCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.TechStackOnProjectsCreateWithoutProjectInput, Prisma.TechStackOnProjectsUncheckedCreateWithoutProjectInput> | Prisma.TechStackOnProjectsCreateWithoutProjectInput[] | Prisma.TechStackOnProjectsUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.TechStackOnProjectsCreateOrConnectWithoutProjectInput | Prisma.TechStackOnProjectsCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.TechStackOnProjectsCreateManyProjectInputEnvelope
  connect?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
}

export type TechStackOnProjectsUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.TechStackOnProjectsCreateWithoutProjectInput, Prisma.TechStackOnProjectsUncheckedCreateWithoutProjectInput> | Prisma.TechStackOnProjectsCreateWithoutProjectInput[] | Prisma.TechStackOnProjectsUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.TechStackOnProjectsCreateOrConnectWithoutProjectInput | Prisma.TechStackOnProjectsCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.TechStackOnProjectsCreateManyProjectInputEnvelope
  connect?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
}

export type TechStackOnProjectsUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.TechStackOnProjectsCreateWithoutProjectInput, Prisma.TechStackOnProjectsUncheckedCreateWithoutProjectInput> | Prisma.TechStackOnProjectsCreateWithoutProjectInput[] | Prisma.TechStackOnProjectsUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.TechStackOnProjectsCreateOrConnectWithoutProjectInput | Prisma.TechStackOnProjectsCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.TechStackOnProjectsUpsertWithWhereUniqueWithoutProjectInput | Prisma.TechStackOnProjectsUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.TechStackOnProjectsCreateManyProjectInputEnvelope
  set?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  disconnect?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  delete?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  connect?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  update?: Prisma.TechStackOnProjectsUpdateWithWhereUniqueWithoutProjectInput | Prisma.TechStackOnProjectsUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.TechStackOnProjectsUpdateManyWithWhereWithoutProjectInput | Prisma.TechStackOnProjectsUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.TechStackOnProjectsScalarWhereInput | Prisma.TechStackOnProjectsScalarWhereInput[]
}

export type TechStackOnProjectsUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.TechStackOnProjectsCreateWithoutProjectInput, Prisma.TechStackOnProjectsUncheckedCreateWithoutProjectInput> | Prisma.TechStackOnProjectsCreateWithoutProjectInput[] | Prisma.TechStackOnProjectsUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.TechStackOnProjectsCreateOrConnectWithoutProjectInput | Prisma.TechStackOnProjectsCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.TechStackOnProjectsUpsertWithWhereUniqueWithoutProjectInput | Prisma.TechStackOnProjectsUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.TechStackOnProjectsCreateManyProjectInputEnvelope
  set?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  disconnect?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  delete?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  connect?: Prisma.TechStackOnProjectsWhereUniqueInput | Prisma.TechStackOnProjectsWhereUniqueInput[]
  update?: Prisma.TechStackOnProjectsUpdateWithWhereUniqueWithoutProjectInput | Prisma.TechStackOnProjectsUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.TechStackOnProjectsUpdateManyWithWhereWithoutProjectInput | Prisma.TechStackOnProjectsUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.TechStackOnProjectsScalarWhereInput | Prisma.TechStackOnProjectsScalarWhereInput[]
}

export type TechStackOnProjectsCreateWithoutTechstackInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutTechstacksInput
}

export type TechStackOnProjectsUncheckedCreateWithoutTechstackInput = {
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TechStackOnProjectsCreateOrConnectWithoutTechstackInput = {
  where: Prisma.TechStackOnProjectsWhereUniqueInput
  create: Prisma.XOR<Prisma.TechStackOnProjectsCreateWithoutTechstackInput, Prisma.TechStackOnProjectsUncheckedCreateWithoutTechstackInput>
}

export type TechStackOnProjectsCreateManyTechstackInputEnvelope = {
  data: Prisma.TechStackOnProjectsCreateManyTechstackInput | Prisma.TechStackOnProjectsCreateManyTechstackInput[]
  skipDuplicates?: boolean
}

export type TechStackOnProjectsUpsertWithWhereUniqueWithoutTechstackInput = {
  where: Prisma.TechStackOnProjectsWhereUniqueInput
  update: Prisma.XOR<Prisma.TechStackOnProjectsUpdateWithoutTechstackInput, Prisma.TechStackOnProjectsUncheckedUpdateWithoutTechstackInput>
  create: Prisma.XOR<Prisma.TechStackOnProjectsCreateWithoutTechstackInput, Prisma.TechStackOnProjectsUncheckedCreateWithoutTechstackInput>
}

export type TechStackOnProjectsUpdateWithWhereUniqueWithoutTechstackInput = {
  where: Prisma.TechStackOnProjectsWhereUniqueInput
  data: Prisma.XOR<Prisma.TechStackOnProjectsUpdateWithoutTechstackInput, Prisma.TechStackOnProjectsUncheckedUpdateWithoutTechstackInput>
}

export type TechStackOnProjectsUpdateManyWithWhereWithoutTechstackInput = {
  where: Prisma.TechStackOnProjectsScalarWhereInput
  data: Prisma.XOR<Prisma.TechStackOnProjectsUpdateManyMutationInput, Prisma.TechStackOnProjectsUncheckedUpdateManyWithoutTechstackInput>
}

export type TechStackOnProjectsScalarWhereInput = {
  AND?: Prisma.TechStackOnProjectsScalarWhereInput | Prisma.TechStackOnProjectsScalarWhereInput[]
  OR?: Prisma.TechStackOnProjectsScalarWhereInput[]
  NOT?: Prisma.TechStackOnProjectsScalarWhereInput | Prisma.TechStackOnProjectsScalarWhereInput[]
  projectId?: Prisma.StringFilter<"TechStackOnProjects"> | string
  techstackId?: Prisma.StringFilter<"TechStackOnProjects"> | string
  createdAt?: Prisma.DateTimeFilter<"TechStackOnProjects"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TechStackOnProjects"> | Date | string
}

export type TechStackOnProjectsCreateWithoutProjectInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  techstack: Prisma.TechStackCreateNestedOneWithoutProjectsInput
}

export type TechStackOnProjectsUncheckedCreateWithoutProjectInput = {
  techstackId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TechStackOnProjectsCreateOrConnectWithoutProjectInput = {
  where: Prisma.TechStackOnProjectsWhereUniqueInput
  create: Prisma.XOR<Prisma.TechStackOnProjectsCreateWithoutProjectInput, Prisma.TechStackOnProjectsUncheckedCreateWithoutProjectInput>
}

export type TechStackOnProjectsCreateManyProjectInputEnvelope = {
  data: Prisma.TechStackOnProjectsCreateManyProjectInput | Prisma.TechStackOnProjectsCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type TechStackOnProjectsUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.TechStackOnProjectsWhereUniqueInput
  update: Prisma.XOR<Prisma.TechStackOnProjectsUpdateWithoutProjectInput, Prisma.TechStackOnProjectsUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.TechStackOnProjectsCreateWithoutProjectInput, Prisma.TechStackOnProjectsUncheckedCreateWithoutProjectInput>
}

export type TechStackOnProjectsUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.TechStackOnProjectsWhereUniqueInput
  data: Prisma.XOR<Prisma.TechStackOnProjectsUpdateWithoutProjectInput, Prisma.TechStackOnProjectsUncheckedUpdateWithoutProjectInput>
}

export type TechStackOnProjectsUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.TechStackOnProjectsScalarWhereInput
  data: Prisma.XOR<Prisma.TechStackOnProjectsUpdateManyMutationInput, Prisma.TechStackOnProjectsUncheckedUpdateManyWithoutProjectInput>
}

export type TechStackOnProjectsCreateManyTechstackInput = {
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TechStackOnProjectsUpdateWithoutTechstackInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutTechstacksNestedInput
}

export type TechStackOnProjectsUncheckedUpdateWithoutTechstackInput = {
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TechStackOnProjectsUncheckedUpdateManyWithoutTechstackInput = {
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TechStackOnProjectsCreateManyProjectInput = {
  techstackId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TechStackOnProjectsUpdateWithoutProjectInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  techstack?: Prisma.TechStackUpdateOneRequiredWithoutProjectsNestedInput
}

export type TechStackOnProjectsUncheckedUpdateWithoutProjectInput = {
  techstackId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TechStackOnProjectsUncheckedUpdateManyWithoutProjectInput = {
  techstackId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TechStackOnProjectsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  projectId?: boolean
  techstackId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  techstack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}, ExtArgs["result"]["techStackOnProjects"]>

export type TechStackOnProjectsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  projectId?: boolean
  techstackId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  techstack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}, ExtArgs["result"]["techStackOnProjects"]>

export type TechStackOnProjectsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  projectId?: boolean
  techstackId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  techstack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}, ExtArgs["result"]["techStackOnProjects"]>

export type TechStackOnProjectsSelectScalar = {
  projectId?: boolean
  techstackId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TechStackOnProjectsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"projectId" | "techstackId" | "createdAt" | "updatedAt", ExtArgs["result"]["techStackOnProjects"]>
export type TechStackOnProjectsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  techstack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}
export type TechStackOnProjectsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  techstack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}
export type TechStackOnProjectsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  techstack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}

export type $TechStackOnProjectsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TechStackOnProjects"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>
    techstack: Prisma.$TechStackPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    projectId: string
    techstackId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["techStackOnProjects"]>
  composites: {}
}

export type TechStackOnProjectsGetPayload<S extends boolean | null | undefined | TechStackOnProjectsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TechStackOnProjectsPayload, S>

export type TechStackOnProjectsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TechStackOnProjectsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TechStackOnProjectsCountAggregateInputType | true
  }

export interface TechStackOnProjectsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TechStackOnProjects'], meta: { name: 'TechStackOnProjects' } }
  /**
   * Find zero or one TechStackOnProjects that matches the filter.
   * @param {TechStackOnProjectsFindUniqueArgs} args - Arguments to find a TechStackOnProjects
   * @example
   * // Get one TechStackOnProjects
   * const techStackOnProjects = await prisma.techStackOnProjects.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TechStackOnProjectsFindUniqueArgs>(args: Prisma.SelectSubset<T, TechStackOnProjectsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TechStackOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnProjectsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TechStackOnProjects that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TechStackOnProjectsFindUniqueOrThrowArgs} args - Arguments to find a TechStackOnProjects
   * @example
   * // Get one TechStackOnProjects
   * const techStackOnProjects = await prisma.techStackOnProjects.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TechStackOnProjectsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TechStackOnProjectsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TechStackOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TechStackOnProjects that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackOnProjectsFindFirstArgs} args - Arguments to find a TechStackOnProjects
   * @example
   * // Get one TechStackOnProjects
   * const techStackOnProjects = await prisma.techStackOnProjects.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TechStackOnProjectsFindFirstArgs>(args?: Prisma.SelectSubset<T, TechStackOnProjectsFindFirstArgs<ExtArgs>>): Prisma.Prisma__TechStackOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnProjectsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TechStackOnProjects that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackOnProjectsFindFirstOrThrowArgs} args - Arguments to find a TechStackOnProjects
   * @example
   * // Get one TechStackOnProjects
   * const techStackOnProjects = await prisma.techStackOnProjects.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TechStackOnProjectsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TechStackOnProjectsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TechStackOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnProjectsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TechStackOnProjects that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackOnProjectsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TechStackOnProjects
   * const techStackOnProjects = await prisma.techStackOnProjects.findMany()
   * 
   * // Get first 10 TechStackOnProjects
   * const techStackOnProjects = await prisma.techStackOnProjects.findMany({ take: 10 })
   * 
   * // Only select the `projectId`
   * const techStackOnProjectsWithProjectIdOnly = await prisma.techStackOnProjects.findMany({ select: { projectId: true } })
   * 
   */
  findMany<T extends TechStackOnProjectsFindManyArgs>(args?: Prisma.SelectSubset<T, TechStackOnProjectsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechStackOnProjectsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TechStackOnProjects.
   * @param {TechStackOnProjectsCreateArgs} args - Arguments to create a TechStackOnProjects.
   * @example
   * // Create one TechStackOnProjects
   * const TechStackOnProjects = await prisma.techStackOnProjects.create({
   *   data: {
   *     // ... data to create a TechStackOnProjects
   *   }
   * })
   * 
   */
  create<T extends TechStackOnProjectsCreateArgs>(args: Prisma.SelectSubset<T, TechStackOnProjectsCreateArgs<ExtArgs>>): Prisma.Prisma__TechStackOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnProjectsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TechStackOnProjects.
   * @param {TechStackOnProjectsCreateManyArgs} args - Arguments to create many TechStackOnProjects.
   * @example
   * // Create many TechStackOnProjects
   * const techStackOnProjects = await prisma.techStackOnProjects.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TechStackOnProjectsCreateManyArgs>(args?: Prisma.SelectSubset<T, TechStackOnProjectsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TechStackOnProjects and returns the data saved in the database.
   * @param {TechStackOnProjectsCreateManyAndReturnArgs} args - Arguments to create many TechStackOnProjects.
   * @example
   * // Create many TechStackOnProjects
   * const techStackOnProjects = await prisma.techStackOnProjects.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TechStackOnProjects and only return the `projectId`
   * const techStackOnProjectsWithProjectIdOnly = await prisma.techStackOnProjects.createManyAndReturn({
   *   select: { projectId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TechStackOnProjectsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TechStackOnProjectsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechStackOnProjectsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TechStackOnProjects.
   * @param {TechStackOnProjectsDeleteArgs} args - Arguments to delete one TechStackOnProjects.
   * @example
   * // Delete one TechStackOnProjects
   * const TechStackOnProjects = await prisma.techStackOnProjects.delete({
   *   where: {
   *     // ... filter to delete one TechStackOnProjects
   *   }
   * })
   * 
   */
  delete<T extends TechStackOnProjectsDeleteArgs>(args: Prisma.SelectSubset<T, TechStackOnProjectsDeleteArgs<ExtArgs>>): Prisma.Prisma__TechStackOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnProjectsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TechStackOnProjects.
   * @param {TechStackOnProjectsUpdateArgs} args - Arguments to update one TechStackOnProjects.
   * @example
   * // Update one TechStackOnProjects
   * const techStackOnProjects = await prisma.techStackOnProjects.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TechStackOnProjectsUpdateArgs>(args: Prisma.SelectSubset<T, TechStackOnProjectsUpdateArgs<ExtArgs>>): Prisma.Prisma__TechStackOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnProjectsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TechStackOnProjects.
   * @param {TechStackOnProjectsDeleteManyArgs} args - Arguments to filter TechStackOnProjects to delete.
   * @example
   * // Delete a few TechStackOnProjects
   * const { count } = await prisma.techStackOnProjects.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TechStackOnProjectsDeleteManyArgs>(args?: Prisma.SelectSubset<T, TechStackOnProjectsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TechStackOnProjects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackOnProjectsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TechStackOnProjects
   * const techStackOnProjects = await prisma.techStackOnProjects.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TechStackOnProjectsUpdateManyArgs>(args: Prisma.SelectSubset<T, TechStackOnProjectsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TechStackOnProjects and returns the data updated in the database.
   * @param {TechStackOnProjectsUpdateManyAndReturnArgs} args - Arguments to update many TechStackOnProjects.
   * @example
   * // Update many TechStackOnProjects
   * const techStackOnProjects = await prisma.techStackOnProjects.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TechStackOnProjects and only return the `projectId`
   * const techStackOnProjectsWithProjectIdOnly = await prisma.techStackOnProjects.updateManyAndReturn({
   *   select: { projectId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TechStackOnProjectsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TechStackOnProjectsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechStackOnProjectsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TechStackOnProjects.
   * @param {TechStackOnProjectsUpsertArgs} args - Arguments to update or create a TechStackOnProjects.
   * @example
   * // Update or create a TechStackOnProjects
   * const techStackOnProjects = await prisma.techStackOnProjects.upsert({
   *   create: {
   *     // ... data to create a TechStackOnProjects
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TechStackOnProjects we want to update
   *   }
   * })
   */
  upsert<T extends TechStackOnProjectsUpsertArgs>(args: Prisma.SelectSubset<T, TechStackOnProjectsUpsertArgs<ExtArgs>>): Prisma.Prisma__TechStackOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnProjectsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TechStackOnProjects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackOnProjectsCountArgs} args - Arguments to filter TechStackOnProjects to count.
   * @example
   * // Count the number of TechStackOnProjects
   * const count = await prisma.techStackOnProjects.count({
   *   where: {
   *     // ... the filter for the TechStackOnProjects we want to count
   *   }
   * })
  **/
  count<T extends TechStackOnProjectsCountArgs>(
    args?: Prisma.Subset<T, TechStackOnProjectsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TechStackOnProjectsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TechStackOnProjects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackOnProjectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TechStackOnProjectsAggregateArgs>(args: Prisma.Subset<T, TechStackOnProjectsAggregateArgs>): Prisma.PrismaPromise<GetTechStackOnProjectsAggregateType<T>>

  /**
   * Group by TechStackOnProjects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackOnProjectsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TechStackOnProjectsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TechStackOnProjectsGroupByArgs['orderBy'] }
      : { orderBy?: TechStackOnProjectsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TechStackOnProjectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTechStackOnProjectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TechStackOnProjects model
 */
readonly fields: TechStackOnProjectsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TechStackOnProjects.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TechStackOnProjectsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  techstack<T extends Prisma.TechStackDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TechStackDefaultArgs<ExtArgs>>): Prisma.Prisma__TechStackClient<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TechStackOnProjects model
 */
export interface TechStackOnProjectsFieldRefs {
  readonly projectId: Prisma.FieldRef<"TechStackOnProjects", 'String'>
  readonly techstackId: Prisma.FieldRef<"TechStackOnProjects", 'String'>
  readonly createdAt: Prisma.FieldRef<"TechStackOnProjects", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TechStackOnProjects", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TechStackOnProjects findUnique
 */
export type TechStackOnProjectsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnProjects
   */
  select?: Prisma.TechStackOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnProjects
   */
  omit?: Prisma.TechStackOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnProjectsInclude<ExtArgs> | null
  /**
   * Filter, which TechStackOnProjects to fetch.
   */
  where: Prisma.TechStackOnProjectsWhereUniqueInput
}

/**
 * TechStackOnProjects findUniqueOrThrow
 */
export type TechStackOnProjectsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnProjects
   */
  select?: Prisma.TechStackOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnProjects
   */
  omit?: Prisma.TechStackOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnProjectsInclude<ExtArgs> | null
  /**
   * Filter, which TechStackOnProjects to fetch.
   */
  where: Prisma.TechStackOnProjectsWhereUniqueInput
}

/**
 * TechStackOnProjects findFirst
 */
export type TechStackOnProjectsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnProjects
   */
  select?: Prisma.TechStackOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnProjects
   */
  omit?: Prisma.TechStackOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnProjectsInclude<ExtArgs> | null
  /**
   * Filter, which TechStackOnProjects to fetch.
   */
  where?: Prisma.TechStackOnProjectsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechStackOnProjects to fetch.
   */
  orderBy?: Prisma.TechStackOnProjectsOrderByWithRelationInput | Prisma.TechStackOnProjectsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TechStackOnProjects.
   */
  cursor?: Prisma.TechStackOnProjectsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechStackOnProjects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechStackOnProjects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TechStackOnProjects.
   */
  distinct?: Prisma.TechStackOnProjectsScalarFieldEnum | Prisma.TechStackOnProjectsScalarFieldEnum[]
}

/**
 * TechStackOnProjects findFirstOrThrow
 */
export type TechStackOnProjectsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnProjects
   */
  select?: Prisma.TechStackOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnProjects
   */
  omit?: Prisma.TechStackOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnProjectsInclude<ExtArgs> | null
  /**
   * Filter, which TechStackOnProjects to fetch.
   */
  where?: Prisma.TechStackOnProjectsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechStackOnProjects to fetch.
   */
  orderBy?: Prisma.TechStackOnProjectsOrderByWithRelationInput | Prisma.TechStackOnProjectsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TechStackOnProjects.
   */
  cursor?: Prisma.TechStackOnProjectsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechStackOnProjects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechStackOnProjects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TechStackOnProjects.
   */
  distinct?: Prisma.TechStackOnProjectsScalarFieldEnum | Prisma.TechStackOnProjectsScalarFieldEnum[]
}

/**
 * TechStackOnProjects findMany
 */
export type TechStackOnProjectsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnProjects
   */
  select?: Prisma.TechStackOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnProjects
   */
  omit?: Prisma.TechStackOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnProjectsInclude<ExtArgs> | null
  /**
   * Filter, which TechStackOnProjects to fetch.
   */
  where?: Prisma.TechStackOnProjectsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechStackOnProjects to fetch.
   */
  orderBy?: Prisma.TechStackOnProjectsOrderByWithRelationInput | Prisma.TechStackOnProjectsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TechStackOnProjects.
   */
  cursor?: Prisma.TechStackOnProjectsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechStackOnProjects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechStackOnProjects.
   */
  skip?: number
  distinct?: Prisma.TechStackOnProjectsScalarFieldEnum | Prisma.TechStackOnProjectsScalarFieldEnum[]
}

/**
 * TechStackOnProjects create
 */
export type TechStackOnProjectsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnProjects
   */
  select?: Prisma.TechStackOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnProjects
   */
  omit?: Prisma.TechStackOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnProjectsInclude<ExtArgs> | null
  /**
   * The data needed to create a TechStackOnProjects.
   */
  data: Prisma.XOR<Prisma.TechStackOnProjectsCreateInput, Prisma.TechStackOnProjectsUncheckedCreateInput>
}

/**
 * TechStackOnProjects createMany
 */
export type TechStackOnProjectsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TechStackOnProjects.
   */
  data: Prisma.TechStackOnProjectsCreateManyInput | Prisma.TechStackOnProjectsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TechStackOnProjects createManyAndReturn
 */
export type TechStackOnProjectsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnProjects
   */
  select?: Prisma.TechStackOnProjectsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnProjects
   */
  omit?: Prisma.TechStackOnProjectsOmit<ExtArgs> | null
  /**
   * The data used to create many TechStackOnProjects.
   */
  data: Prisma.TechStackOnProjectsCreateManyInput | Prisma.TechStackOnProjectsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnProjectsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TechStackOnProjects update
 */
export type TechStackOnProjectsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnProjects
   */
  select?: Prisma.TechStackOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnProjects
   */
  omit?: Prisma.TechStackOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnProjectsInclude<ExtArgs> | null
  /**
   * The data needed to update a TechStackOnProjects.
   */
  data: Prisma.XOR<Prisma.TechStackOnProjectsUpdateInput, Prisma.TechStackOnProjectsUncheckedUpdateInput>
  /**
   * Choose, which TechStackOnProjects to update.
   */
  where: Prisma.TechStackOnProjectsWhereUniqueInput
}

/**
 * TechStackOnProjects updateMany
 */
export type TechStackOnProjectsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TechStackOnProjects.
   */
  data: Prisma.XOR<Prisma.TechStackOnProjectsUpdateManyMutationInput, Prisma.TechStackOnProjectsUncheckedUpdateManyInput>
  /**
   * Filter which TechStackOnProjects to update
   */
  where?: Prisma.TechStackOnProjectsWhereInput
  /**
   * Limit how many TechStackOnProjects to update.
   */
  limit?: number
}

/**
 * TechStackOnProjects updateManyAndReturn
 */
export type TechStackOnProjectsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnProjects
   */
  select?: Prisma.TechStackOnProjectsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnProjects
   */
  omit?: Prisma.TechStackOnProjectsOmit<ExtArgs> | null
  /**
   * The data used to update TechStackOnProjects.
   */
  data: Prisma.XOR<Prisma.TechStackOnProjectsUpdateManyMutationInput, Prisma.TechStackOnProjectsUncheckedUpdateManyInput>
  /**
   * Filter which TechStackOnProjects to update
   */
  where?: Prisma.TechStackOnProjectsWhereInput
  /**
   * Limit how many TechStackOnProjects to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnProjectsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TechStackOnProjects upsert
 */
export type TechStackOnProjectsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnProjects
   */
  select?: Prisma.TechStackOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnProjects
   */
  omit?: Prisma.TechStackOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnProjectsInclude<ExtArgs> | null
  /**
   * The filter to search for the TechStackOnProjects to update in case it exists.
   */
  where: Prisma.TechStackOnProjectsWhereUniqueInput
  /**
   * In case the TechStackOnProjects found by the `where` argument doesn't exist, create a new TechStackOnProjects with this data.
   */
  create: Prisma.XOR<Prisma.TechStackOnProjectsCreateInput, Prisma.TechStackOnProjectsUncheckedCreateInput>
  /**
   * In case the TechStackOnProjects was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TechStackOnProjectsUpdateInput, Prisma.TechStackOnProjectsUncheckedUpdateInput>
}

/**
 * TechStackOnProjects delete
 */
export type TechStackOnProjectsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnProjects
   */
  select?: Prisma.TechStackOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnProjects
   */
  omit?: Prisma.TechStackOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnProjectsInclude<ExtArgs> | null
  /**
   * Filter which TechStackOnProjects to delete.
   */
  where: Prisma.TechStackOnProjectsWhereUniqueInput
}

/**
 * TechStackOnProjects deleteMany
 */
export type TechStackOnProjectsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TechStackOnProjects to delete
   */
  where?: Prisma.TechStackOnProjectsWhereInput
  /**
   * Limit how many TechStackOnProjects to delete.
   */
  limit?: number
}

/**
 * TechStackOnProjects without action
 */
export type TechStackOnProjectsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnProjects
   */
  select?: Prisma.TechStackOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnProjects
   */
  omit?: Prisma.TechStackOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnProjectsInclude<ExtArgs> | null
}
