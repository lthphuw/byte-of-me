
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProjectImage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ProjectImage
 * 
 */
export type ProjectImageModel = runtime.Types.Result.DefaultSelection<Prisma.$ProjectImagePayload>

export type AggregateProjectImage = {
  _count: ProjectImageCountAggregateOutputType | null
  _min: ProjectImageMinAggregateOutputType | null
  _max: ProjectImageMaxAggregateOutputType | null
}

export type ProjectImageMinAggregateOutputType = {
  id: string | null
  url: string | null
  projectId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProjectImageMaxAggregateOutputType = {
  id: string | null
  url: string | null
  projectId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProjectImageCountAggregateOutputType = {
  id: number
  url: number
  projectId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProjectImageMinAggregateInputType = {
  id?: true
  url?: true
  projectId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProjectImageMaxAggregateInputType = {
  id?: true
  url?: true
  projectId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProjectImageCountAggregateInputType = {
  id?: true
  url?: true
  projectId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProjectImageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectImage to aggregate.
   */
  where?: Prisma.ProjectImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectImages to fetch.
   */
  orderBy?: Prisma.ProjectImageOrderByWithRelationInput | Prisma.ProjectImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProjectImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProjectImages
  **/
  _count?: true | ProjectImageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProjectImageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProjectImageMaxAggregateInputType
}

export type GetProjectImageAggregateType<T extends ProjectImageAggregateArgs> = {
      [P in keyof T & keyof AggregateProjectImage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProjectImage[P]>
    : Prisma.GetScalarType<T[P], AggregateProjectImage[P]>
}




export type ProjectImageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectImageWhereInput
  orderBy?: Prisma.ProjectImageOrderByWithAggregationInput | Prisma.ProjectImageOrderByWithAggregationInput[]
  by: Prisma.ProjectImageScalarFieldEnum[] | Prisma.ProjectImageScalarFieldEnum
  having?: Prisma.ProjectImageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProjectImageCountAggregateInputType | true
  _min?: ProjectImageMinAggregateInputType
  _max?: ProjectImageMaxAggregateInputType
}

export type ProjectImageGroupByOutputType = {
  id: string
  url: string
  projectId: string
  createdAt: Date
  updatedAt: Date
  _count: ProjectImageCountAggregateOutputType | null
  _min: ProjectImageMinAggregateOutputType | null
  _max: ProjectImageMaxAggregateOutputType | null
}

type GetProjectImageGroupByPayload<T extends ProjectImageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProjectImageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProjectImageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProjectImageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProjectImageGroupByOutputType[P]>
      }
    >
  > 



export type ProjectImageWhereInput = {
  AND?: Prisma.ProjectImageWhereInput | Prisma.ProjectImageWhereInput[]
  OR?: Prisma.ProjectImageWhereInput[]
  NOT?: Prisma.ProjectImageWhereInput | Prisma.ProjectImageWhereInput[]
  id?: Prisma.StringFilter<"ProjectImage"> | string
  url?: Prisma.StringFilter<"ProjectImage"> | string
  projectId?: Prisma.StringFilter<"ProjectImage"> | string
  createdAt?: Prisma.DateTimeFilter<"ProjectImage"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProjectImage"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  translations?: Prisma.TranslationListRelationFilter
}

export type ProjectImageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
  translations?: Prisma.TranslationOrderByRelationAggregateInput
  _relevance?: Prisma.ProjectImageOrderByRelevanceInput
}

export type ProjectImageWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProjectImageWhereInput | Prisma.ProjectImageWhereInput[]
  OR?: Prisma.ProjectImageWhereInput[]
  NOT?: Prisma.ProjectImageWhereInput | Prisma.ProjectImageWhereInput[]
  url?: Prisma.StringFilter<"ProjectImage"> | string
  projectId?: Prisma.StringFilter<"ProjectImage"> | string
  createdAt?: Prisma.DateTimeFilter<"ProjectImage"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProjectImage"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  translations?: Prisma.TranslationListRelationFilter
}, "id">

export type ProjectImageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProjectImageCountOrderByAggregateInput
  _max?: Prisma.ProjectImageMaxOrderByAggregateInput
  _min?: Prisma.ProjectImageMinOrderByAggregateInput
}

export type ProjectImageScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProjectImageScalarWhereWithAggregatesInput | Prisma.ProjectImageScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProjectImageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProjectImageScalarWhereWithAggregatesInput | Prisma.ProjectImageScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProjectImage"> | string
  url?: Prisma.StringWithAggregatesFilter<"ProjectImage"> | string
  projectId?: Prisma.StringWithAggregatesFilter<"ProjectImage"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProjectImage"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProjectImage"> | Date | string
}

export type ProjectImageCreateInput = {
  id?: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutImagesInput
  translations?: Prisma.TranslationCreateNestedManyWithoutProjectImageInput
}

export type ProjectImageUncheckedCreateInput = {
  id?: string
  url: string
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  translations?: Prisma.TranslationUncheckedCreateNestedManyWithoutProjectImageInput
}

export type ProjectImageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutImagesNestedInput
  translations?: Prisma.TranslationUpdateManyWithoutProjectImageNestedInput
}

export type ProjectImageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  translations?: Prisma.TranslationUncheckedUpdateManyWithoutProjectImageNestedInput
}

export type ProjectImageCreateManyInput = {
  id?: string
  url: string
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectImageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectImageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectImageListRelationFilter = {
  every?: Prisma.ProjectImageWhereInput
  some?: Prisma.ProjectImageWhereInput
  none?: Prisma.ProjectImageWhereInput
}

export type ProjectImageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProjectImageOrderByRelevanceInput = {
  fields: Prisma.ProjectImageOrderByRelevanceFieldEnum | Prisma.ProjectImageOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ProjectImageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectImageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectImageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectImageNullableScalarRelationFilter = {
  is?: Prisma.ProjectImageWhereInput | null
  isNot?: Prisma.ProjectImageWhereInput | null
}

export type ProjectImageCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ProjectImageCreateWithoutProjectInput, Prisma.ProjectImageUncheckedCreateWithoutProjectInput> | Prisma.ProjectImageCreateWithoutProjectInput[] | Prisma.ProjectImageUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectImageCreateOrConnectWithoutProjectInput | Prisma.ProjectImageCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ProjectImageCreateManyProjectInputEnvelope
  connect?: Prisma.ProjectImageWhereUniqueInput | Prisma.ProjectImageWhereUniqueInput[]
}

export type ProjectImageUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ProjectImageCreateWithoutProjectInput, Prisma.ProjectImageUncheckedCreateWithoutProjectInput> | Prisma.ProjectImageCreateWithoutProjectInput[] | Prisma.ProjectImageUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectImageCreateOrConnectWithoutProjectInput | Prisma.ProjectImageCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ProjectImageCreateManyProjectInputEnvelope
  connect?: Prisma.ProjectImageWhereUniqueInput | Prisma.ProjectImageWhereUniqueInput[]
}

export type ProjectImageUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectImageCreateWithoutProjectInput, Prisma.ProjectImageUncheckedCreateWithoutProjectInput> | Prisma.ProjectImageCreateWithoutProjectInput[] | Prisma.ProjectImageUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectImageCreateOrConnectWithoutProjectInput | Prisma.ProjectImageCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ProjectImageUpsertWithWhereUniqueWithoutProjectInput | Prisma.ProjectImageUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ProjectImageCreateManyProjectInputEnvelope
  set?: Prisma.ProjectImageWhereUniqueInput | Prisma.ProjectImageWhereUniqueInput[]
  disconnect?: Prisma.ProjectImageWhereUniqueInput | Prisma.ProjectImageWhereUniqueInput[]
  delete?: Prisma.ProjectImageWhereUniqueInput | Prisma.ProjectImageWhereUniqueInput[]
  connect?: Prisma.ProjectImageWhereUniqueInput | Prisma.ProjectImageWhereUniqueInput[]
  update?: Prisma.ProjectImageUpdateWithWhereUniqueWithoutProjectInput | Prisma.ProjectImageUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ProjectImageUpdateManyWithWhereWithoutProjectInput | Prisma.ProjectImageUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ProjectImageScalarWhereInput | Prisma.ProjectImageScalarWhereInput[]
}

export type ProjectImageUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectImageCreateWithoutProjectInput, Prisma.ProjectImageUncheckedCreateWithoutProjectInput> | Prisma.ProjectImageCreateWithoutProjectInput[] | Prisma.ProjectImageUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectImageCreateOrConnectWithoutProjectInput | Prisma.ProjectImageCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ProjectImageUpsertWithWhereUniqueWithoutProjectInput | Prisma.ProjectImageUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ProjectImageCreateManyProjectInputEnvelope
  set?: Prisma.ProjectImageWhereUniqueInput | Prisma.ProjectImageWhereUniqueInput[]
  disconnect?: Prisma.ProjectImageWhereUniqueInput | Prisma.ProjectImageWhereUniqueInput[]
  delete?: Prisma.ProjectImageWhereUniqueInput | Prisma.ProjectImageWhereUniqueInput[]
  connect?: Prisma.ProjectImageWhereUniqueInput | Prisma.ProjectImageWhereUniqueInput[]
  update?: Prisma.ProjectImageUpdateWithWhereUniqueWithoutProjectInput | Prisma.ProjectImageUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ProjectImageUpdateManyWithWhereWithoutProjectInput | Prisma.ProjectImageUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ProjectImageScalarWhereInput | Prisma.ProjectImageScalarWhereInput[]
}

export type ProjectImageCreateNestedOneWithoutTranslationsInput = {
  create?: Prisma.XOR<Prisma.ProjectImageCreateWithoutTranslationsInput, Prisma.ProjectImageUncheckedCreateWithoutTranslationsInput>
  connectOrCreate?: Prisma.ProjectImageCreateOrConnectWithoutTranslationsInput
  connect?: Prisma.ProjectImageWhereUniqueInput
}

export type ProjectImageUpdateOneWithoutTranslationsNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectImageCreateWithoutTranslationsInput, Prisma.ProjectImageUncheckedCreateWithoutTranslationsInput>
  connectOrCreate?: Prisma.ProjectImageCreateOrConnectWithoutTranslationsInput
  upsert?: Prisma.ProjectImageUpsertWithoutTranslationsInput
  disconnect?: Prisma.ProjectImageWhereInput | boolean
  delete?: Prisma.ProjectImageWhereInput | boolean
  connect?: Prisma.ProjectImageWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectImageUpdateToOneWithWhereWithoutTranslationsInput, Prisma.ProjectImageUpdateWithoutTranslationsInput>, Prisma.ProjectImageUncheckedUpdateWithoutTranslationsInput>
}

export type ProjectImageCreateWithoutProjectInput = {
  id?: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  translations?: Prisma.TranslationCreateNestedManyWithoutProjectImageInput
}

export type ProjectImageUncheckedCreateWithoutProjectInput = {
  id?: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  translations?: Prisma.TranslationUncheckedCreateNestedManyWithoutProjectImageInput
}

export type ProjectImageCreateOrConnectWithoutProjectInput = {
  where: Prisma.ProjectImageWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectImageCreateWithoutProjectInput, Prisma.ProjectImageUncheckedCreateWithoutProjectInput>
}

export type ProjectImageCreateManyProjectInputEnvelope = {
  data: Prisma.ProjectImageCreateManyProjectInput | Prisma.ProjectImageCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type ProjectImageUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProjectImageWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectImageUpdateWithoutProjectInput, Prisma.ProjectImageUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.ProjectImageCreateWithoutProjectInput, Prisma.ProjectImageUncheckedCreateWithoutProjectInput>
}

export type ProjectImageUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProjectImageWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectImageUpdateWithoutProjectInput, Prisma.ProjectImageUncheckedUpdateWithoutProjectInput>
}

export type ProjectImageUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.ProjectImageScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectImageUpdateManyMutationInput, Prisma.ProjectImageUncheckedUpdateManyWithoutProjectInput>
}

export type ProjectImageScalarWhereInput = {
  AND?: Prisma.ProjectImageScalarWhereInput | Prisma.ProjectImageScalarWhereInput[]
  OR?: Prisma.ProjectImageScalarWhereInput[]
  NOT?: Prisma.ProjectImageScalarWhereInput | Prisma.ProjectImageScalarWhereInput[]
  id?: Prisma.StringFilter<"ProjectImage"> | string
  url?: Prisma.StringFilter<"ProjectImage"> | string
  projectId?: Prisma.StringFilter<"ProjectImage"> | string
  createdAt?: Prisma.DateTimeFilter<"ProjectImage"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProjectImage"> | Date | string
}

export type ProjectImageCreateWithoutTranslationsInput = {
  id?: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutImagesInput
}

export type ProjectImageUncheckedCreateWithoutTranslationsInput = {
  id?: string
  url: string
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectImageCreateOrConnectWithoutTranslationsInput = {
  where: Prisma.ProjectImageWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectImageCreateWithoutTranslationsInput, Prisma.ProjectImageUncheckedCreateWithoutTranslationsInput>
}

export type ProjectImageUpsertWithoutTranslationsInput = {
  update: Prisma.XOR<Prisma.ProjectImageUpdateWithoutTranslationsInput, Prisma.ProjectImageUncheckedUpdateWithoutTranslationsInput>
  create: Prisma.XOR<Prisma.ProjectImageCreateWithoutTranslationsInput, Prisma.ProjectImageUncheckedCreateWithoutTranslationsInput>
  where?: Prisma.ProjectImageWhereInput
}

export type ProjectImageUpdateToOneWithWhereWithoutTranslationsInput = {
  where?: Prisma.ProjectImageWhereInput
  data: Prisma.XOR<Prisma.ProjectImageUpdateWithoutTranslationsInput, Prisma.ProjectImageUncheckedUpdateWithoutTranslationsInput>
}

export type ProjectImageUpdateWithoutTranslationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutImagesNestedInput
}

export type ProjectImageUncheckedUpdateWithoutTranslationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectImageCreateManyProjectInput = {
  id?: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectImageUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  translations?: Prisma.TranslationUpdateManyWithoutProjectImageNestedInput
}

export type ProjectImageUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  translations?: Prisma.TranslationUncheckedUpdateManyWithoutProjectImageNestedInput
}

export type ProjectImageUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ProjectImageCountOutputType
 */

export type ProjectImageCountOutputType = {
  translations: number
}

export type ProjectImageCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  translations?: boolean | ProjectImageCountOutputTypeCountTranslationsArgs
}

/**
 * ProjectImageCountOutputType without action
 */
export type ProjectImageCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectImageCountOutputType
   */
  select?: Prisma.ProjectImageCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProjectImageCountOutputType without action
 */
export type ProjectImageCountOutputTypeCountTranslationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TranslationWhereInput
}


export type ProjectImageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  url?: boolean
  projectId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  translations?: boolean | Prisma.ProjectImage$translationsArgs<ExtArgs>
  _count?: boolean | Prisma.ProjectImageCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectImage"]>



export type ProjectImageSelectScalar = {
  id?: boolean
  url?: boolean
  projectId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProjectImageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "url" | "projectId" | "createdAt" | "updatedAt", ExtArgs["result"]["projectImage"]>
export type ProjectImageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  translations?: boolean | Prisma.ProjectImage$translationsArgs<ExtArgs>
  _count?: boolean | Prisma.ProjectImageCountOutputTypeDefaultArgs<ExtArgs>
}

export type $ProjectImagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProjectImage"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>
    translations: Prisma.$TranslationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    url: string
    projectId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["projectImage"]>
  composites: {}
}

export type ProjectImageGetPayload<S extends boolean | null | undefined | ProjectImageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProjectImagePayload, S>

export type ProjectImageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProjectImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProjectImageCountAggregateInputType | true
  }

export interface ProjectImageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectImage'], meta: { name: 'ProjectImage' } }
  /**
   * Find zero or one ProjectImage that matches the filter.
   * @param {ProjectImageFindUniqueArgs} args - Arguments to find a ProjectImage
   * @example
   * // Get one ProjectImage
   * const projectImage = await prisma.projectImage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProjectImageFindUniqueArgs>(args: Prisma.SelectSubset<T, ProjectImageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProjectImageClient<runtime.Types.Result.GetResult<Prisma.$ProjectImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProjectImage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProjectImageFindUniqueOrThrowArgs} args - Arguments to find a ProjectImage
   * @example
   * // Get one ProjectImage
   * const projectImage = await prisma.projectImage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProjectImageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProjectImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectImageClient<runtime.Types.Result.GetResult<Prisma.$ProjectImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectImage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectImageFindFirstArgs} args - Arguments to find a ProjectImage
   * @example
   * // Get one ProjectImage
   * const projectImage = await prisma.projectImage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProjectImageFindFirstArgs>(args?: Prisma.SelectSubset<T, ProjectImageFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProjectImageClient<runtime.Types.Result.GetResult<Prisma.$ProjectImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectImage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectImageFindFirstOrThrowArgs} args - Arguments to find a ProjectImage
   * @example
   * // Get one ProjectImage
   * const projectImage = await prisma.projectImage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProjectImageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProjectImageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectImageClient<runtime.Types.Result.GetResult<Prisma.$ProjectImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProjectImages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectImageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProjectImages
   * const projectImages = await prisma.projectImage.findMany()
   * 
   * // Get first 10 ProjectImages
   * const projectImages = await prisma.projectImage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const projectImageWithIdOnly = await prisma.projectImage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProjectImageFindManyArgs>(args?: Prisma.SelectSubset<T, ProjectImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProjectImage.
   * @param {ProjectImageCreateArgs} args - Arguments to create a ProjectImage.
   * @example
   * // Create one ProjectImage
   * const ProjectImage = await prisma.projectImage.create({
   *   data: {
   *     // ... data to create a ProjectImage
   *   }
   * })
   * 
   */
  create<T extends ProjectImageCreateArgs>(args: Prisma.SelectSubset<T, ProjectImageCreateArgs<ExtArgs>>): Prisma.Prisma__ProjectImageClient<runtime.Types.Result.GetResult<Prisma.$ProjectImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProjectImages.
   * @param {ProjectImageCreateManyArgs} args - Arguments to create many ProjectImages.
   * @example
   * // Create many ProjectImages
   * const projectImage = await prisma.projectImage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProjectImageCreateManyArgs>(args?: Prisma.SelectSubset<T, ProjectImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a ProjectImage.
   * @param {ProjectImageDeleteArgs} args - Arguments to delete one ProjectImage.
   * @example
   * // Delete one ProjectImage
   * const ProjectImage = await prisma.projectImage.delete({
   *   where: {
   *     // ... filter to delete one ProjectImage
   *   }
   * })
   * 
   */
  delete<T extends ProjectImageDeleteArgs>(args: Prisma.SelectSubset<T, ProjectImageDeleteArgs<ExtArgs>>): Prisma.Prisma__ProjectImageClient<runtime.Types.Result.GetResult<Prisma.$ProjectImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProjectImage.
   * @param {ProjectImageUpdateArgs} args - Arguments to update one ProjectImage.
   * @example
   * // Update one ProjectImage
   * const projectImage = await prisma.projectImage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProjectImageUpdateArgs>(args: Prisma.SelectSubset<T, ProjectImageUpdateArgs<ExtArgs>>): Prisma.Prisma__ProjectImageClient<runtime.Types.Result.GetResult<Prisma.$ProjectImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProjectImages.
   * @param {ProjectImageDeleteManyArgs} args - Arguments to filter ProjectImages to delete.
   * @example
   * // Delete a few ProjectImages
   * const { count } = await prisma.projectImage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProjectImageDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProjectImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProjectImages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectImageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProjectImages
   * const projectImage = await prisma.projectImage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProjectImageUpdateManyArgs>(args: Prisma.SelectSubset<T, ProjectImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one ProjectImage.
   * @param {ProjectImageUpsertArgs} args - Arguments to update or create a ProjectImage.
   * @example
   * // Update or create a ProjectImage
   * const projectImage = await prisma.projectImage.upsert({
   *   create: {
   *     // ... data to create a ProjectImage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProjectImage we want to update
   *   }
   * })
   */
  upsert<T extends ProjectImageUpsertArgs>(args: Prisma.SelectSubset<T, ProjectImageUpsertArgs<ExtArgs>>): Prisma.Prisma__ProjectImageClient<runtime.Types.Result.GetResult<Prisma.$ProjectImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProjectImages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectImageCountArgs} args - Arguments to filter ProjectImages to count.
   * @example
   * // Count the number of ProjectImages
   * const count = await prisma.projectImage.count({
   *   where: {
   *     // ... the filter for the ProjectImages we want to count
   *   }
   * })
  **/
  count<T extends ProjectImageCountArgs>(
    args?: Prisma.Subset<T, ProjectImageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProjectImageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProjectImage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProjectImageAggregateArgs>(args: Prisma.Subset<T, ProjectImageAggregateArgs>): Prisma.PrismaPromise<GetProjectImageAggregateType<T>>

  /**
   * Group by ProjectImage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectImageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProjectImageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProjectImageGroupByArgs['orderBy'] }
      : { orderBy?: ProjectImageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProjectImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProjectImage model
 */
readonly fields: ProjectImageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProjectImage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectImageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  translations<T extends Prisma.ProjectImage$translationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectImage$translationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProjectImage model
 */
export interface ProjectImageFieldRefs {
  readonly id: Prisma.FieldRef<"ProjectImage", 'String'>
  readonly url: Prisma.FieldRef<"ProjectImage", 'String'>
  readonly projectId: Prisma.FieldRef<"ProjectImage", 'String'>
  readonly createdAt: Prisma.FieldRef<"ProjectImage", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProjectImage", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProjectImage findUnique
 */
export type ProjectImageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectImage
   */
  select?: Prisma.ProjectImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectImage
   */
  omit?: Prisma.ProjectImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectImageInclude<ExtArgs> | null
  /**
   * Filter, which ProjectImage to fetch.
   */
  where: Prisma.ProjectImageWhereUniqueInput
}

/**
 * ProjectImage findUniqueOrThrow
 */
export type ProjectImageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectImage
   */
  select?: Prisma.ProjectImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectImage
   */
  omit?: Prisma.ProjectImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectImageInclude<ExtArgs> | null
  /**
   * Filter, which ProjectImage to fetch.
   */
  where: Prisma.ProjectImageWhereUniqueInput
}

/**
 * ProjectImage findFirst
 */
export type ProjectImageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectImage
   */
  select?: Prisma.ProjectImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectImage
   */
  omit?: Prisma.ProjectImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectImageInclude<ExtArgs> | null
  /**
   * Filter, which ProjectImage to fetch.
   */
  where?: Prisma.ProjectImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectImages to fetch.
   */
  orderBy?: Prisma.ProjectImageOrderByWithRelationInput | Prisma.ProjectImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectImages.
   */
  cursor?: Prisma.ProjectImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectImages.
   */
  distinct?: Prisma.ProjectImageScalarFieldEnum | Prisma.ProjectImageScalarFieldEnum[]
}

/**
 * ProjectImage findFirstOrThrow
 */
export type ProjectImageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectImage
   */
  select?: Prisma.ProjectImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectImage
   */
  omit?: Prisma.ProjectImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectImageInclude<ExtArgs> | null
  /**
   * Filter, which ProjectImage to fetch.
   */
  where?: Prisma.ProjectImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectImages to fetch.
   */
  orderBy?: Prisma.ProjectImageOrderByWithRelationInput | Prisma.ProjectImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectImages.
   */
  cursor?: Prisma.ProjectImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectImages.
   */
  distinct?: Prisma.ProjectImageScalarFieldEnum | Prisma.ProjectImageScalarFieldEnum[]
}

/**
 * ProjectImage findMany
 */
export type ProjectImageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectImage
   */
  select?: Prisma.ProjectImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectImage
   */
  omit?: Prisma.ProjectImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectImageInclude<ExtArgs> | null
  /**
   * Filter, which ProjectImages to fetch.
   */
  where?: Prisma.ProjectImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectImages to fetch.
   */
  orderBy?: Prisma.ProjectImageOrderByWithRelationInput | Prisma.ProjectImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProjectImages.
   */
  cursor?: Prisma.ProjectImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectImages.
   */
  skip?: number
  distinct?: Prisma.ProjectImageScalarFieldEnum | Prisma.ProjectImageScalarFieldEnum[]
}

/**
 * ProjectImage create
 */
export type ProjectImageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectImage
   */
  select?: Prisma.ProjectImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectImage
   */
  omit?: Prisma.ProjectImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectImageInclude<ExtArgs> | null
  /**
   * The data needed to create a ProjectImage.
   */
  data: Prisma.XOR<Prisma.ProjectImageCreateInput, Prisma.ProjectImageUncheckedCreateInput>
}

/**
 * ProjectImage createMany
 */
export type ProjectImageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProjectImages.
   */
  data: Prisma.ProjectImageCreateManyInput | Prisma.ProjectImageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProjectImage update
 */
export type ProjectImageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectImage
   */
  select?: Prisma.ProjectImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectImage
   */
  omit?: Prisma.ProjectImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectImageInclude<ExtArgs> | null
  /**
   * The data needed to update a ProjectImage.
   */
  data: Prisma.XOR<Prisma.ProjectImageUpdateInput, Prisma.ProjectImageUncheckedUpdateInput>
  /**
   * Choose, which ProjectImage to update.
   */
  where: Prisma.ProjectImageWhereUniqueInput
}

/**
 * ProjectImage updateMany
 */
export type ProjectImageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProjectImages.
   */
  data: Prisma.XOR<Prisma.ProjectImageUpdateManyMutationInput, Prisma.ProjectImageUncheckedUpdateManyInput>
  /**
   * Filter which ProjectImages to update
   */
  where?: Prisma.ProjectImageWhereInput
  /**
   * Limit how many ProjectImages to update.
   */
  limit?: number
}

/**
 * ProjectImage upsert
 */
export type ProjectImageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectImage
   */
  select?: Prisma.ProjectImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectImage
   */
  omit?: Prisma.ProjectImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectImageInclude<ExtArgs> | null
  /**
   * The filter to search for the ProjectImage to update in case it exists.
   */
  where: Prisma.ProjectImageWhereUniqueInput
  /**
   * In case the ProjectImage found by the `where` argument doesn't exist, create a new ProjectImage with this data.
   */
  create: Prisma.XOR<Prisma.ProjectImageCreateInput, Prisma.ProjectImageUncheckedCreateInput>
  /**
   * In case the ProjectImage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProjectImageUpdateInput, Prisma.ProjectImageUncheckedUpdateInput>
}

/**
 * ProjectImage delete
 */
export type ProjectImageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectImage
   */
  select?: Prisma.ProjectImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectImage
   */
  omit?: Prisma.ProjectImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectImageInclude<ExtArgs> | null
  /**
   * Filter which ProjectImage to delete.
   */
  where: Prisma.ProjectImageWhereUniqueInput
}

/**
 * ProjectImage deleteMany
 */
export type ProjectImageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectImages to delete
   */
  where?: Prisma.ProjectImageWhereInput
  /**
   * Limit how many ProjectImages to delete.
   */
  limit?: number
}

/**
 * ProjectImage.translations
 */
export type ProjectImage$translationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Translation
   */
  select?: Prisma.TranslationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Translation
   */
  omit?: Prisma.TranslationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TranslationInclude<ExtArgs> | null
  where?: Prisma.TranslationWhereInput
  orderBy?: Prisma.TranslationOrderByWithRelationInput | Prisma.TranslationOrderByWithRelationInput[]
  cursor?: Prisma.TranslationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TranslationScalarFieldEnum | Prisma.TranslationScalarFieldEnum[]
}

/**
 * ProjectImage without action
 */
export type ProjectImageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectImage
   */
  select?: Prisma.ProjectImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectImage
   */
  omit?: Prisma.ProjectImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectImageInclude<ExtArgs> | null
}
