
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProjectTechStack` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ProjectTechStack
 * 
 */
export type ProjectTechStackModel = runtime.Types.Result.DefaultSelection<Prisma.$ProjectTechStackPayload>

export type AggregateProjectTechStack = {
  _count: ProjectTechStackCountAggregateOutputType | null
  _min: ProjectTechStackMinAggregateOutputType | null
  _max: ProjectTechStackMaxAggregateOutputType | null
}

export type ProjectTechStackMinAggregateOutputType = {
  projectId: string | null
  techStackId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProjectTechStackMaxAggregateOutputType = {
  projectId: string | null
  techStackId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProjectTechStackCountAggregateOutputType = {
  projectId: number
  techStackId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProjectTechStackMinAggregateInputType = {
  projectId?: true
  techStackId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProjectTechStackMaxAggregateInputType = {
  projectId?: true
  techStackId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProjectTechStackCountAggregateInputType = {
  projectId?: true
  techStackId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProjectTechStackAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectTechStack to aggregate.
   */
  where?: Prisma.ProjectTechStackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectTechStacks to fetch.
   */
  orderBy?: Prisma.ProjectTechStackOrderByWithRelationInput | Prisma.ProjectTechStackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProjectTechStackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectTechStacks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectTechStacks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProjectTechStacks
  **/
  _count?: true | ProjectTechStackCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProjectTechStackMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProjectTechStackMaxAggregateInputType
}

export type GetProjectTechStackAggregateType<T extends ProjectTechStackAggregateArgs> = {
      [P in keyof T & keyof AggregateProjectTechStack]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProjectTechStack[P]>
    : Prisma.GetScalarType<T[P], AggregateProjectTechStack[P]>
}




export type ProjectTechStackGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectTechStackWhereInput
  orderBy?: Prisma.ProjectTechStackOrderByWithAggregationInput | Prisma.ProjectTechStackOrderByWithAggregationInput[]
  by: Prisma.ProjectTechStackScalarFieldEnum[] | Prisma.ProjectTechStackScalarFieldEnum
  having?: Prisma.ProjectTechStackScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProjectTechStackCountAggregateInputType | true
  _min?: ProjectTechStackMinAggregateInputType
  _max?: ProjectTechStackMaxAggregateInputType
}

export type ProjectTechStackGroupByOutputType = {
  projectId: string
  techStackId: string
  createdAt: Date
  updatedAt: Date
  _count: ProjectTechStackCountAggregateOutputType | null
  _min: ProjectTechStackMinAggregateOutputType | null
  _max: ProjectTechStackMaxAggregateOutputType | null
}

type GetProjectTechStackGroupByPayload<T extends ProjectTechStackGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProjectTechStackGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProjectTechStackGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProjectTechStackGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProjectTechStackGroupByOutputType[P]>
      }
    >
  > 



export type ProjectTechStackWhereInput = {
  AND?: Prisma.ProjectTechStackWhereInput | Prisma.ProjectTechStackWhereInput[]
  OR?: Prisma.ProjectTechStackWhereInput[]
  NOT?: Prisma.ProjectTechStackWhereInput | Prisma.ProjectTechStackWhereInput[]
  projectId?: Prisma.StringFilter<"ProjectTechStack"> | string
  techStackId?: Prisma.StringFilter<"ProjectTechStack"> | string
  createdAt?: Prisma.DateTimeFilter<"ProjectTechStack"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProjectTechStack"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  techStack?: Prisma.XOR<Prisma.TechStackScalarRelationFilter, Prisma.TechStackWhereInput>
}

export type ProjectTechStackOrderByWithRelationInput = {
  projectId?: Prisma.SortOrder
  techStackId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
  techStack?: Prisma.TechStackOrderByWithRelationInput
  _relevance?: Prisma.ProjectTechStackOrderByRelevanceInput
}

export type ProjectTechStackWhereUniqueInput = Prisma.AtLeast<{
  projectId_techStackId?: Prisma.ProjectTechStackProjectIdTechStackIdCompoundUniqueInput
  AND?: Prisma.ProjectTechStackWhereInput | Prisma.ProjectTechStackWhereInput[]
  OR?: Prisma.ProjectTechStackWhereInput[]
  NOT?: Prisma.ProjectTechStackWhereInput | Prisma.ProjectTechStackWhereInput[]
  projectId?: Prisma.StringFilter<"ProjectTechStack"> | string
  techStackId?: Prisma.StringFilter<"ProjectTechStack"> | string
  createdAt?: Prisma.DateTimeFilter<"ProjectTechStack"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProjectTechStack"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  techStack?: Prisma.XOR<Prisma.TechStackScalarRelationFilter, Prisma.TechStackWhereInput>
}, "projectId_techStackId">

export type ProjectTechStackOrderByWithAggregationInput = {
  projectId?: Prisma.SortOrder
  techStackId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProjectTechStackCountOrderByAggregateInput
  _max?: Prisma.ProjectTechStackMaxOrderByAggregateInput
  _min?: Prisma.ProjectTechStackMinOrderByAggregateInput
}

export type ProjectTechStackScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProjectTechStackScalarWhereWithAggregatesInput | Prisma.ProjectTechStackScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProjectTechStackScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProjectTechStackScalarWhereWithAggregatesInput | Prisma.ProjectTechStackScalarWhereWithAggregatesInput[]
  projectId?: Prisma.StringWithAggregatesFilter<"ProjectTechStack"> | string
  techStackId?: Prisma.StringWithAggregatesFilter<"ProjectTechStack"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProjectTechStack"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProjectTechStack"> | Date | string
}

export type ProjectTechStackCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutTechStacksInput
  techStack: Prisma.TechStackCreateNestedOneWithoutProjectsInput
}

export type ProjectTechStackUncheckedCreateInput = {
  projectId: string
  techStackId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectTechStackUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutTechStacksNestedInput
  techStack?: Prisma.TechStackUpdateOneRequiredWithoutProjectsNestedInput
}

export type ProjectTechStackUncheckedUpdateInput = {
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  techStackId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectTechStackCreateManyInput = {
  projectId: string
  techStackId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectTechStackUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectTechStackUncheckedUpdateManyInput = {
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  techStackId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectTechStackListRelationFilter = {
  every?: Prisma.ProjectTechStackWhereInput
  some?: Prisma.ProjectTechStackWhereInput
  none?: Prisma.ProjectTechStackWhereInput
}

export type ProjectTechStackOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProjectTechStackOrderByRelevanceInput = {
  fields: Prisma.ProjectTechStackOrderByRelevanceFieldEnum | Prisma.ProjectTechStackOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ProjectTechStackProjectIdTechStackIdCompoundUniqueInput = {
  projectId: string
  techStackId: string
}

export type ProjectTechStackCountOrderByAggregateInput = {
  projectId?: Prisma.SortOrder
  techStackId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectTechStackMaxOrderByAggregateInput = {
  projectId?: Prisma.SortOrder
  techStackId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectTechStackMinOrderByAggregateInput = {
  projectId?: Prisma.SortOrder
  techStackId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectTechStackCreateNestedManyWithoutTechStackInput = {
  create?: Prisma.XOR<Prisma.ProjectTechStackCreateWithoutTechStackInput, Prisma.ProjectTechStackUncheckedCreateWithoutTechStackInput> | Prisma.ProjectTechStackCreateWithoutTechStackInput[] | Prisma.ProjectTechStackUncheckedCreateWithoutTechStackInput[]
  connectOrCreate?: Prisma.ProjectTechStackCreateOrConnectWithoutTechStackInput | Prisma.ProjectTechStackCreateOrConnectWithoutTechStackInput[]
  createMany?: Prisma.ProjectTechStackCreateManyTechStackInputEnvelope
  connect?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
}

export type ProjectTechStackUncheckedCreateNestedManyWithoutTechStackInput = {
  create?: Prisma.XOR<Prisma.ProjectTechStackCreateWithoutTechStackInput, Prisma.ProjectTechStackUncheckedCreateWithoutTechStackInput> | Prisma.ProjectTechStackCreateWithoutTechStackInput[] | Prisma.ProjectTechStackUncheckedCreateWithoutTechStackInput[]
  connectOrCreate?: Prisma.ProjectTechStackCreateOrConnectWithoutTechStackInput | Prisma.ProjectTechStackCreateOrConnectWithoutTechStackInput[]
  createMany?: Prisma.ProjectTechStackCreateManyTechStackInputEnvelope
  connect?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
}

export type ProjectTechStackUpdateManyWithoutTechStackNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectTechStackCreateWithoutTechStackInput, Prisma.ProjectTechStackUncheckedCreateWithoutTechStackInput> | Prisma.ProjectTechStackCreateWithoutTechStackInput[] | Prisma.ProjectTechStackUncheckedCreateWithoutTechStackInput[]
  connectOrCreate?: Prisma.ProjectTechStackCreateOrConnectWithoutTechStackInput | Prisma.ProjectTechStackCreateOrConnectWithoutTechStackInput[]
  upsert?: Prisma.ProjectTechStackUpsertWithWhereUniqueWithoutTechStackInput | Prisma.ProjectTechStackUpsertWithWhereUniqueWithoutTechStackInput[]
  createMany?: Prisma.ProjectTechStackCreateManyTechStackInputEnvelope
  set?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  disconnect?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  delete?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  connect?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  update?: Prisma.ProjectTechStackUpdateWithWhereUniqueWithoutTechStackInput | Prisma.ProjectTechStackUpdateWithWhereUniqueWithoutTechStackInput[]
  updateMany?: Prisma.ProjectTechStackUpdateManyWithWhereWithoutTechStackInput | Prisma.ProjectTechStackUpdateManyWithWhereWithoutTechStackInput[]
  deleteMany?: Prisma.ProjectTechStackScalarWhereInput | Prisma.ProjectTechStackScalarWhereInput[]
}

export type ProjectTechStackUncheckedUpdateManyWithoutTechStackNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectTechStackCreateWithoutTechStackInput, Prisma.ProjectTechStackUncheckedCreateWithoutTechStackInput> | Prisma.ProjectTechStackCreateWithoutTechStackInput[] | Prisma.ProjectTechStackUncheckedCreateWithoutTechStackInput[]
  connectOrCreate?: Prisma.ProjectTechStackCreateOrConnectWithoutTechStackInput | Prisma.ProjectTechStackCreateOrConnectWithoutTechStackInput[]
  upsert?: Prisma.ProjectTechStackUpsertWithWhereUniqueWithoutTechStackInput | Prisma.ProjectTechStackUpsertWithWhereUniqueWithoutTechStackInput[]
  createMany?: Prisma.ProjectTechStackCreateManyTechStackInputEnvelope
  set?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  disconnect?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  delete?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  connect?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  update?: Prisma.ProjectTechStackUpdateWithWhereUniqueWithoutTechStackInput | Prisma.ProjectTechStackUpdateWithWhereUniqueWithoutTechStackInput[]
  updateMany?: Prisma.ProjectTechStackUpdateManyWithWhereWithoutTechStackInput | Prisma.ProjectTechStackUpdateManyWithWhereWithoutTechStackInput[]
  deleteMany?: Prisma.ProjectTechStackScalarWhereInput | Prisma.ProjectTechStackScalarWhereInput[]
}

export type ProjectTechStackCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ProjectTechStackCreateWithoutProjectInput, Prisma.ProjectTechStackUncheckedCreateWithoutProjectInput> | Prisma.ProjectTechStackCreateWithoutProjectInput[] | Prisma.ProjectTechStackUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectTechStackCreateOrConnectWithoutProjectInput | Prisma.ProjectTechStackCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ProjectTechStackCreateManyProjectInputEnvelope
  connect?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
}

export type ProjectTechStackUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ProjectTechStackCreateWithoutProjectInput, Prisma.ProjectTechStackUncheckedCreateWithoutProjectInput> | Prisma.ProjectTechStackCreateWithoutProjectInput[] | Prisma.ProjectTechStackUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectTechStackCreateOrConnectWithoutProjectInput | Prisma.ProjectTechStackCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ProjectTechStackCreateManyProjectInputEnvelope
  connect?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
}

export type ProjectTechStackUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectTechStackCreateWithoutProjectInput, Prisma.ProjectTechStackUncheckedCreateWithoutProjectInput> | Prisma.ProjectTechStackCreateWithoutProjectInput[] | Prisma.ProjectTechStackUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectTechStackCreateOrConnectWithoutProjectInput | Prisma.ProjectTechStackCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ProjectTechStackUpsertWithWhereUniqueWithoutProjectInput | Prisma.ProjectTechStackUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ProjectTechStackCreateManyProjectInputEnvelope
  set?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  disconnect?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  delete?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  connect?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  update?: Prisma.ProjectTechStackUpdateWithWhereUniqueWithoutProjectInput | Prisma.ProjectTechStackUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ProjectTechStackUpdateManyWithWhereWithoutProjectInput | Prisma.ProjectTechStackUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ProjectTechStackScalarWhereInput | Prisma.ProjectTechStackScalarWhereInput[]
}

export type ProjectTechStackUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectTechStackCreateWithoutProjectInput, Prisma.ProjectTechStackUncheckedCreateWithoutProjectInput> | Prisma.ProjectTechStackCreateWithoutProjectInput[] | Prisma.ProjectTechStackUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectTechStackCreateOrConnectWithoutProjectInput | Prisma.ProjectTechStackCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ProjectTechStackUpsertWithWhereUniqueWithoutProjectInput | Prisma.ProjectTechStackUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ProjectTechStackCreateManyProjectInputEnvelope
  set?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  disconnect?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  delete?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  connect?: Prisma.ProjectTechStackWhereUniqueInput | Prisma.ProjectTechStackWhereUniqueInput[]
  update?: Prisma.ProjectTechStackUpdateWithWhereUniqueWithoutProjectInput | Prisma.ProjectTechStackUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ProjectTechStackUpdateManyWithWhereWithoutProjectInput | Prisma.ProjectTechStackUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ProjectTechStackScalarWhereInput | Prisma.ProjectTechStackScalarWhereInput[]
}

export type ProjectTechStackCreateWithoutTechStackInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutTechStacksInput
}

export type ProjectTechStackUncheckedCreateWithoutTechStackInput = {
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectTechStackCreateOrConnectWithoutTechStackInput = {
  where: Prisma.ProjectTechStackWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectTechStackCreateWithoutTechStackInput, Prisma.ProjectTechStackUncheckedCreateWithoutTechStackInput>
}

export type ProjectTechStackCreateManyTechStackInputEnvelope = {
  data: Prisma.ProjectTechStackCreateManyTechStackInput | Prisma.ProjectTechStackCreateManyTechStackInput[]
  skipDuplicates?: boolean
}

export type ProjectTechStackUpsertWithWhereUniqueWithoutTechStackInput = {
  where: Prisma.ProjectTechStackWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectTechStackUpdateWithoutTechStackInput, Prisma.ProjectTechStackUncheckedUpdateWithoutTechStackInput>
  create: Prisma.XOR<Prisma.ProjectTechStackCreateWithoutTechStackInput, Prisma.ProjectTechStackUncheckedCreateWithoutTechStackInput>
}

export type ProjectTechStackUpdateWithWhereUniqueWithoutTechStackInput = {
  where: Prisma.ProjectTechStackWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectTechStackUpdateWithoutTechStackInput, Prisma.ProjectTechStackUncheckedUpdateWithoutTechStackInput>
}

export type ProjectTechStackUpdateManyWithWhereWithoutTechStackInput = {
  where: Prisma.ProjectTechStackScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectTechStackUpdateManyMutationInput, Prisma.ProjectTechStackUncheckedUpdateManyWithoutTechStackInput>
}

export type ProjectTechStackScalarWhereInput = {
  AND?: Prisma.ProjectTechStackScalarWhereInput | Prisma.ProjectTechStackScalarWhereInput[]
  OR?: Prisma.ProjectTechStackScalarWhereInput[]
  NOT?: Prisma.ProjectTechStackScalarWhereInput | Prisma.ProjectTechStackScalarWhereInput[]
  projectId?: Prisma.StringFilter<"ProjectTechStack"> | string
  techStackId?: Prisma.StringFilter<"ProjectTechStack"> | string
  createdAt?: Prisma.DateTimeFilter<"ProjectTechStack"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProjectTechStack"> | Date | string
}

export type ProjectTechStackCreateWithoutProjectInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  techStack: Prisma.TechStackCreateNestedOneWithoutProjectsInput
}

export type ProjectTechStackUncheckedCreateWithoutProjectInput = {
  techStackId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectTechStackCreateOrConnectWithoutProjectInput = {
  where: Prisma.ProjectTechStackWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectTechStackCreateWithoutProjectInput, Prisma.ProjectTechStackUncheckedCreateWithoutProjectInput>
}

export type ProjectTechStackCreateManyProjectInputEnvelope = {
  data: Prisma.ProjectTechStackCreateManyProjectInput | Prisma.ProjectTechStackCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type ProjectTechStackUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProjectTechStackWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectTechStackUpdateWithoutProjectInput, Prisma.ProjectTechStackUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.ProjectTechStackCreateWithoutProjectInput, Prisma.ProjectTechStackUncheckedCreateWithoutProjectInput>
}

export type ProjectTechStackUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProjectTechStackWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectTechStackUpdateWithoutProjectInput, Prisma.ProjectTechStackUncheckedUpdateWithoutProjectInput>
}

export type ProjectTechStackUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.ProjectTechStackScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectTechStackUpdateManyMutationInput, Prisma.ProjectTechStackUncheckedUpdateManyWithoutProjectInput>
}

export type ProjectTechStackCreateManyTechStackInput = {
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectTechStackUpdateWithoutTechStackInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutTechStacksNestedInput
}

export type ProjectTechStackUncheckedUpdateWithoutTechStackInput = {
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectTechStackUncheckedUpdateManyWithoutTechStackInput = {
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectTechStackCreateManyProjectInput = {
  techStackId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectTechStackUpdateWithoutProjectInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  techStack?: Prisma.TechStackUpdateOneRequiredWithoutProjectsNestedInput
}

export type ProjectTechStackUncheckedUpdateWithoutProjectInput = {
  techStackId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectTechStackUncheckedUpdateManyWithoutProjectInput = {
  techStackId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProjectTechStackSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  projectId?: boolean
  techStackId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  techStack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectTechStack"]>



export type ProjectTechStackSelectScalar = {
  projectId?: boolean
  techStackId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProjectTechStackOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"projectId" | "techStackId" | "createdAt" | "updatedAt", ExtArgs["result"]["projectTechStack"]>
export type ProjectTechStackInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  techStack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}

export type $ProjectTechStackPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProjectTechStack"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>
    techStack: Prisma.$TechStackPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    projectId: string
    techStackId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["projectTechStack"]>
  composites: {}
}

export type ProjectTechStackGetPayload<S extends boolean | null | undefined | ProjectTechStackDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProjectTechStackPayload, S>

export type ProjectTechStackCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProjectTechStackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProjectTechStackCountAggregateInputType | true
  }

export interface ProjectTechStackDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectTechStack'], meta: { name: 'ProjectTechStack' } }
  /**
   * Find zero or one ProjectTechStack that matches the filter.
   * @param {ProjectTechStackFindUniqueArgs} args - Arguments to find a ProjectTechStack
   * @example
   * // Get one ProjectTechStack
   * const projectTechStack = await prisma.projectTechStack.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProjectTechStackFindUniqueArgs>(args: Prisma.SelectSubset<T, ProjectTechStackFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProjectTechStackClient<runtime.Types.Result.GetResult<Prisma.$ProjectTechStackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProjectTechStack that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProjectTechStackFindUniqueOrThrowArgs} args - Arguments to find a ProjectTechStack
   * @example
   * // Get one ProjectTechStack
   * const projectTechStack = await prisma.projectTechStack.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProjectTechStackFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProjectTechStackFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectTechStackClient<runtime.Types.Result.GetResult<Prisma.$ProjectTechStackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectTechStack that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectTechStackFindFirstArgs} args - Arguments to find a ProjectTechStack
   * @example
   * // Get one ProjectTechStack
   * const projectTechStack = await prisma.projectTechStack.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProjectTechStackFindFirstArgs>(args?: Prisma.SelectSubset<T, ProjectTechStackFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProjectTechStackClient<runtime.Types.Result.GetResult<Prisma.$ProjectTechStackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectTechStack that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectTechStackFindFirstOrThrowArgs} args - Arguments to find a ProjectTechStack
   * @example
   * // Get one ProjectTechStack
   * const projectTechStack = await prisma.projectTechStack.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProjectTechStackFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProjectTechStackFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectTechStackClient<runtime.Types.Result.GetResult<Prisma.$ProjectTechStackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProjectTechStacks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectTechStackFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProjectTechStacks
   * const projectTechStacks = await prisma.projectTechStack.findMany()
   * 
   * // Get first 10 ProjectTechStacks
   * const projectTechStacks = await prisma.projectTechStack.findMany({ take: 10 })
   * 
   * // Only select the `projectId`
   * const projectTechStackWithProjectIdOnly = await prisma.projectTechStack.findMany({ select: { projectId: true } })
   * 
   */
  findMany<T extends ProjectTechStackFindManyArgs>(args?: Prisma.SelectSubset<T, ProjectTechStackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectTechStackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProjectTechStack.
   * @param {ProjectTechStackCreateArgs} args - Arguments to create a ProjectTechStack.
   * @example
   * // Create one ProjectTechStack
   * const ProjectTechStack = await prisma.projectTechStack.create({
   *   data: {
   *     // ... data to create a ProjectTechStack
   *   }
   * })
   * 
   */
  create<T extends ProjectTechStackCreateArgs>(args: Prisma.SelectSubset<T, ProjectTechStackCreateArgs<ExtArgs>>): Prisma.Prisma__ProjectTechStackClient<runtime.Types.Result.GetResult<Prisma.$ProjectTechStackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProjectTechStacks.
   * @param {ProjectTechStackCreateManyArgs} args - Arguments to create many ProjectTechStacks.
   * @example
   * // Create many ProjectTechStacks
   * const projectTechStack = await prisma.projectTechStack.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProjectTechStackCreateManyArgs>(args?: Prisma.SelectSubset<T, ProjectTechStackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a ProjectTechStack.
   * @param {ProjectTechStackDeleteArgs} args - Arguments to delete one ProjectTechStack.
   * @example
   * // Delete one ProjectTechStack
   * const ProjectTechStack = await prisma.projectTechStack.delete({
   *   where: {
   *     // ... filter to delete one ProjectTechStack
   *   }
   * })
   * 
   */
  delete<T extends ProjectTechStackDeleteArgs>(args: Prisma.SelectSubset<T, ProjectTechStackDeleteArgs<ExtArgs>>): Prisma.Prisma__ProjectTechStackClient<runtime.Types.Result.GetResult<Prisma.$ProjectTechStackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProjectTechStack.
   * @param {ProjectTechStackUpdateArgs} args - Arguments to update one ProjectTechStack.
   * @example
   * // Update one ProjectTechStack
   * const projectTechStack = await prisma.projectTechStack.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProjectTechStackUpdateArgs>(args: Prisma.SelectSubset<T, ProjectTechStackUpdateArgs<ExtArgs>>): Prisma.Prisma__ProjectTechStackClient<runtime.Types.Result.GetResult<Prisma.$ProjectTechStackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProjectTechStacks.
   * @param {ProjectTechStackDeleteManyArgs} args - Arguments to filter ProjectTechStacks to delete.
   * @example
   * // Delete a few ProjectTechStacks
   * const { count } = await prisma.projectTechStack.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProjectTechStackDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProjectTechStackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProjectTechStacks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectTechStackUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProjectTechStacks
   * const projectTechStack = await prisma.projectTechStack.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProjectTechStackUpdateManyArgs>(args: Prisma.SelectSubset<T, ProjectTechStackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one ProjectTechStack.
   * @param {ProjectTechStackUpsertArgs} args - Arguments to update or create a ProjectTechStack.
   * @example
   * // Update or create a ProjectTechStack
   * const projectTechStack = await prisma.projectTechStack.upsert({
   *   create: {
   *     // ... data to create a ProjectTechStack
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProjectTechStack we want to update
   *   }
   * })
   */
  upsert<T extends ProjectTechStackUpsertArgs>(args: Prisma.SelectSubset<T, ProjectTechStackUpsertArgs<ExtArgs>>): Prisma.Prisma__ProjectTechStackClient<runtime.Types.Result.GetResult<Prisma.$ProjectTechStackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProjectTechStacks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectTechStackCountArgs} args - Arguments to filter ProjectTechStacks to count.
   * @example
   * // Count the number of ProjectTechStacks
   * const count = await prisma.projectTechStack.count({
   *   where: {
   *     // ... the filter for the ProjectTechStacks we want to count
   *   }
   * })
  **/
  count<T extends ProjectTechStackCountArgs>(
    args?: Prisma.Subset<T, ProjectTechStackCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProjectTechStackCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProjectTechStack.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectTechStackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProjectTechStackAggregateArgs>(args: Prisma.Subset<T, ProjectTechStackAggregateArgs>): Prisma.PrismaPromise<GetProjectTechStackAggregateType<T>>

  /**
   * Group by ProjectTechStack.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectTechStackGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProjectTechStackGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProjectTechStackGroupByArgs['orderBy'] }
      : { orderBy?: ProjectTechStackGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProjectTechStackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectTechStackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProjectTechStack model
 */
readonly fields: ProjectTechStackFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProjectTechStack.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectTechStackClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  techStack<T extends Prisma.TechStackDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TechStackDefaultArgs<ExtArgs>>): Prisma.Prisma__TechStackClient<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProjectTechStack model
 */
export interface ProjectTechStackFieldRefs {
  readonly projectId: Prisma.FieldRef<"ProjectTechStack", 'String'>
  readonly techStackId: Prisma.FieldRef<"ProjectTechStack", 'String'>
  readonly createdAt: Prisma.FieldRef<"ProjectTechStack", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProjectTechStack", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProjectTechStack findUnique
 */
export type ProjectTechStackFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectTechStack
   */
  select?: Prisma.ProjectTechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectTechStack
   */
  omit?: Prisma.ProjectTechStackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectTechStackInclude<ExtArgs> | null
  /**
   * Filter, which ProjectTechStack to fetch.
   */
  where: Prisma.ProjectTechStackWhereUniqueInput
}

/**
 * ProjectTechStack findUniqueOrThrow
 */
export type ProjectTechStackFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectTechStack
   */
  select?: Prisma.ProjectTechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectTechStack
   */
  omit?: Prisma.ProjectTechStackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectTechStackInclude<ExtArgs> | null
  /**
   * Filter, which ProjectTechStack to fetch.
   */
  where: Prisma.ProjectTechStackWhereUniqueInput
}

/**
 * ProjectTechStack findFirst
 */
export type ProjectTechStackFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectTechStack
   */
  select?: Prisma.ProjectTechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectTechStack
   */
  omit?: Prisma.ProjectTechStackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectTechStackInclude<ExtArgs> | null
  /**
   * Filter, which ProjectTechStack to fetch.
   */
  where?: Prisma.ProjectTechStackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectTechStacks to fetch.
   */
  orderBy?: Prisma.ProjectTechStackOrderByWithRelationInput | Prisma.ProjectTechStackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectTechStacks.
   */
  cursor?: Prisma.ProjectTechStackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectTechStacks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectTechStacks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectTechStacks.
   */
  distinct?: Prisma.ProjectTechStackScalarFieldEnum | Prisma.ProjectTechStackScalarFieldEnum[]
}

/**
 * ProjectTechStack findFirstOrThrow
 */
export type ProjectTechStackFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectTechStack
   */
  select?: Prisma.ProjectTechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectTechStack
   */
  omit?: Prisma.ProjectTechStackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectTechStackInclude<ExtArgs> | null
  /**
   * Filter, which ProjectTechStack to fetch.
   */
  where?: Prisma.ProjectTechStackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectTechStacks to fetch.
   */
  orderBy?: Prisma.ProjectTechStackOrderByWithRelationInput | Prisma.ProjectTechStackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectTechStacks.
   */
  cursor?: Prisma.ProjectTechStackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectTechStacks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectTechStacks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectTechStacks.
   */
  distinct?: Prisma.ProjectTechStackScalarFieldEnum | Prisma.ProjectTechStackScalarFieldEnum[]
}

/**
 * ProjectTechStack findMany
 */
export type ProjectTechStackFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectTechStack
   */
  select?: Prisma.ProjectTechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectTechStack
   */
  omit?: Prisma.ProjectTechStackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectTechStackInclude<ExtArgs> | null
  /**
   * Filter, which ProjectTechStacks to fetch.
   */
  where?: Prisma.ProjectTechStackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectTechStacks to fetch.
   */
  orderBy?: Prisma.ProjectTechStackOrderByWithRelationInput | Prisma.ProjectTechStackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProjectTechStacks.
   */
  cursor?: Prisma.ProjectTechStackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectTechStacks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectTechStacks.
   */
  skip?: number
  distinct?: Prisma.ProjectTechStackScalarFieldEnum | Prisma.ProjectTechStackScalarFieldEnum[]
}

/**
 * ProjectTechStack create
 */
export type ProjectTechStackCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectTechStack
   */
  select?: Prisma.ProjectTechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectTechStack
   */
  omit?: Prisma.ProjectTechStackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectTechStackInclude<ExtArgs> | null
  /**
   * The data needed to create a ProjectTechStack.
   */
  data: Prisma.XOR<Prisma.ProjectTechStackCreateInput, Prisma.ProjectTechStackUncheckedCreateInput>
}

/**
 * ProjectTechStack createMany
 */
export type ProjectTechStackCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProjectTechStacks.
   */
  data: Prisma.ProjectTechStackCreateManyInput | Prisma.ProjectTechStackCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProjectTechStack update
 */
export type ProjectTechStackUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectTechStack
   */
  select?: Prisma.ProjectTechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectTechStack
   */
  omit?: Prisma.ProjectTechStackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectTechStackInclude<ExtArgs> | null
  /**
   * The data needed to update a ProjectTechStack.
   */
  data: Prisma.XOR<Prisma.ProjectTechStackUpdateInput, Prisma.ProjectTechStackUncheckedUpdateInput>
  /**
   * Choose, which ProjectTechStack to update.
   */
  where: Prisma.ProjectTechStackWhereUniqueInput
}

/**
 * ProjectTechStack updateMany
 */
export type ProjectTechStackUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProjectTechStacks.
   */
  data: Prisma.XOR<Prisma.ProjectTechStackUpdateManyMutationInput, Prisma.ProjectTechStackUncheckedUpdateManyInput>
  /**
   * Filter which ProjectTechStacks to update
   */
  where?: Prisma.ProjectTechStackWhereInput
  /**
   * Limit how many ProjectTechStacks to update.
   */
  limit?: number
}

/**
 * ProjectTechStack upsert
 */
export type ProjectTechStackUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectTechStack
   */
  select?: Prisma.ProjectTechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectTechStack
   */
  omit?: Prisma.ProjectTechStackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectTechStackInclude<ExtArgs> | null
  /**
   * The filter to search for the ProjectTechStack to update in case it exists.
   */
  where: Prisma.ProjectTechStackWhereUniqueInput
  /**
   * In case the ProjectTechStack found by the `where` argument doesn't exist, create a new ProjectTechStack with this data.
   */
  create: Prisma.XOR<Prisma.ProjectTechStackCreateInput, Prisma.ProjectTechStackUncheckedCreateInput>
  /**
   * In case the ProjectTechStack was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProjectTechStackUpdateInput, Prisma.ProjectTechStackUncheckedUpdateInput>
}

/**
 * ProjectTechStack delete
 */
export type ProjectTechStackDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectTechStack
   */
  select?: Prisma.ProjectTechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectTechStack
   */
  omit?: Prisma.ProjectTechStackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectTechStackInclude<ExtArgs> | null
  /**
   * Filter which ProjectTechStack to delete.
   */
  where: Prisma.ProjectTechStackWhereUniqueInput
}

/**
 * ProjectTechStack deleteMany
 */
export type ProjectTechStackDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectTechStacks to delete
   */
  where?: Prisma.ProjectTechStackWhereInput
  /**
   * Limit how many ProjectTechStacks to delete.
   */
  limit?: number
}

/**
 * ProjectTechStack without action
 */
export type ProjectTechStackDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectTechStack
   */
  select?: Prisma.ProjectTechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectTechStack
   */
  omit?: Prisma.ProjectTechStackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectTechStackInclude<ExtArgs> | null
}
