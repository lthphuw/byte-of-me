
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ExperienceTechnology` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ExperienceTechnology
 * 
 */
export type ExperienceTechnologyModel = runtime.Types.Result.DefaultSelection<Prisma.$ExperienceTechnologyPayload>

export type AggregateExperienceTechnology = {
  _count: ExperienceTechnologyCountAggregateOutputType | null
  _min: ExperienceTechnologyMinAggregateOutputType | null
  _max: ExperienceTechnologyMaxAggregateOutputType | null
}

export type ExperienceTechnologyMinAggregateOutputType = {
  experienceId: string | null
  technologyId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ExperienceTechnologyMaxAggregateOutputType = {
  experienceId: string | null
  technologyId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ExperienceTechnologyCountAggregateOutputType = {
  experienceId: number
  technologyId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ExperienceTechnologyMinAggregateInputType = {
  experienceId?: true
  technologyId?: true
  createdAt?: true
  updatedAt?: true
}

export type ExperienceTechnologyMaxAggregateInputType = {
  experienceId?: true
  technologyId?: true
  createdAt?: true
  updatedAt?: true
}

export type ExperienceTechnologyCountAggregateInputType = {
  experienceId?: true
  technologyId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ExperienceTechnologyAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExperienceTechnology to aggregate.
   */
  where?: Prisma.ExperienceTechnologyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExperienceTechnologies to fetch.
   */
  orderBy?: Prisma.ExperienceTechnologyOrderByWithRelationInput | Prisma.ExperienceTechnologyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExperienceTechnologyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExperienceTechnologies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExperienceTechnologies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ExperienceTechnologies
  **/
  _count?: true | ExperienceTechnologyCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExperienceTechnologyMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExperienceTechnologyMaxAggregateInputType
}

export type GetExperienceTechnologyAggregateType<T extends ExperienceTechnologyAggregateArgs> = {
      [P in keyof T & keyof AggregateExperienceTechnology]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExperienceTechnology[P]>
    : Prisma.GetScalarType<T[P], AggregateExperienceTechnology[P]>
}




export type ExperienceTechnologyGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExperienceTechnologyWhereInput
  orderBy?: Prisma.ExperienceTechnologyOrderByWithAggregationInput | Prisma.ExperienceTechnologyOrderByWithAggregationInput[]
  by: Prisma.ExperienceTechnologyScalarFieldEnum[] | Prisma.ExperienceTechnologyScalarFieldEnum
  having?: Prisma.ExperienceTechnologyScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExperienceTechnologyCountAggregateInputType | true
  _min?: ExperienceTechnologyMinAggregateInputType
  _max?: ExperienceTechnologyMaxAggregateInputType
}

export type ExperienceTechnologyGroupByOutputType = {
  experienceId: string
  technologyId: string
  createdAt: Date
  updatedAt: Date
  _count: ExperienceTechnologyCountAggregateOutputType | null
  _min: ExperienceTechnologyMinAggregateOutputType | null
  _max: ExperienceTechnologyMaxAggregateOutputType | null
}

type GetExperienceTechnologyGroupByPayload<T extends ExperienceTechnologyGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExperienceTechnologyGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExperienceTechnologyGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExperienceTechnologyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExperienceTechnologyGroupByOutputType[P]>
      }
    >
  > 



export type ExperienceTechnologyWhereInput = {
  AND?: Prisma.ExperienceTechnologyWhereInput | Prisma.ExperienceTechnologyWhereInput[]
  OR?: Prisma.ExperienceTechnologyWhereInput[]
  NOT?: Prisma.ExperienceTechnologyWhereInput | Prisma.ExperienceTechnologyWhereInput[]
  experienceId?: Prisma.StringFilter<"ExperienceTechnology"> | string
  technologyId?: Prisma.StringFilter<"ExperienceTechnology"> | string
  createdAt?: Prisma.DateTimeFilter<"ExperienceTechnology"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExperienceTechnology"> | Date | string
  experience?: Prisma.XOR<Prisma.ExperienceScalarRelationFilter, Prisma.ExperienceWhereInput>
  technology?: Prisma.XOR<Prisma.TechnologyScalarRelationFilter, Prisma.TechnologyWhereInput>
}

export type ExperienceTechnologyOrderByWithRelationInput = {
  experienceId?: Prisma.SortOrder
  technologyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  experience?: Prisma.ExperienceOrderByWithRelationInput
  technology?: Prisma.TechnologyOrderByWithRelationInput
  _relevance?: Prisma.ExperienceTechnologyOrderByRelevanceInput
}

export type ExperienceTechnologyWhereUniqueInput = Prisma.AtLeast<{
  experienceId_technologyId?: Prisma.ExperienceTechnologyExperienceIdTechnologyIdCompoundUniqueInput
  AND?: Prisma.ExperienceTechnologyWhereInput | Prisma.ExperienceTechnologyWhereInput[]
  OR?: Prisma.ExperienceTechnologyWhereInput[]
  NOT?: Prisma.ExperienceTechnologyWhereInput | Prisma.ExperienceTechnologyWhereInput[]
  experienceId?: Prisma.StringFilter<"ExperienceTechnology"> | string
  technologyId?: Prisma.StringFilter<"ExperienceTechnology"> | string
  createdAt?: Prisma.DateTimeFilter<"ExperienceTechnology"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExperienceTechnology"> | Date | string
  experience?: Prisma.XOR<Prisma.ExperienceScalarRelationFilter, Prisma.ExperienceWhereInput>
  technology?: Prisma.XOR<Prisma.TechnologyScalarRelationFilter, Prisma.TechnologyWhereInput>
}, "experienceId_technologyId">

export type ExperienceTechnologyOrderByWithAggregationInput = {
  experienceId?: Prisma.SortOrder
  technologyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ExperienceTechnologyCountOrderByAggregateInput
  _max?: Prisma.ExperienceTechnologyMaxOrderByAggregateInput
  _min?: Prisma.ExperienceTechnologyMinOrderByAggregateInput
}

export type ExperienceTechnologyScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExperienceTechnologyScalarWhereWithAggregatesInput | Prisma.ExperienceTechnologyScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExperienceTechnologyScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExperienceTechnologyScalarWhereWithAggregatesInput | Prisma.ExperienceTechnologyScalarWhereWithAggregatesInput[]
  experienceId?: Prisma.StringWithAggregatesFilter<"ExperienceTechnology"> | string
  technologyId?: Prisma.StringWithAggregatesFilter<"ExperienceTechnology"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ExperienceTechnology"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ExperienceTechnology"> | Date | string
}

export type ExperienceTechnologyCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  experience: Prisma.ExperienceCreateNestedOneWithoutTechnologiesInput
  technology: Prisma.TechnologyCreateNestedOneWithoutExperiencesInput
}

export type ExperienceTechnologyUncheckedCreateInput = {
  experienceId: string
  technologyId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExperienceTechnologyUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  experience?: Prisma.ExperienceUpdateOneRequiredWithoutTechnologiesNestedInput
  technology?: Prisma.TechnologyUpdateOneRequiredWithoutExperiencesNestedInput
}

export type ExperienceTechnologyUncheckedUpdateInput = {
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
  technologyId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExperienceTechnologyCreateManyInput = {
  experienceId: string
  technologyId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExperienceTechnologyUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExperienceTechnologyUncheckedUpdateManyInput = {
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
  technologyId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExperienceTechnologyListRelationFilter = {
  every?: Prisma.ExperienceTechnologyWhereInput
  some?: Prisma.ExperienceTechnologyWhereInput
  none?: Prisma.ExperienceTechnologyWhereInput
}

export type ExperienceTechnologyOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ExperienceTechnologyOrderByRelevanceInput = {
  fields: Prisma.ExperienceTechnologyOrderByRelevanceFieldEnum | Prisma.ExperienceTechnologyOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ExperienceTechnologyExperienceIdTechnologyIdCompoundUniqueInput = {
  experienceId: string
  technologyId: string
}

export type ExperienceTechnologyCountOrderByAggregateInput = {
  experienceId?: Prisma.SortOrder
  technologyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExperienceTechnologyMaxOrderByAggregateInput = {
  experienceId?: Prisma.SortOrder
  technologyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExperienceTechnologyMinOrderByAggregateInput = {
  experienceId?: Prisma.SortOrder
  technologyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExperienceTechnologyCreateNestedManyWithoutExperienceInput = {
  create?: Prisma.XOR<Prisma.ExperienceTechnologyCreateWithoutExperienceInput, Prisma.ExperienceTechnologyUncheckedCreateWithoutExperienceInput> | Prisma.ExperienceTechnologyCreateWithoutExperienceInput[] | Prisma.ExperienceTechnologyUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.ExperienceTechnologyCreateOrConnectWithoutExperienceInput | Prisma.ExperienceTechnologyCreateOrConnectWithoutExperienceInput[]
  createMany?: Prisma.ExperienceTechnologyCreateManyExperienceInputEnvelope
  connect?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
}

export type ExperienceTechnologyUncheckedCreateNestedManyWithoutExperienceInput = {
  create?: Prisma.XOR<Prisma.ExperienceTechnologyCreateWithoutExperienceInput, Prisma.ExperienceTechnologyUncheckedCreateWithoutExperienceInput> | Prisma.ExperienceTechnologyCreateWithoutExperienceInput[] | Prisma.ExperienceTechnologyUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.ExperienceTechnologyCreateOrConnectWithoutExperienceInput | Prisma.ExperienceTechnologyCreateOrConnectWithoutExperienceInput[]
  createMany?: Prisma.ExperienceTechnologyCreateManyExperienceInputEnvelope
  connect?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
}

export type ExperienceTechnologyUpdateManyWithoutExperienceNestedInput = {
  create?: Prisma.XOR<Prisma.ExperienceTechnologyCreateWithoutExperienceInput, Prisma.ExperienceTechnologyUncheckedCreateWithoutExperienceInput> | Prisma.ExperienceTechnologyCreateWithoutExperienceInput[] | Prisma.ExperienceTechnologyUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.ExperienceTechnologyCreateOrConnectWithoutExperienceInput | Prisma.ExperienceTechnologyCreateOrConnectWithoutExperienceInput[]
  upsert?: Prisma.ExperienceTechnologyUpsertWithWhereUniqueWithoutExperienceInput | Prisma.ExperienceTechnologyUpsertWithWhereUniqueWithoutExperienceInput[]
  createMany?: Prisma.ExperienceTechnologyCreateManyExperienceInputEnvelope
  set?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  disconnect?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  delete?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  connect?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  update?: Prisma.ExperienceTechnologyUpdateWithWhereUniqueWithoutExperienceInput | Prisma.ExperienceTechnologyUpdateWithWhereUniqueWithoutExperienceInput[]
  updateMany?: Prisma.ExperienceTechnologyUpdateManyWithWhereWithoutExperienceInput | Prisma.ExperienceTechnologyUpdateManyWithWhereWithoutExperienceInput[]
  deleteMany?: Prisma.ExperienceTechnologyScalarWhereInput | Prisma.ExperienceTechnologyScalarWhereInput[]
}

export type ExperienceTechnologyUncheckedUpdateManyWithoutExperienceNestedInput = {
  create?: Prisma.XOR<Prisma.ExperienceTechnologyCreateWithoutExperienceInput, Prisma.ExperienceTechnologyUncheckedCreateWithoutExperienceInput> | Prisma.ExperienceTechnologyCreateWithoutExperienceInput[] | Prisma.ExperienceTechnologyUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.ExperienceTechnologyCreateOrConnectWithoutExperienceInput | Prisma.ExperienceTechnologyCreateOrConnectWithoutExperienceInput[]
  upsert?: Prisma.ExperienceTechnologyUpsertWithWhereUniqueWithoutExperienceInput | Prisma.ExperienceTechnologyUpsertWithWhereUniqueWithoutExperienceInput[]
  createMany?: Prisma.ExperienceTechnologyCreateManyExperienceInputEnvelope
  set?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  disconnect?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  delete?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  connect?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  update?: Prisma.ExperienceTechnologyUpdateWithWhereUniqueWithoutExperienceInput | Prisma.ExperienceTechnologyUpdateWithWhereUniqueWithoutExperienceInput[]
  updateMany?: Prisma.ExperienceTechnologyUpdateManyWithWhereWithoutExperienceInput | Prisma.ExperienceTechnologyUpdateManyWithWhereWithoutExperienceInput[]
  deleteMany?: Prisma.ExperienceTechnologyScalarWhereInput | Prisma.ExperienceTechnologyScalarWhereInput[]
}

export type ExperienceTechnologyCreateNestedManyWithoutTechnologyInput = {
  create?: Prisma.XOR<Prisma.ExperienceTechnologyCreateWithoutTechnologyInput, Prisma.ExperienceTechnologyUncheckedCreateWithoutTechnologyInput> | Prisma.ExperienceTechnologyCreateWithoutTechnologyInput[] | Prisma.ExperienceTechnologyUncheckedCreateWithoutTechnologyInput[]
  connectOrCreate?: Prisma.ExperienceTechnologyCreateOrConnectWithoutTechnologyInput | Prisma.ExperienceTechnologyCreateOrConnectWithoutTechnologyInput[]
  createMany?: Prisma.ExperienceTechnologyCreateManyTechnologyInputEnvelope
  connect?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
}

export type ExperienceTechnologyUncheckedCreateNestedManyWithoutTechnologyInput = {
  create?: Prisma.XOR<Prisma.ExperienceTechnologyCreateWithoutTechnologyInput, Prisma.ExperienceTechnologyUncheckedCreateWithoutTechnologyInput> | Prisma.ExperienceTechnologyCreateWithoutTechnologyInput[] | Prisma.ExperienceTechnologyUncheckedCreateWithoutTechnologyInput[]
  connectOrCreate?: Prisma.ExperienceTechnologyCreateOrConnectWithoutTechnologyInput | Prisma.ExperienceTechnologyCreateOrConnectWithoutTechnologyInput[]
  createMany?: Prisma.ExperienceTechnologyCreateManyTechnologyInputEnvelope
  connect?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
}

export type ExperienceTechnologyUpdateManyWithoutTechnologyNestedInput = {
  create?: Prisma.XOR<Prisma.ExperienceTechnologyCreateWithoutTechnologyInput, Prisma.ExperienceTechnologyUncheckedCreateWithoutTechnologyInput> | Prisma.ExperienceTechnologyCreateWithoutTechnologyInput[] | Prisma.ExperienceTechnologyUncheckedCreateWithoutTechnologyInput[]
  connectOrCreate?: Prisma.ExperienceTechnologyCreateOrConnectWithoutTechnologyInput | Prisma.ExperienceTechnologyCreateOrConnectWithoutTechnologyInput[]
  upsert?: Prisma.ExperienceTechnologyUpsertWithWhereUniqueWithoutTechnologyInput | Prisma.ExperienceTechnologyUpsertWithWhereUniqueWithoutTechnologyInput[]
  createMany?: Prisma.ExperienceTechnologyCreateManyTechnologyInputEnvelope
  set?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  disconnect?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  delete?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  connect?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  update?: Prisma.ExperienceTechnologyUpdateWithWhereUniqueWithoutTechnologyInput | Prisma.ExperienceTechnologyUpdateWithWhereUniqueWithoutTechnologyInput[]
  updateMany?: Prisma.ExperienceTechnologyUpdateManyWithWhereWithoutTechnologyInput | Prisma.ExperienceTechnologyUpdateManyWithWhereWithoutTechnologyInput[]
  deleteMany?: Prisma.ExperienceTechnologyScalarWhereInput | Prisma.ExperienceTechnologyScalarWhereInput[]
}

export type ExperienceTechnologyUncheckedUpdateManyWithoutTechnologyNestedInput = {
  create?: Prisma.XOR<Prisma.ExperienceTechnologyCreateWithoutTechnologyInput, Prisma.ExperienceTechnologyUncheckedCreateWithoutTechnologyInput> | Prisma.ExperienceTechnologyCreateWithoutTechnologyInput[] | Prisma.ExperienceTechnologyUncheckedCreateWithoutTechnologyInput[]
  connectOrCreate?: Prisma.ExperienceTechnologyCreateOrConnectWithoutTechnologyInput | Prisma.ExperienceTechnologyCreateOrConnectWithoutTechnologyInput[]
  upsert?: Prisma.ExperienceTechnologyUpsertWithWhereUniqueWithoutTechnologyInput | Prisma.ExperienceTechnologyUpsertWithWhereUniqueWithoutTechnologyInput[]
  createMany?: Prisma.ExperienceTechnologyCreateManyTechnologyInputEnvelope
  set?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  disconnect?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  delete?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  connect?: Prisma.ExperienceTechnologyWhereUniqueInput | Prisma.ExperienceTechnologyWhereUniqueInput[]
  update?: Prisma.ExperienceTechnologyUpdateWithWhereUniqueWithoutTechnologyInput | Prisma.ExperienceTechnologyUpdateWithWhereUniqueWithoutTechnologyInput[]
  updateMany?: Prisma.ExperienceTechnologyUpdateManyWithWhereWithoutTechnologyInput | Prisma.ExperienceTechnologyUpdateManyWithWhereWithoutTechnologyInput[]
  deleteMany?: Prisma.ExperienceTechnologyScalarWhereInput | Prisma.ExperienceTechnologyScalarWhereInput[]
}

export type ExperienceTechnologyCreateWithoutExperienceInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  technology: Prisma.TechnologyCreateNestedOneWithoutExperiencesInput
}

export type ExperienceTechnologyUncheckedCreateWithoutExperienceInput = {
  technologyId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExperienceTechnologyCreateOrConnectWithoutExperienceInput = {
  where: Prisma.ExperienceTechnologyWhereUniqueInput
  create: Prisma.XOR<Prisma.ExperienceTechnologyCreateWithoutExperienceInput, Prisma.ExperienceTechnologyUncheckedCreateWithoutExperienceInput>
}

export type ExperienceTechnologyCreateManyExperienceInputEnvelope = {
  data: Prisma.ExperienceTechnologyCreateManyExperienceInput | Prisma.ExperienceTechnologyCreateManyExperienceInput[]
  skipDuplicates?: boolean
}

export type ExperienceTechnologyUpsertWithWhereUniqueWithoutExperienceInput = {
  where: Prisma.ExperienceTechnologyWhereUniqueInput
  update: Prisma.XOR<Prisma.ExperienceTechnologyUpdateWithoutExperienceInput, Prisma.ExperienceTechnologyUncheckedUpdateWithoutExperienceInput>
  create: Prisma.XOR<Prisma.ExperienceTechnologyCreateWithoutExperienceInput, Prisma.ExperienceTechnologyUncheckedCreateWithoutExperienceInput>
}

export type ExperienceTechnologyUpdateWithWhereUniqueWithoutExperienceInput = {
  where: Prisma.ExperienceTechnologyWhereUniqueInput
  data: Prisma.XOR<Prisma.ExperienceTechnologyUpdateWithoutExperienceInput, Prisma.ExperienceTechnologyUncheckedUpdateWithoutExperienceInput>
}

export type ExperienceTechnologyUpdateManyWithWhereWithoutExperienceInput = {
  where: Prisma.ExperienceTechnologyScalarWhereInput
  data: Prisma.XOR<Prisma.ExperienceTechnologyUpdateManyMutationInput, Prisma.ExperienceTechnologyUncheckedUpdateManyWithoutExperienceInput>
}

export type ExperienceTechnologyScalarWhereInput = {
  AND?: Prisma.ExperienceTechnologyScalarWhereInput | Prisma.ExperienceTechnologyScalarWhereInput[]
  OR?: Prisma.ExperienceTechnologyScalarWhereInput[]
  NOT?: Prisma.ExperienceTechnologyScalarWhereInput | Prisma.ExperienceTechnologyScalarWhereInput[]
  experienceId?: Prisma.StringFilter<"ExperienceTechnology"> | string
  technologyId?: Prisma.StringFilter<"ExperienceTechnology"> | string
  createdAt?: Prisma.DateTimeFilter<"ExperienceTechnology"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExperienceTechnology"> | Date | string
}

export type ExperienceTechnologyCreateWithoutTechnologyInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  experience: Prisma.ExperienceCreateNestedOneWithoutTechnologiesInput
}

export type ExperienceTechnologyUncheckedCreateWithoutTechnologyInput = {
  experienceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExperienceTechnologyCreateOrConnectWithoutTechnologyInput = {
  where: Prisma.ExperienceTechnologyWhereUniqueInput
  create: Prisma.XOR<Prisma.ExperienceTechnologyCreateWithoutTechnologyInput, Prisma.ExperienceTechnologyUncheckedCreateWithoutTechnologyInput>
}

export type ExperienceTechnologyCreateManyTechnologyInputEnvelope = {
  data: Prisma.ExperienceTechnologyCreateManyTechnologyInput | Prisma.ExperienceTechnologyCreateManyTechnologyInput[]
  skipDuplicates?: boolean
}

export type ExperienceTechnologyUpsertWithWhereUniqueWithoutTechnologyInput = {
  where: Prisma.ExperienceTechnologyWhereUniqueInput
  update: Prisma.XOR<Prisma.ExperienceTechnologyUpdateWithoutTechnologyInput, Prisma.ExperienceTechnologyUncheckedUpdateWithoutTechnologyInput>
  create: Prisma.XOR<Prisma.ExperienceTechnologyCreateWithoutTechnologyInput, Prisma.ExperienceTechnologyUncheckedCreateWithoutTechnologyInput>
}

export type ExperienceTechnologyUpdateWithWhereUniqueWithoutTechnologyInput = {
  where: Prisma.ExperienceTechnologyWhereUniqueInput
  data: Prisma.XOR<Prisma.ExperienceTechnologyUpdateWithoutTechnologyInput, Prisma.ExperienceTechnologyUncheckedUpdateWithoutTechnologyInput>
}

export type ExperienceTechnologyUpdateManyWithWhereWithoutTechnologyInput = {
  where: Prisma.ExperienceTechnologyScalarWhereInput
  data: Prisma.XOR<Prisma.ExperienceTechnologyUpdateManyMutationInput, Prisma.ExperienceTechnologyUncheckedUpdateManyWithoutTechnologyInput>
}

export type ExperienceTechnologyCreateManyExperienceInput = {
  technologyId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExperienceTechnologyUpdateWithoutExperienceInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  technology?: Prisma.TechnologyUpdateOneRequiredWithoutExperiencesNestedInput
}

export type ExperienceTechnologyUncheckedUpdateWithoutExperienceInput = {
  technologyId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExperienceTechnologyUncheckedUpdateManyWithoutExperienceInput = {
  technologyId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExperienceTechnologyCreateManyTechnologyInput = {
  experienceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExperienceTechnologyUpdateWithoutTechnologyInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  experience?: Prisma.ExperienceUpdateOneRequiredWithoutTechnologiesNestedInput
}

export type ExperienceTechnologyUncheckedUpdateWithoutTechnologyInput = {
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExperienceTechnologyUncheckedUpdateManyWithoutTechnologyInput = {
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ExperienceTechnologySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  experienceId?: boolean
  technologyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
  technology?: boolean | Prisma.TechnologyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["experienceTechnology"]>



export type ExperienceTechnologySelectScalar = {
  experienceId?: boolean
  technologyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ExperienceTechnologyOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"experienceId" | "technologyId" | "createdAt" | "updatedAt", ExtArgs["result"]["experienceTechnology"]>
export type ExperienceTechnologyInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
  technology?: boolean | Prisma.TechnologyDefaultArgs<ExtArgs>
}

export type $ExperienceTechnologyPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ExperienceTechnology"
  objects: {
    experience: Prisma.$ExperiencePayload<ExtArgs>
    technology: Prisma.$TechnologyPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    experienceId: string
    technologyId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["experienceTechnology"]>
  composites: {}
}

export type ExperienceTechnologyGetPayload<S extends boolean | null | undefined | ExperienceTechnologyDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExperienceTechnologyPayload, S>

export type ExperienceTechnologyCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExperienceTechnologyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExperienceTechnologyCountAggregateInputType | true
  }

export interface ExperienceTechnologyDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExperienceTechnology'], meta: { name: 'ExperienceTechnology' } }
  /**
   * Find zero or one ExperienceTechnology that matches the filter.
   * @param {ExperienceTechnologyFindUniqueArgs} args - Arguments to find a ExperienceTechnology
   * @example
   * // Get one ExperienceTechnology
   * const experienceTechnology = await prisma.experienceTechnology.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExperienceTechnologyFindUniqueArgs>(args: Prisma.SelectSubset<T, ExperienceTechnologyFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExperienceTechnologyClient<runtime.Types.Result.GetResult<Prisma.$ExperienceTechnologyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ExperienceTechnology that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExperienceTechnologyFindUniqueOrThrowArgs} args - Arguments to find a ExperienceTechnology
   * @example
   * // Get one ExperienceTechnology
   * const experienceTechnology = await prisma.experienceTechnology.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExperienceTechnologyFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExperienceTechnologyFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExperienceTechnologyClient<runtime.Types.Result.GetResult<Prisma.$ExperienceTechnologyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExperienceTechnology that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceTechnologyFindFirstArgs} args - Arguments to find a ExperienceTechnology
   * @example
   * // Get one ExperienceTechnology
   * const experienceTechnology = await prisma.experienceTechnology.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExperienceTechnologyFindFirstArgs>(args?: Prisma.SelectSubset<T, ExperienceTechnologyFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExperienceTechnologyClient<runtime.Types.Result.GetResult<Prisma.$ExperienceTechnologyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExperienceTechnology that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceTechnologyFindFirstOrThrowArgs} args - Arguments to find a ExperienceTechnology
   * @example
   * // Get one ExperienceTechnology
   * const experienceTechnology = await prisma.experienceTechnology.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExperienceTechnologyFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExperienceTechnologyFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExperienceTechnologyClient<runtime.Types.Result.GetResult<Prisma.$ExperienceTechnologyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ExperienceTechnologies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceTechnologyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ExperienceTechnologies
   * const experienceTechnologies = await prisma.experienceTechnology.findMany()
   * 
   * // Get first 10 ExperienceTechnologies
   * const experienceTechnologies = await prisma.experienceTechnology.findMany({ take: 10 })
   * 
   * // Only select the `experienceId`
   * const experienceTechnologyWithExperienceIdOnly = await prisma.experienceTechnology.findMany({ select: { experienceId: true } })
   * 
   */
  findMany<T extends ExperienceTechnologyFindManyArgs>(args?: Prisma.SelectSubset<T, ExperienceTechnologyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExperienceTechnologyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ExperienceTechnology.
   * @param {ExperienceTechnologyCreateArgs} args - Arguments to create a ExperienceTechnology.
   * @example
   * // Create one ExperienceTechnology
   * const ExperienceTechnology = await prisma.experienceTechnology.create({
   *   data: {
   *     // ... data to create a ExperienceTechnology
   *   }
   * })
   * 
   */
  create<T extends ExperienceTechnologyCreateArgs>(args: Prisma.SelectSubset<T, ExperienceTechnologyCreateArgs<ExtArgs>>): Prisma.Prisma__ExperienceTechnologyClient<runtime.Types.Result.GetResult<Prisma.$ExperienceTechnologyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ExperienceTechnologies.
   * @param {ExperienceTechnologyCreateManyArgs} args - Arguments to create many ExperienceTechnologies.
   * @example
   * // Create many ExperienceTechnologies
   * const experienceTechnology = await prisma.experienceTechnology.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExperienceTechnologyCreateManyArgs>(args?: Prisma.SelectSubset<T, ExperienceTechnologyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a ExperienceTechnology.
   * @param {ExperienceTechnologyDeleteArgs} args - Arguments to delete one ExperienceTechnology.
   * @example
   * // Delete one ExperienceTechnology
   * const ExperienceTechnology = await prisma.experienceTechnology.delete({
   *   where: {
   *     // ... filter to delete one ExperienceTechnology
   *   }
   * })
   * 
   */
  delete<T extends ExperienceTechnologyDeleteArgs>(args: Prisma.SelectSubset<T, ExperienceTechnologyDeleteArgs<ExtArgs>>): Prisma.Prisma__ExperienceTechnologyClient<runtime.Types.Result.GetResult<Prisma.$ExperienceTechnologyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ExperienceTechnology.
   * @param {ExperienceTechnologyUpdateArgs} args - Arguments to update one ExperienceTechnology.
   * @example
   * // Update one ExperienceTechnology
   * const experienceTechnology = await prisma.experienceTechnology.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExperienceTechnologyUpdateArgs>(args: Prisma.SelectSubset<T, ExperienceTechnologyUpdateArgs<ExtArgs>>): Prisma.Prisma__ExperienceTechnologyClient<runtime.Types.Result.GetResult<Prisma.$ExperienceTechnologyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ExperienceTechnologies.
   * @param {ExperienceTechnologyDeleteManyArgs} args - Arguments to filter ExperienceTechnologies to delete.
   * @example
   * // Delete a few ExperienceTechnologies
   * const { count } = await prisma.experienceTechnology.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExperienceTechnologyDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExperienceTechnologyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExperienceTechnologies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceTechnologyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ExperienceTechnologies
   * const experienceTechnology = await prisma.experienceTechnology.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExperienceTechnologyUpdateManyArgs>(args: Prisma.SelectSubset<T, ExperienceTechnologyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one ExperienceTechnology.
   * @param {ExperienceTechnologyUpsertArgs} args - Arguments to update or create a ExperienceTechnology.
   * @example
   * // Update or create a ExperienceTechnology
   * const experienceTechnology = await prisma.experienceTechnology.upsert({
   *   create: {
   *     // ... data to create a ExperienceTechnology
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ExperienceTechnology we want to update
   *   }
   * })
   */
  upsert<T extends ExperienceTechnologyUpsertArgs>(args: Prisma.SelectSubset<T, ExperienceTechnologyUpsertArgs<ExtArgs>>): Prisma.Prisma__ExperienceTechnologyClient<runtime.Types.Result.GetResult<Prisma.$ExperienceTechnologyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ExperienceTechnologies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceTechnologyCountArgs} args - Arguments to filter ExperienceTechnologies to count.
   * @example
   * // Count the number of ExperienceTechnologies
   * const count = await prisma.experienceTechnology.count({
   *   where: {
   *     // ... the filter for the ExperienceTechnologies we want to count
   *   }
   * })
  **/
  count<T extends ExperienceTechnologyCountArgs>(
    args?: Prisma.Subset<T, ExperienceTechnologyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExperienceTechnologyCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ExperienceTechnology.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceTechnologyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExperienceTechnologyAggregateArgs>(args: Prisma.Subset<T, ExperienceTechnologyAggregateArgs>): Prisma.PrismaPromise<GetExperienceTechnologyAggregateType<T>>

  /**
   * Group by ExperienceTechnology.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceTechnologyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExperienceTechnologyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExperienceTechnologyGroupByArgs['orderBy'] }
      : { orderBy?: ExperienceTechnologyGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExperienceTechnologyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExperienceTechnologyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ExperienceTechnology model
 */
readonly fields: ExperienceTechnologyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ExperienceTechnology.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExperienceTechnologyClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  experience<T extends Prisma.ExperienceDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ExperienceDefaultArgs<ExtArgs>>): Prisma.Prisma__ExperienceClient<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  technology<T extends Prisma.TechnologyDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TechnologyDefaultArgs<ExtArgs>>): Prisma.Prisma__TechnologyClient<runtime.Types.Result.GetResult<Prisma.$TechnologyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ExperienceTechnology model
 */
export interface ExperienceTechnologyFieldRefs {
  readonly experienceId: Prisma.FieldRef<"ExperienceTechnology", 'String'>
  readonly technologyId: Prisma.FieldRef<"ExperienceTechnology", 'String'>
  readonly createdAt: Prisma.FieldRef<"ExperienceTechnology", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ExperienceTechnology", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ExperienceTechnology findUnique
 */
export type ExperienceTechnologyFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceTechnology
   */
  select?: Prisma.ExperienceTechnologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceTechnology
   */
  omit?: Prisma.ExperienceTechnologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceTechnologyInclude<ExtArgs> | null
  /**
   * Filter, which ExperienceTechnology to fetch.
   */
  where: Prisma.ExperienceTechnologyWhereUniqueInput
}

/**
 * ExperienceTechnology findUniqueOrThrow
 */
export type ExperienceTechnologyFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceTechnology
   */
  select?: Prisma.ExperienceTechnologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceTechnology
   */
  omit?: Prisma.ExperienceTechnologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceTechnologyInclude<ExtArgs> | null
  /**
   * Filter, which ExperienceTechnology to fetch.
   */
  where: Prisma.ExperienceTechnologyWhereUniqueInput
}

/**
 * ExperienceTechnology findFirst
 */
export type ExperienceTechnologyFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceTechnology
   */
  select?: Prisma.ExperienceTechnologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceTechnology
   */
  omit?: Prisma.ExperienceTechnologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceTechnologyInclude<ExtArgs> | null
  /**
   * Filter, which ExperienceTechnology to fetch.
   */
  where?: Prisma.ExperienceTechnologyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExperienceTechnologies to fetch.
   */
  orderBy?: Prisma.ExperienceTechnologyOrderByWithRelationInput | Prisma.ExperienceTechnologyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExperienceTechnologies.
   */
  cursor?: Prisma.ExperienceTechnologyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExperienceTechnologies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExperienceTechnologies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExperienceTechnologies.
   */
  distinct?: Prisma.ExperienceTechnologyScalarFieldEnum | Prisma.ExperienceTechnologyScalarFieldEnum[]
}

/**
 * ExperienceTechnology findFirstOrThrow
 */
export type ExperienceTechnologyFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceTechnology
   */
  select?: Prisma.ExperienceTechnologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceTechnology
   */
  omit?: Prisma.ExperienceTechnologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceTechnologyInclude<ExtArgs> | null
  /**
   * Filter, which ExperienceTechnology to fetch.
   */
  where?: Prisma.ExperienceTechnologyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExperienceTechnologies to fetch.
   */
  orderBy?: Prisma.ExperienceTechnologyOrderByWithRelationInput | Prisma.ExperienceTechnologyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExperienceTechnologies.
   */
  cursor?: Prisma.ExperienceTechnologyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExperienceTechnologies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExperienceTechnologies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExperienceTechnologies.
   */
  distinct?: Prisma.ExperienceTechnologyScalarFieldEnum | Prisma.ExperienceTechnologyScalarFieldEnum[]
}

/**
 * ExperienceTechnology findMany
 */
export type ExperienceTechnologyFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceTechnology
   */
  select?: Prisma.ExperienceTechnologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceTechnology
   */
  omit?: Prisma.ExperienceTechnologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceTechnologyInclude<ExtArgs> | null
  /**
   * Filter, which ExperienceTechnologies to fetch.
   */
  where?: Prisma.ExperienceTechnologyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExperienceTechnologies to fetch.
   */
  orderBy?: Prisma.ExperienceTechnologyOrderByWithRelationInput | Prisma.ExperienceTechnologyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ExperienceTechnologies.
   */
  cursor?: Prisma.ExperienceTechnologyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExperienceTechnologies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExperienceTechnologies.
   */
  skip?: number
  distinct?: Prisma.ExperienceTechnologyScalarFieldEnum | Prisma.ExperienceTechnologyScalarFieldEnum[]
}

/**
 * ExperienceTechnology create
 */
export type ExperienceTechnologyCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceTechnology
   */
  select?: Prisma.ExperienceTechnologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceTechnology
   */
  omit?: Prisma.ExperienceTechnologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceTechnologyInclude<ExtArgs> | null
  /**
   * The data needed to create a ExperienceTechnology.
   */
  data: Prisma.XOR<Prisma.ExperienceTechnologyCreateInput, Prisma.ExperienceTechnologyUncheckedCreateInput>
}

/**
 * ExperienceTechnology createMany
 */
export type ExperienceTechnologyCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ExperienceTechnologies.
   */
  data: Prisma.ExperienceTechnologyCreateManyInput | Prisma.ExperienceTechnologyCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ExperienceTechnology update
 */
export type ExperienceTechnologyUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceTechnology
   */
  select?: Prisma.ExperienceTechnologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceTechnology
   */
  omit?: Prisma.ExperienceTechnologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceTechnologyInclude<ExtArgs> | null
  /**
   * The data needed to update a ExperienceTechnology.
   */
  data: Prisma.XOR<Prisma.ExperienceTechnologyUpdateInput, Prisma.ExperienceTechnologyUncheckedUpdateInput>
  /**
   * Choose, which ExperienceTechnology to update.
   */
  where: Prisma.ExperienceTechnologyWhereUniqueInput
}

/**
 * ExperienceTechnology updateMany
 */
export type ExperienceTechnologyUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ExperienceTechnologies.
   */
  data: Prisma.XOR<Prisma.ExperienceTechnologyUpdateManyMutationInput, Prisma.ExperienceTechnologyUncheckedUpdateManyInput>
  /**
   * Filter which ExperienceTechnologies to update
   */
  where?: Prisma.ExperienceTechnologyWhereInput
  /**
   * Limit how many ExperienceTechnologies to update.
   */
  limit?: number
}

/**
 * ExperienceTechnology upsert
 */
export type ExperienceTechnologyUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceTechnology
   */
  select?: Prisma.ExperienceTechnologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceTechnology
   */
  omit?: Prisma.ExperienceTechnologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceTechnologyInclude<ExtArgs> | null
  /**
   * The filter to search for the ExperienceTechnology to update in case it exists.
   */
  where: Prisma.ExperienceTechnologyWhereUniqueInput
  /**
   * In case the ExperienceTechnology found by the `where` argument doesn't exist, create a new ExperienceTechnology with this data.
   */
  create: Prisma.XOR<Prisma.ExperienceTechnologyCreateInput, Prisma.ExperienceTechnologyUncheckedCreateInput>
  /**
   * In case the ExperienceTechnology was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExperienceTechnologyUpdateInput, Prisma.ExperienceTechnologyUncheckedUpdateInput>
}

/**
 * ExperienceTechnology delete
 */
export type ExperienceTechnologyDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceTechnology
   */
  select?: Prisma.ExperienceTechnologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceTechnology
   */
  omit?: Prisma.ExperienceTechnologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceTechnologyInclude<ExtArgs> | null
  /**
   * Filter which ExperienceTechnology to delete.
   */
  where: Prisma.ExperienceTechnologyWhereUniqueInput
}

/**
 * ExperienceTechnology deleteMany
 */
export type ExperienceTechnologyDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExperienceTechnologies to delete
   */
  where?: Prisma.ExperienceTechnologyWhereInput
  /**
   * Limit how many ExperienceTechnologies to delete.
   */
  limit?: number
}

/**
 * ExperienceTechnology without action
 */
export type ExperienceTechnologyDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceTechnology
   */
  select?: Prisma.ExperienceTechnologySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceTechnology
   */
  omit?: Prisma.ExperienceTechnologyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceTechnologyInclude<ExtArgs> | null
}
