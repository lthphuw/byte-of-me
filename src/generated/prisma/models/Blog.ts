
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Blog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Blog
 * 
 */
export type BlogModel = runtime.Types.Result.DefaultSelection<Prisma.$BlogPayload>

export type AggregateBlog = {
  _count: BlogCountAggregateOutputType | null
  _min: BlogMinAggregateOutputType | null
  _max: BlogMaxAggregateOutputType | null
}

export type BlogMinAggregateOutputType = {
  id: string | null
  userId: string | null
  title: string | null
  content: string | null
  publishedDate: Date | null
  slug: string | null
  createdAt: Date | null
  updatedAt: Date | null
  projectId: string | null
}

export type BlogMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  title: string | null
  content: string | null
  publishedDate: Date | null
  slug: string | null
  createdAt: Date | null
  updatedAt: Date | null
  projectId: string | null
}

export type BlogCountAggregateOutputType = {
  id: number
  userId: number
  title: number
  content: number
  publishedDate: number
  slug: number
  createdAt: number
  updatedAt: number
  projectId: number
  _all: number
}


export type BlogMinAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  content?: true
  publishedDate?: true
  slug?: true
  createdAt?: true
  updatedAt?: true
  projectId?: true
}

export type BlogMaxAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  content?: true
  publishedDate?: true
  slug?: true
  createdAt?: true
  updatedAt?: true
  projectId?: true
}

export type BlogCountAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  content?: true
  publishedDate?: true
  slug?: true
  createdAt?: true
  updatedAt?: true
  projectId?: true
  _all?: true
}

export type BlogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Blog to aggregate.
   */
  where?: Prisma.BlogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Blogs to fetch.
   */
  orderBy?: Prisma.BlogOrderByWithRelationInput | Prisma.BlogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BlogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Blogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Blogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Blogs
  **/
  _count?: true | BlogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BlogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BlogMaxAggregateInputType
}

export type GetBlogAggregateType<T extends BlogAggregateArgs> = {
      [P in keyof T & keyof AggregateBlog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBlog[P]>
    : Prisma.GetScalarType<T[P], AggregateBlog[P]>
}




export type BlogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BlogWhereInput
  orderBy?: Prisma.BlogOrderByWithAggregationInput | Prisma.BlogOrderByWithAggregationInput[]
  by: Prisma.BlogScalarFieldEnum[] | Prisma.BlogScalarFieldEnum
  having?: Prisma.BlogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BlogCountAggregateInputType | true
  _min?: BlogMinAggregateInputType
  _max?: BlogMaxAggregateInputType
}

export type BlogGroupByOutputType = {
  id: string
  userId: string
  title: string
  content: string
  publishedDate: Date
  slug: string
  createdAt: Date
  updatedAt: Date
  projectId: string | null
  _count: BlogCountAggregateOutputType | null
  _min: BlogMinAggregateOutputType | null
  _max: BlogMaxAggregateOutputType | null
}

type GetBlogGroupByPayload<T extends BlogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BlogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BlogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BlogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BlogGroupByOutputType[P]>
      }
    >
  > 



export type BlogWhereInput = {
  AND?: Prisma.BlogWhereInput | Prisma.BlogWhereInput[]
  OR?: Prisma.BlogWhereInput[]
  NOT?: Prisma.BlogWhereInput | Prisma.BlogWhereInput[]
  id?: Prisma.StringFilter<"Blog"> | string
  userId?: Prisma.StringFilter<"Blog"> | string
  title?: Prisma.StringFilter<"Blog"> | string
  content?: Prisma.StringFilter<"Blog"> | string
  publishedDate?: Prisma.DateTimeFilter<"Blog"> | Date | string
  slug?: Prisma.StringFilter<"Blog"> | string
  createdAt?: Prisma.DateTimeFilter<"Blog"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Blog"> | Date | string
  projectId?: Prisma.StringNullableFilter<"Blog"> | string | null
  project?: Prisma.XOR<Prisma.ProjectNullableScalarRelationFilter, Prisma.ProjectWhereInput> | null
  tags?: Prisma.BlogTagListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  translations?: Prisma.TranslationListRelationFilter
}

export type BlogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publishedDate?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  projectId?: Prisma.SortOrderInput | Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
  tags?: Prisma.BlogTagOrderByRelationAggregateInput
  user?: Prisma.UserOrderByWithRelationInput
  translations?: Prisma.TranslationOrderByRelationAggregateInput
}

export type BlogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  slug?: string
  AND?: Prisma.BlogWhereInput | Prisma.BlogWhereInput[]
  OR?: Prisma.BlogWhereInput[]
  NOT?: Prisma.BlogWhereInput | Prisma.BlogWhereInput[]
  userId?: Prisma.StringFilter<"Blog"> | string
  title?: Prisma.StringFilter<"Blog"> | string
  content?: Prisma.StringFilter<"Blog"> | string
  publishedDate?: Prisma.DateTimeFilter<"Blog"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Blog"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Blog"> | Date | string
  projectId?: Prisma.StringNullableFilter<"Blog"> | string | null
  project?: Prisma.XOR<Prisma.ProjectNullableScalarRelationFilter, Prisma.ProjectWhereInput> | null
  tags?: Prisma.BlogTagListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  translations?: Prisma.TranslationListRelationFilter
}, "id" | "slug">

export type BlogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publishedDate?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  projectId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.BlogCountOrderByAggregateInput
  _max?: Prisma.BlogMaxOrderByAggregateInput
  _min?: Prisma.BlogMinOrderByAggregateInput
}

export type BlogScalarWhereWithAggregatesInput = {
  AND?: Prisma.BlogScalarWhereWithAggregatesInput | Prisma.BlogScalarWhereWithAggregatesInput[]
  OR?: Prisma.BlogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BlogScalarWhereWithAggregatesInput | Prisma.BlogScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Blog"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Blog"> | string
  title?: Prisma.StringWithAggregatesFilter<"Blog"> | string
  content?: Prisma.StringWithAggregatesFilter<"Blog"> | string
  publishedDate?: Prisma.DateTimeWithAggregatesFilter<"Blog"> | Date | string
  slug?: Prisma.StringWithAggregatesFilter<"Blog"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Blog"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Blog"> | Date | string
  projectId?: Prisma.StringNullableWithAggregatesFilter<"Blog"> | string | null
}

export type BlogCreateInput = {
  id?: string
  title: string
  content: string
  publishedDate?: Date | string
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  project?: Prisma.ProjectCreateNestedOneWithoutArticlesInput
  tags?: Prisma.BlogTagCreateNestedManyWithoutBlogInput
  user: Prisma.UserCreateNestedOneWithoutBlogsInput
  translations?: Prisma.TranslationCreateNestedManyWithoutBlogInput
}

export type BlogUncheckedCreateInput = {
  id?: string
  userId: string
  title: string
  content: string
  publishedDate?: Date | string
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  projectId?: string | null
  tags?: Prisma.BlogTagUncheckedCreateNestedManyWithoutBlogInput
  translations?: Prisma.TranslationUncheckedCreateNestedManyWithoutBlogInput
}

export type BlogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publishedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneWithoutArticlesNestedInput
  tags?: Prisma.BlogTagUpdateManyWithoutBlogNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutBlogsNestedInput
  translations?: Prisma.TranslationUpdateManyWithoutBlogNestedInput
}

export type BlogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publishedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  projectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tags?: Prisma.BlogTagUncheckedUpdateManyWithoutBlogNestedInput
  translations?: Prisma.TranslationUncheckedUpdateManyWithoutBlogNestedInput
}

export type BlogCreateManyInput = {
  id?: string
  userId: string
  title: string
  content: string
  publishedDate?: Date | string
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  projectId?: string | null
}

export type BlogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publishedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BlogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publishedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  projectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type BlogListRelationFilter = {
  every?: Prisma.BlogWhereInput
  some?: Prisma.BlogWhereInput
  none?: Prisma.BlogWhereInput
}

export type BlogOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BlogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publishedDate?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
}

export type BlogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publishedDate?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
}

export type BlogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publishedDate?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
}

export type BlogScalarRelationFilter = {
  is?: Prisma.BlogWhereInput
  isNot?: Prisma.BlogWhereInput
}

export type BlogNullableScalarRelationFilter = {
  is?: Prisma.BlogWhereInput | null
  isNot?: Prisma.BlogWhereInput | null
}

export type BlogCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BlogCreateWithoutUserInput, Prisma.BlogUncheckedCreateWithoutUserInput> | Prisma.BlogCreateWithoutUserInput[] | Prisma.BlogUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BlogCreateOrConnectWithoutUserInput | Prisma.BlogCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BlogCreateManyUserInputEnvelope
  connect?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
}

export type BlogUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BlogCreateWithoutUserInput, Prisma.BlogUncheckedCreateWithoutUserInput> | Prisma.BlogCreateWithoutUserInput[] | Prisma.BlogUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BlogCreateOrConnectWithoutUserInput | Prisma.BlogCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BlogCreateManyUserInputEnvelope
  connect?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
}

export type BlogUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BlogCreateWithoutUserInput, Prisma.BlogUncheckedCreateWithoutUserInput> | Prisma.BlogCreateWithoutUserInput[] | Prisma.BlogUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BlogCreateOrConnectWithoutUserInput | Prisma.BlogCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BlogUpsertWithWhereUniqueWithoutUserInput | Prisma.BlogUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BlogCreateManyUserInputEnvelope
  set?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  disconnect?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  delete?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  connect?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  update?: Prisma.BlogUpdateWithWhereUniqueWithoutUserInput | Prisma.BlogUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BlogUpdateManyWithWhereWithoutUserInput | Prisma.BlogUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BlogScalarWhereInput | Prisma.BlogScalarWhereInput[]
}

export type BlogUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BlogCreateWithoutUserInput, Prisma.BlogUncheckedCreateWithoutUserInput> | Prisma.BlogCreateWithoutUserInput[] | Prisma.BlogUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BlogCreateOrConnectWithoutUserInput | Prisma.BlogCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BlogUpsertWithWhereUniqueWithoutUserInput | Prisma.BlogUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BlogCreateManyUserInputEnvelope
  set?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  disconnect?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  delete?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  connect?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  update?: Prisma.BlogUpdateWithWhereUniqueWithoutUserInput | Prisma.BlogUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BlogUpdateManyWithWhereWithoutUserInput | Prisma.BlogUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BlogScalarWhereInput | Prisma.BlogScalarWhereInput[]
}

export type BlogCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.BlogCreateWithoutProjectInput, Prisma.BlogUncheckedCreateWithoutProjectInput> | Prisma.BlogCreateWithoutProjectInput[] | Prisma.BlogUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.BlogCreateOrConnectWithoutProjectInput | Prisma.BlogCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.BlogCreateManyProjectInputEnvelope
  connect?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
}

export type BlogUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.BlogCreateWithoutProjectInput, Prisma.BlogUncheckedCreateWithoutProjectInput> | Prisma.BlogCreateWithoutProjectInput[] | Prisma.BlogUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.BlogCreateOrConnectWithoutProjectInput | Prisma.BlogCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.BlogCreateManyProjectInputEnvelope
  connect?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
}

export type BlogUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.BlogCreateWithoutProjectInput, Prisma.BlogUncheckedCreateWithoutProjectInput> | Prisma.BlogCreateWithoutProjectInput[] | Prisma.BlogUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.BlogCreateOrConnectWithoutProjectInput | Prisma.BlogCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.BlogUpsertWithWhereUniqueWithoutProjectInput | Prisma.BlogUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.BlogCreateManyProjectInputEnvelope
  set?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  disconnect?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  delete?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  connect?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  update?: Prisma.BlogUpdateWithWhereUniqueWithoutProjectInput | Prisma.BlogUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.BlogUpdateManyWithWhereWithoutProjectInput | Prisma.BlogUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.BlogScalarWhereInput | Prisma.BlogScalarWhereInput[]
}

export type BlogUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.BlogCreateWithoutProjectInput, Prisma.BlogUncheckedCreateWithoutProjectInput> | Prisma.BlogCreateWithoutProjectInput[] | Prisma.BlogUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.BlogCreateOrConnectWithoutProjectInput | Prisma.BlogCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.BlogUpsertWithWhereUniqueWithoutProjectInput | Prisma.BlogUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.BlogCreateManyProjectInputEnvelope
  set?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  disconnect?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  delete?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  connect?: Prisma.BlogWhereUniqueInput | Prisma.BlogWhereUniqueInput[]
  update?: Prisma.BlogUpdateWithWhereUniqueWithoutProjectInput | Prisma.BlogUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.BlogUpdateManyWithWhereWithoutProjectInput | Prisma.BlogUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.BlogScalarWhereInput | Prisma.BlogScalarWhereInput[]
}

export type BlogCreateNestedOneWithoutTagsInput = {
  create?: Prisma.XOR<Prisma.BlogCreateWithoutTagsInput, Prisma.BlogUncheckedCreateWithoutTagsInput>
  connectOrCreate?: Prisma.BlogCreateOrConnectWithoutTagsInput
  connect?: Prisma.BlogWhereUniqueInput
}

export type BlogUpdateOneRequiredWithoutTagsNestedInput = {
  create?: Prisma.XOR<Prisma.BlogCreateWithoutTagsInput, Prisma.BlogUncheckedCreateWithoutTagsInput>
  connectOrCreate?: Prisma.BlogCreateOrConnectWithoutTagsInput
  upsert?: Prisma.BlogUpsertWithoutTagsInput
  connect?: Prisma.BlogWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BlogUpdateToOneWithWhereWithoutTagsInput, Prisma.BlogUpdateWithoutTagsInput>, Prisma.BlogUncheckedUpdateWithoutTagsInput>
}

export type BlogCreateNestedOneWithoutTranslationsInput = {
  create?: Prisma.XOR<Prisma.BlogCreateWithoutTranslationsInput, Prisma.BlogUncheckedCreateWithoutTranslationsInput>
  connectOrCreate?: Prisma.BlogCreateOrConnectWithoutTranslationsInput
  connect?: Prisma.BlogWhereUniqueInput
}

export type BlogUpdateOneWithoutTranslationsNestedInput = {
  create?: Prisma.XOR<Prisma.BlogCreateWithoutTranslationsInput, Prisma.BlogUncheckedCreateWithoutTranslationsInput>
  connectOrCreate?: Prisma.BlogCreateOrConnectWithoutTranslationsInput
  upsert?: Prisma.BlogUpsertWithoutTranslationsInput
  disconnect?: Prisma.BlogWhereInput | boolean
  delete?: Prisma.BlogWhereInput | boolean
  connect?: Prisma.BlogWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BlogUpdateToOneWithWhereWithoutTranslationsInput, Prisma.BlogUpdateWithoutTranslationsInput>, Prisma.BlogUncheckedUpdateWithoutTranslationsInput>
}

export type BlogCreateWithoutUserInput = {
  id?: string
  title: string
  content: string
  publishedDate?: Date | string
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  project?: Prisma.ProjectCreateNestedOneWithoutArticlesInput
  tags?: Prisma.BlogTagCreateNestedManyWithoutBlogInput
  translations?: Prisma.TranslationCreateNestedManyWithoutBlogInput
}

export type BlogUncheckedCreateWithoutUserInput = {
  id?: string
  title: string
  content: string
  publishedDate?: Date | string
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  projectId?: string | null
  tags?: Prisma.BlogTagUncheckedCreateNestedManyWithoutBlogInput
  translations?: Prisma.TranslationUncheckedCreateNestedManyWithoutBlogInput
}

export type BlogCreateOrConnectWithoutUserInput = {
  where: Prisma.BlogWhereUniqueInput
  create: Prisma.XOR<Prisma.BlogCreateWithoutUserInput, Prisma.BlogUncheckedCreateWithoutUserInput>
}

export type BlogCreateManyUserInputEnvelope = {
  data: Prisma.BlogCreateManyUserInput | Prisma.BlogCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type BlogUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.BlogWhereUniqueInput
  update: Prisma.XOR<Prisma.BlogUpdateWithoutUserInput, Prisma.BlogUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.BlogCreateWithoutUserInput, Prisma.BlogUncheckedCreateWithoutUserInput>
}

export type BlogUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.BlogWhereUniqueInput
  data: Prisma.XOR<Prisma.BlogUpdateWithoutUserInput, Prisma.BlogUncheckedUpdateWithoutUserInput>
}

export type BlogUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.BlogScalarWhereInput
  data: Prisma.XOR<Prisma.BlogUpdateManyMutationInput, Prisma.BlogUncheckedUpdateManyWithoutUserInput>
}

export type BlogScalarWhereInput = {
  AND?: Prisma.BlogScalarWhereInput | Prisma.BlogScalarWhereInput[]
  OR?: Prisma.BlogScalarWhereInput[]
  NOT?: Prisma.BlogScalarWhereInput | Prisma.BlogScalarWhereInput[]
  id?: Prisma.StringFilter<"Blog"> | string
  userId?: Prisma.StringFilter<"Blog"> | string
  title?: Prisma.StringFilter<"Blog"> | string
  content?: Prisma.StringFilter<"Blog"> | string
  publishedDate?: Prisma.DateTimeFilter<"Blog"> | Date | string
  slug?: Prisma.StringFilter<"Blog"> | string
  createdAt?: Prisma.DateTimeFilter<"Blog"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Blog"> | Date | string
  projectId?: Prisma.StringNullableFilter<"Blog"> | string | null
}

export type BlogCreateWithoutProjectInput = {
  id?: string
  title: string
  content: string
  publishedDate?: Date | string
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  tags?: Prisma.BlogTagCreateNestedManyWithoutBlogInput
  user: Prisma.UserCreateNestedOneWithoutBlogsInput
  translations?: Prisma.TranslationCreateNestedManyWithoutBlogInput
}

export type BlogUncheckedCreateWithoutProjectInput = {
  id?: string
  userId: string
  title: string
  content: string
  publishedDate?: Date | string
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  tags?: Prisma.BlogTagUncheckedCreateNestedManyWithoutBlogInput
  translations?: Prisma.TranslationUncheckedCreateNestedManyWithoutBlogInput
}

export type BlogCreateOrConnectWithoutProjectInput = {
  where: Prisma.BlogWhereUniqueInput
  create: Prisma.XOR<Prisma.BlogCreateWithoutProjectInput, Prisma.BlogUncheckedCreateWithoutProjectInput>
}

export type BlogCreateManyProjectInputEnvelope = {
  data: Prisma.BlogCreateManyProjectInput | Prisma.BlogCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type BlogUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.BlogWhereUniqueInput
  update: Prisma.XOR<Prisma.BlogUpdateWithoutProjectInput, Prisma.BlogUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.BlogCreateWithoutProjectInput, Prisma.BlogUncheckedCreateWithoutProjectInput>
}

export type BlogUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.BlogWhereUniqueInput
  data: Prisma.XOR<Prisma.BlogUpdateWithoutProjectInput, Prisma.BlogUncheckedUpdateWithoutProjectInput>
}

export type BlogUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.BlogScalarWhereInput
  data: Prisma.XOR<Prisma.BlogUpdateManyMutationInput, Prisma.BlogUncheckedUpdateManyWithoutProjectInput>
}

export type BlogCreateWithoutTagsInput = {
  id?: string
  title: string
  content: string
  publishedDate?: Date | string
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  project?: Prisma.ProjectCreateNestedOneWithoutArticlesInput
  user: Prisma.UserCreateNestedOneWithoutBlogsInput
  translations?: Prisma.TranslationCreateNestedManyWithoutBlogInput
}

export type BlogUncheckedCreateWithoutTagsInput = {
  id?: string
  userId: string
  title: string
  content: string
  publishedDate?: Date | string
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  projectId?: string | null
  translations?: Prisma.TranslationUncheckedCreateNestedManyWithoutBlogInput
}

export type BlogCreateOrConnectWithoutTagsInput = {
  where: Prisma.BlogWhereUniqueInput
  create: Prisma.XOR<Prisma.BlogCreateWithoutTagsInput, Prisma.BlogUncheckedCreateWithoutTagsInput>
}

export type BlogUpsertWithoutTagsInput = {
  update: Prisma.XOR<Prisma.BlogUpdateWithoutTagsInput, Prisma.BlogUncheckedUpdateWithoutTagsInput>
  create: Prisma.XOR<Prisma.BlogCreateWithoutTagsInput, Prisma.BlogUncheckedCreateWithoutTagsInput>
  where?: Prisma.BlogWhereInput
}

export type BlogUpdateToOneWithWhereWithoutTagsInput = {
  where?: Prisma.BlogWhereInput
  data: Prisma.XOR<Prisma.BlogUpdateWithoutTagsInput, Prisma.BlogUncheckedUpdateWithoutTagsInput>
}

export type BlogUpdateWithoutTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publishedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneWithoutArticlesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutBlogsNestedInput
  translations?: Prisma.TranslationUpdateManyWithoutBlogNestedInput
}

export type BlogUncheckedUpdateWithoutTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publishedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  projectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  translations?: Prisma.TranslationUncheckedUpdateManyWithoutBlogNestedInput
}

export type BlogCreateWithoutTranslationsInput = {
  id?: string
  title: string
  content: string
  publishedDate?: Date | string
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  project?: Prisma.ProjectCreateNestedOneWithoutArticlesInput
  tags?: Prisma.BlogTagCreateNestedManyWithoutBlogInput
  user: Prisma.UserCreateNestedOneWithoutBlogsInput
}

export type BlogUncheckedCreateWithoutTranslationsInput = {
  id?: string
  userId: string
  title: string
  content: string
  publishedDate?: Date | string
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  projectId?: string | null
  tags?: Prisma.BlogTagUncheckedCreateNestedManyWithoutBlogInput
}

export type BlogCreateOrConnectWithoutTranslationsInput = {
  where: Prisma.BlogWhereUniqueInput
  create: Prisma.XOR<Prisma.BlogCreateWithoutTranslationsInput, Prisma.BlogUncheckedCreateWithoutTranslationsInput>
}

export type BlogUpsertWithoutTranslationsInput = {
  update: Prisma.XOR<Prisma.BlogUpdateWithoutTranslationsInput, Prisma.BlogUncheckedUpdateWithoutTranslationsInput>
  create: Prisma.XOR<Prisma.BlogCreateWithoutTranslationsInput, Prisma.BlogUncheckedCreateWithoutTranslationsInput>
  where?: Prisma.BlogWhereInput
}

export type BlogUpdateToOneWithWhereWithoutTranslationsInput = {
  where?: Prisma.BlogWhereInput
  data: Prisma.XOR<Prisma.BlogUpdateWithoutTranslationsInput, Prisma.BlogUncheckedUpdateWithoutTranslationsInput>
}

export type BlogUpdateWithoutTranslationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publishedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneWithoutArticlesNestedInput
  tags?: Prisma.BlogTagUpdateManyWithoutBlogNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutBlogsNestedInput
}

export type BlogUncheckedUpdateWithoutTranslationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publishedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  projectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tags?: Prisma.BlogTagUncheckedUpdateManyWithoutBlogNestedInput
}

export type BlogCreateManyUserInput = {
  id?: string
  title: string
  content: string
  publishedDate?: Date | string
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  projectId?: string | null
}

export type BlogUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publishedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneWithoutArticlesNestedInput
  tags?: Prisma.BlogTagUpdateManyWithoutBlogNestedInput
  translations?: Prisma.TranslationUpdateManyWithoutBlogNestedInput
}

export type BlogUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publishedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  projectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tags?: Prisma.BlogTagUncheckedUpdateManyWithoutBlogNestedInput
  translations?: Prisma.TranslationUncheckedUpdateManyWithoutBlogNestedInput
}

export type BlogUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publishedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  projectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type BlogCreateManyProjectInput = {
  id?: string
  userId: string
  title: string
  content: string
  publishedDate?: Date | string
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BlogUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publishedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tags?: Prisma.BlogTagUpdateManyWithoutBlogNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutBlogsNestedInput
  translations?: Prisma.TranslationUpdateManyWithoutBlogNestedInput
}

export type BlogUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publishedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tags?: Prisma.BlogTagUncheckedUpdateManyWithoutBlogNestedInput
  translations?: Prisma.TranslationUncheckedUpdateManyWithoutBlogNestedInput
}

export type BlogUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publishedDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type BlogCountOutputType
 */

export type BlogCountOutputType = {
  tags: number
  translations: number
}

export type BlogCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tags?: boolean | BlogCountOutputTypeCountTagsArgs
  translations?: boolean | BlogCountOutputTypeCountTranslationsArgs
}

/**
 * BlogCountOutputType without action
 */
export type BlogCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BlogCountOutputType
   */
  select?: Prisma.BlogCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BlogCountOutputType without action
 */
export type BlogCountOutputTypeCountTagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BlogTagWhereInput
}

/**
 * BlogCountOutputType without action
 */
export type BlogCountOutputTypeCountTranslationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TranslationWhereInput
}


export type BlogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  title?: boolean
  content?: boolean
  publishedDate?: boolean
  slug?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  projectId?: boolean
  project?: boolean | Prisma.Blog$projectArgs<ExtArgs>
  tags?: boolean | Prisma.Blog$tagsArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  translations?: boolean | Prisma.Blog$translationsArgs<ExtArgs>
  _count?: boolean | Prisma.BlogCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["blog"]>

export type BlogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  title?: boolean
  content?: boolean
  publishedDate?: boolean
  slug?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  projectId?: boolean
  project?: boolean | Prisma.Blog$projectArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["blog"]>

export type BlogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  title?: boolean
  content?: boolean
  publishedDate?: boolean
  slug?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  projectId?: boolean
  project?: boolean | Prisma.Blog$projectArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["blog"]>

export type BlogSelectScalar = {
  id?: boolean
  userId?: boolean
  title?: boolean
  content?: boolean
  publishedDate?: boolean
  slug?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  projectId?: boolean
}

export type BlogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "title" | "content" | "publishedDate" | "slug" | "createdAt" | "updatedAt" | "projectId", ExtArgs["result"]["blog"]>
export type BlogInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.Blog$projectArgs<ExtArgs>
  tags?: boolean | Prisma.Blog$tagsArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  translations?: boolean | Prisma.Blog$translationsArgs<ExtArgs>
  _count?: boolean | Prisma.BlogCountOutputTypeDefaultArgs<ExtArgs>
}
export type BlogIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.Blog$projectArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type BlogIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.Blog$projectArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $BlogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Blog"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs> | null
    tags: Prisma.$BlogTagPayload<ExtArgs>[]
    user: Prisma.$UserPayload<ExtArgs>
    translations: Prisma.$TranslationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    title: string
    content: string
    publishedDate: Date
    slug: string
    createdAt: Date
    updatedAt: Date
    projectId: string | null
  }, ExtArgs["result"]["blog"]>
  composites: {}
}

export type BlogGetPayload<S extends boolean | null | undefined | BlogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BlogPayload, S>

export type BlogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BlogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BlogCountAggregateInputType | true
  }

export interface BlogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Blog'], meta: { name: 'Blog' } }
  /**
   * Find zero or one Blog that matches the filter.
   * @param {BlogFindUniqueArgs} args - Arguments to find a Blog
   * @example
   * // Get one Blog
   * const blog = await prisma.blog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BlogFindUniqueArgs>(args: Prisma.SelectSubset<T, BlogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BlogClient<runtime.Types.Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Blog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BlogFindUniqueOrThrowArgs} args - Arguments to find a Blog
   * @example
   * // Get one Blog
   * const blog = await prisma.blog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BlogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BlogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BlogClient<runtime.Types.Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Blog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlogFindFirstArgs} args - Arguments to find a Blog
   * @example
   * // Get one Blog
   * const blog = await prisma.blog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BlogFindFirstArgs>(args?: Prisma.SelectSubset<T, BlogFindFirstArgs<ExtArgs>>): Prisma.Prisma__BlogClient<runtime.Types.Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Blog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlogFindFirstOrThrowArgs} args - Arguments to find a Blog
   * @example
   * // Get one Blog
   * const blog = await prisma.blog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BlogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BlogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BlogClient<runtime.Types.Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Blogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Blogs
   * const blogs = await prisma.blog.findMany()
   * 
   * // Get first 10 Blogs
   * const blogs = await prisma.blog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const blogWithIdOnly = await prisma.blog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BlogFindManyArgs>(args?: Prisma.SelectSubset<T, BlogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Blog.
   * @param {BlogCreateArgs} args - Arguments to create a Blog.
   * @example
   * // Create one Blog
   * const Blog = await prisma.blog.create({
   *   data: {
   *     // ... data to create a Blog
   *   }
   * })
   * 
   */
  create<T extends BlogCreateArgs>(args: Prisma.SelectSubset<T, BlogCreateArgs<ExtArgs>>): Prisma.Prisma__BlogClient<runtime.Types.Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Blogs.
   * @param {BlogCreateManyArgs} args - Arguments to create many Blogs.
   * @example
   * // Create many Blogs
   * const blog = await prisma.blog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BlogCreateManyArgs>(args?: Prisma.SelectSubset<T, BlogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Blogs and returns the data saved in the database.
   * @param {BlogCreateManyAndReturnArgs} args - Arguments to create many Blogs.
   * @example
   * // Create many Blogs
   * const blog = await prisma.blog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Blogs and only return the `id`
   * const blogWithIdOnly = await prisma.blog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BlogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BlogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Blog.
   * @param {BlogDeleteArgs} args - Arguments to delete one Blog.
   * @example
   * // Delete one Blog
   * const Blog = await prisma.blog.delete({
   *   where: {
   *     // ... filter to delete one Blog
   *   }
   * })
   * 
   */
  delete<T extends BlogDeleteArgs>(args: Prisma.SelectSubset<T, BlogDeleteArgs<ExtArgs>>): Prisma.Prisma__BlogClient<runtime.Types.Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Blog.
   * @param {BlogUpdateArgs} args - Arguments to update one Blog.
   * @example
   * // Update one Blog
   * const blog = await prisma.blog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BlogUpdateArgs>(args: Prisma.SelectSubset<T, BlogUpdateArgs<ExtArgs>>): Prisma.Prisma__BlogClient<runtime.Types.Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Blogs.
   * @param {BlogDeleteManyArgs} args - Arguments to filter Blogs to delete.
   * @example
   * // Delete a few Blogs
   * const { count } = await prisma.blog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BlogDeleteManyArgs>(args?: Prisma.SelectSubset<T, BlogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Blogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Blogs
   * const blog = await prisma.blog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BlogUpdateManyArgs>(args: Prisma.SelectSubset<T, BlogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Blogs and returns the data updated in the database.
   * @param {BlogUpdateManyAndReturnArgs} args - Arguments to update many Blogs.
   * @example
   * // Update many Blogs
   * const blog = await prisma.blog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Blogs and only return the `id`
   * const blogWithIdOnly = await prisma.blog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BlogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BlogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Blog.
   * @param {BlogUpsertArgs} args - Arguments to update or create a Blog.
   * @example
   * // Update or create a Blog
   * const blog = await prisma.blog.upsert({
   *   create: {
   *     // ... data to create a Blog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Blog we want to update
   *   }
   * })
   */
  upsert<T extends BlogUpsertArgs>(args: Prisma.SelectSubset<T, BlogUpsertArgs<ExtArgs>>): Prisma.Prisma__BlogClient<runtime.Types.Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Blogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlogCountArgs} args - Arguments to filter Blogs to count.
   * @example
   * // Count the number of Blogs
   * const count = await prisma.blog.count({
   *   where: {
   *     // ... the filter for the Blogs we want to count
   *   }
   * })
  **/
  count<T extends BlogCountArgs>(
    args?: Prisma.Subset<T, BlogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BlogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Blog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BlogAggregateArgs>(args: Prisma.Subset<T, BlogAggregateArgs>): Prisma.PrismaPromise<GetBlogAggregateType<T>>

  /**
   * Group by Blog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BlogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BlogGroupByArgs['orderBy'] }
      : { orderBy?: BlogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BlogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Blog model
 */
readonly fields: BlogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Blog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BlogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.Blog$projectArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Blog$projectArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  tags<T extends Prisma.Blog$tagsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Blog$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BlogTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  translations<T extends Prisma.Blog$translationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Blog$translationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Blog model
 */
export interface BlogFieldRefs {
  readonly id: Prisma.FieldRef<"Blog", 'String'>
  readonly userId: Prisma.FieldRef<"Blog", 'String'>
  readonly title: Prisma.FieldRef<"Blog", 'String'>
  readonly content: Prisma.FieldRef<"Blog", 'String'>
  readonly publishedDate: Prisma.FieldRef<"Blog", 'DateTime'>
  readonly slug: Prisma.FieldRef<"Blog", 'String'>
  readonly createdAt: Prisma.FieldRef<"Blog", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Blog", 'DateTime'>
  readonly projectId: Prisma.FieldRef<"Blog", 'String'>
}
    

// Custom InputTypes
/**
 * Blog findUnique
 */
export type BlogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Blog
   */
  select?: Prisma.BlogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Blog
   */
  omit?: Prisma.BlogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogInclude<ExtArgs> | null
  /**
   * Filter, which Blog to fetch.
   */
  where: Prisma.BlogWhereUniqueInput
}

/**
 * Blog findUniqueOrThrow
 */
export type BlogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Blog
   */
  select?: Prisma.BlogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Blog
   */
  omit?: Prisma.BlogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogInclude<ExtArgs> | null
  /**
   * Filter, which Blog to fetch.
   */
  where: Prisma.BlogWhereUniqueInput
}

/**
 * Blog findFirst
 */
export type BlogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Blog
   */
  select?: Prisma.BlogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Blog
   */
  omit?: Prisma.BlogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogInclude<ExtArgs> | null
  /**
   * Filter, which Blog to fetch.
   */
  where?: Prisma.BlogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Blogs to fetch.
   */
  orderBy?: Prisma.BlogOrderByWithRelationInput | Prisma.BlogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Blogs.
   */
  cursor?: Prisma.BlogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Blogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Blogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Blogs.
   */
  distinct?: Prisma.BlogScalarFieldEnum | Prisma.BlogScalarFieldEnum[]
}

/**
 * Blog findFirstOrThrow
 */
export type BlogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Blog
   */
  select?: Prisma.BlogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Blog
   */
  omit?: Prisma.BlogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogInclude<ExtArgs> | null
  /**
   * Filter, which Blog to fetch.
   */
  where?: Prisma.BlogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Blogs to fetch.
   */
  orderBy?: Prisma.BlogOrderByWithRelationInput | Prisma.BlogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Blogs.
   */
  cursor?: Prisma.BlogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Blogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Blogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Blogs.
   */
  distinct?: Prisma.BlogScalarFieldEnum | Prisma.BlogScalarFieldEnum[]
}

/**
 * Blog findMany
 */
export type BlogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Blog
   */
  select?: Prisma.BlogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Blog
   */
  omit?: Prisma.BlogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogInclude<ExtArgs> | null
  /**
   * Filter, which Blogs to fetch.
   */
  where?: Prisma.BlogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Blogs to fetch.
   */
  orderBy?: Prisma.BlogOrderByWithRelationInput | Prisma.BlogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Blogs.
   */
  cursor?: Prisma.BlogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Blogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Blogs.
   */
  skip?: number
  distinct?: Prisma.BlogScalarFieldEnum | Prisma.BlogScalarFieldEnum[]
}

/**
 * Blog create
 */
export type BlogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Blog
   */
  select?: Prisma.BlogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Blog
   */
  omit?: Prisma.BlogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogInclude<ExtArgs> | null
  /**
   * The data needed to create a Blog.
   */
  data: Prisma.XOR<Prisma.BlogCreateInput, Prisma.BlogUncheckedCreateInput>
}

/**
 * Blog createMany
 */
export type BlogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Blogs.
   */
  data: Prisma.BlogCreateManyInput | Prisma.BlogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Blog createManyAndReturn
 */
export type BlogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Blog
   */
  select?: Prisma.BlogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Blog
   */
  omit?: Prisma.BlogOmit<ExtArgs> | null
  /**
   * The data used to create many Blogs.
   */
  data: Prisma.BlogCreateManyInput | Prisma.BlogCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Blog update
 */
export type BlogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Blog
   */
  select?: Prisma.BlogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Blog
   */
  omit?: Prisma.BlogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogInclude<ExtArgs> | null
  /**
   * The data needed to update a Blog.
   */
  data: Prisma.XOR<Prisma.BlogUpdateInput, Prisma.BlogUncheckedUpdateInput>
  /**
   * Choose, which Blog to update.
   */
  where: Prisma.BlogWhereUniqueInput
}

/**
 * Blog updateMany
 */
export type BlogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Blogs.
   */
  data: Prisma.XOR<Prisma.BlogUpdateManyMutationInput, Prisma.BlogUncheckedUpdateManyInput>
  /**
   * Filter which Blogs to update
   */
  where?: Prisma.BlogWhereInput
  /**
   * Limit how many Blogs to update.
   */
  limit?: number
}

/**
 * Blog updateManyAndReturn
 */
export type BlogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Blog
   */
  select?: Prisma.BlogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Blog
   */
  omit?: Prisma.BlogOmit<ExtArgs> | null
  /**
   * The data used to update Blogs.
   */
  data: Prisma.XOR<Prisma.BlogUpdateManyMutationInput, Prisma.BlogUncheckedUpdateManyInput>
  /**
   * Filter which Blogs to update
   */
  where?: Prisma.BlogWhereInput
  /**
   * Limit how many Blogs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Blog upsert
 */
export type BlogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Blog
   */
  select?: Prisma.BlogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Blog
   */
  omit?: Prisma.BlogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogInclude<ExtArgs> | null
  /**
   * The filter to search for the Blog to update in case it exists.
   */
  where: Prisma.BlogWhereUniqueInput
  /**
   * In case the Blog found by the `where` argument doesn't exist, create a new Blog with this data.
   */
  create: Prisma.XOR<Prisma.BlogCreateInput, Prisma.BlogUncheckedCreateInput>
  /**
   * In case the Blog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BlogUpdateInput, Prisma.BlogUncheckedUpdateInput>
}

/**
 * Blog delete
 */
export type BlogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Blog
   */
  select?: Prisma.BlogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Blog
   */
  omit?: Prisma.BlogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogInclude<ExtArgs> | null
  /**
   * Filter which Blog to delete.
   */
  where: Prisma.BlogWhereUniqueInput
}

/**
 * Blog deleteMany
 */
export type BlogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Blogs to delete
   */
  where?: Prisma.BlogWhereInput
  /**
   * Limit how many Blogs to delete.
   */
  limit?: number
}

/**
 * Blog.project
 */
export type Blog$projectArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  where?: Prisma.ProjectWhereInput
}

/**
 * Blog.tags
 */
export type Blog$tagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BlogTag
   */
  select?: Prisma.BlogTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BlogTag
   */
  omit?: Prisma.BlogTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogTagInclude<ExtArgs> | null
  where?: Prisma.BlogTagWhereInput
  orderBy?: Prisma.BlogTagOrderByWithRelationInput | Prisma.BlogTagOrderByWithRelationInput[]
  cursor?: Prisma.BlogTagWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BlogTagScalarFieldEnum | Prisma.BlogTagScalarFieldEnum[]
}

/**
 * Blog.translations
 */
export type Blog$translationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Translation
   */
  select?: Prisma.TranslationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Translation
   */
  omit?: Prisma.TranslationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TranslationInclude<ExtArgs> | null
  where?: Prisma.TranslationWhereInput
  orderBy?: Prisma.TranslationOrderByWithRelationInput | Prisma.TranslationOrderByWithRelationInput[]
  cursor?: Prisma.TranslationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TranslationScalarFieldEnum | Prisma.TranslationScalarFieldEnum[]
}

/**
 * Blog without action
 */
export type BlogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Blog
   */
  select?: Prisma.BlogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Blog
   */
  omit?: Prisma.BlogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogInclude<ExtArgs> | null
}
