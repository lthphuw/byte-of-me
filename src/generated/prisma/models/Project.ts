
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Project` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Project
 * 
 */
export type ProjectModel = runtime.Types.Result.DefaultSelection<Prisma.$ProjectPayload>

export type AggregateProject = {
  _count: ProjectCountAggregateOutputType | null
  _min: ProjectMinAggregateOutputType | null
  _max: ProjectMaxAggregateOutputType | null
}

export type ProjectMinAggregateOutputType = {
  id: string | null
  userId: string | null
  title: string | null
  description: string | null
  githubLink: string | null
  liveLink: string | null
  startDate: Date | null
  endDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProjectMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  title: string | null
  description: string | null
  githubLink: string | null
  liveLink: string | null
  startDate: Date | null
  endDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProjectCountAggregateOutputType = {
  id: number
  userId: number
  title: number
  description: number
  githubLink: number
  liveLink: number
  startDate: number
  endDate: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProjectMinAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  description?: true
  githubLink?: true
  liveLink?: true
  startDate?: true
  endDate?: true
  createdAt?: true
  updatedAt?: true
}

export type ProjectMaxAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  description?: true
  githubLink?: true
  liveLink?: true
  startDate?: true
  endDate?: true
  createdAt?: true
  updatedAt?: true
}

export type ProjectCountAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  description?: true
  githubLink?: true
  liveLink?: true
  startDate?: true
  endDate?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProjectAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Project to aggregate.
   */
  where?: Prisma.ProjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Projects to fetch.
   */
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Projects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Projects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Projects
  **/
  _count?: true | ProjectCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProjectMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProjectMaxAggregateInputType
}

export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
      [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProject[P]>
    : Prisma.GetScalarType<T[P], AggregateProject[P]>
}




export type ProjectGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectWhereInput
  orderBy?: Prisma.ProjectOrderByWithAggregationInput | Prisma.ProjectOrderByWithAggregationInput[]
  by: Prisma.ProjectScalarFieldEnum[] | Prisma.ProjectScalarFieldEnum
  having?: Prisma.ProjectScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProjectCountAggregateInputType | true
  _min?: ProjectMinAggregateInputType
  _max?: ProjectMaxAggregateInputType
}

export type ProjectGroupByOutputType = {
  id: string
  userId: string
  title: string
  description: string | null
  githubLink: string | null
  liveLink: string | null
  startDate: Date | null
  endDate: Date | null
  createdAt: Date
  updatedAt: Date
  _count: ProjectCountAggregateOutputType | null
  _min: ProjectMinAggregateOutputType | null
  _max: ProjectMaxAggregateOutputType | null
}

type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProjectGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProjectGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProjectGroupByOutputType[P]>
      }
    >
  > 



export type ProjectWhereInput = {
  AND?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[]
  OR?: Prisma.ProjectWhereInput[]
  NOT?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[]
  id?: Prisma.StringFilter<"Project"> | string
  userId?: Prisma.StringFilter<"Project"> | string
  title?: Prisma.StringFilter<"Project"> | string
  description?: Prisma.StringNullableFilter<"Project"> | string | null
  githubLink?: Prisma.StringNullableFilter<"Project"> | string | null
  liveLink?: Prisma.StringNullableFilter<"Project"> | string | null
  startDate?: Prisma.DateTimeNullableFilter<"Project"> | Date | string | null
  endDate?: Prisma.DateTimeNullableFilter<"Project"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  images?: Prisma.ProjectImageListRelationFilter
  techStacks?: Prisma.ProjectTechStackListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  translations?: Prisma.TranslationListRelationFilter
}

export type ProjectOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  githubLink?: Prisma.SortOrderInput | Prisma.SortOrder
  liveLink?: Prisma.SortOrderInput | Prisma.SortOrder
  startDate?: Prisma.SortOrderInput | Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  images?: Prisma.ProjectImageOrderByRelationAggregateInput
  techStacks?: Prisma.ProjectTechStackOrderByRelationAggregateInput
  user?: Prisma.UserOrderByWithRelationInput
  translations?: Prisma.TranslationOrderByRelationAggregateInput
  _relevance?: Prisma.ProjectOrderByRelevanceInput
}

export type ProjectWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[]
  OR?: Prisma.ProjectWhereInput[]
  NOT?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[]
  userId?: Prisma.StringFilter<"Project"> | string
  title?: Prisma.StringFilter<"Project"> | string
  description?: Prisma.StringNullableFilter<"Project"> | string | null
  githubLink?: Prisma.StringNullableFilter<"Project"> | string | null
  liveLink?: Prisma.StringNullableFilter<"Project"> | string | null
  startDate?: Prisma.DateTimeNullableFilter<"Project"> | Date | string | null
  endDate?: Prisma.DateTimeNullableFilter<"Project"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  images?: Prisma.ProjectImageListRelationFilter
  techStacks?: Prisma.ProjectTechStackListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  translations?: Prisma.TranslationListRelationFilter
}, "id">

export type ProjectOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  githubLink?: Prisma.SortOrderInput | Prisma.SortOrder
  liveLink?: Prisma.SortOrderInput | Prisma.SortOrder
  startDate?: Prisma.SortOrderInput | Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProjectCountOrderByAggregateInput
  _max?: Prisma.ProjectMaxOrderByAggregateInput
  _min?: Prisma.ProjectMinOrderByAggregateInput
}

export type ProjectScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProjectScalarWhereWithAggregatesInput | Prisma.ProjectScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProjectScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProjectScalarWhereWithAggregatesInput | Prisma.ProjectScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Project"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Project"> | string
  title?: Prisma.StringWithAggregatesFilter<"Project"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Project"> | string | null
  githubLink?: Prisma.StringNullableWithAggregatesFilter<"Project"> | string | null
  liveLink?: Prisma.StringNullableWithAggregatesFilter<"Project"> | string | null
  startDate?: Prisma.DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
  endDate?: Prisma.DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Project"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Project"> | Date | string
}

export type ProjectCreateInput = {
  id?: string
  title: string
  description?: string | null
  githubLink?: string | null
  liveLink?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  images?: Prisma.ProjectImageCreateNestedManyWithoutProjectInput
  techStacks?: Prisma.ProjectTechStackCreateNestedManyWithoutProjectInput
  user: Prisma.UserCreateNestedOneWithoutProjectsInput
  translations?: Prisma.TranslationCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateInput = {
  id?: string
  userId: string
  title: string
  description?: string | null
  githubLink?: string | null
  liveLink?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  images?: Prisma.ProjectImageUncheckedCreateNestedManyWithoutProjectInput
  techStacks?: Prisma.ProjectTechStackUncheckedCreateNestedManyWithoutProjectInput
  translations?: Prisma.TranslationUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  githubLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  liveLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  images?: Prisma.ProjectImageUpdateManyWithoutProjectNestedInput
  techStacks?: Prisma.ProjectTechStackUpdateManyWithoutProjectNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutProjectsNestedInput
  translations?: Prisma.TranslationUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  githubLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  liveLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  images?: Prisma.ProjectImageUncheckedUpdateManyWithoutProjectNestedInput
  techStacks?: Prisma.ProjectTechStackUncheckedUpdateManyWithoutProjectNestedInput
  translations?: Prisma.TranslationUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateManyInput = {
  id?: string
  userId: string
  title: string
  description?: string | null
  githubLink?: string | null
  liveLink?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  githubLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  liveLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  githubLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  liveLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectListRelationFilter = {
  every?: Prisma.ProjectWhereInput
  some?: Prisma.ProjectWhereInput
  none?: Prisma.ProjectWhereInput
}

export type ProjectOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProjectOrderByRelevanceInput = {
  fields: Prisma.ProjectOrderByRelevanceFieldEnum | Prisma.ProjectOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ProjectCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  githubLink?: Prisma.SortOrder
  liveLink?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  githubLink?: Prisma.SortOrder
  liveLink?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  githubLink?: Prisma.SortOrder
  liveLink?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectScalarRelationFilter = {
  is?: Prisma.ProjectWhereInput
  isNot?: Prisma.ProjectWhereInput
}

export type ProjectNullableScalarRelationFilter = {
  is?: Prisma.ProjectWhereInput | null
  isNot?: Prisma.ProjectWhereInput | null
}

export type ProjectCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutUserInput, Prisma.ProjectUncheckedCreateWithoutUserInput> | Prisma.ProjectCreateWithoutUserInput[] | Prisma.ProjectUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutUserInput | Prisma.ProjectCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProjectCreateManyUserInputEnvelope
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
}

export type ProjectUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutUserInput, Prisma.ProjectUncheckedCreateWithoutUserInput> | Prisma.ProjectCreateWithoutUserInput[] | Prisma.ProjectUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutUserInput | Prisma.ProjectCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProjectCreateManyUserInputEnvelope
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
}

export type ProjectUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutUserInput, Prisma.ProjectUncheckedCreateWithoutUserInput> | Prisma.ProjectCreateWithoutUserInput[] | Prisma.ProjectUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutUserInput | Prisma.ProjectCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProjectUpsertWithWhereUniqueWithoutUserInput | Prisma.ProjectUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProjectCreateManyUserInputEnvelope
  set?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  disconnect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  delete?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  update?: Prisma.ProjectUpdateWithWhereUniqueWithoutUserInput | Prisma.ProjectUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProjectUpdateManyWithWhereWithoutUserInput | Prisma.ProjectUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
}

export type ProjectUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutUserInput, Prisma.ProjectUncheckedCreateWithoutUserInput> | Prisma.ProjectCreateWithoutUserInput[] | Prisma.ProjectUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutUserInput | Prisma.ProjectCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProjectUpsertWithWhereUniqueWithoutUserInput | Prisma.ProjectUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProjectCreateManyUserInputEnvelope
  set?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  disconnect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  delete?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  update?: Prisma.ProjectUpdateWithWhereUniqueWithoutUserInput | Prisma.ProjectUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProjectUpdateManyWithWhereWithoutUserInput | Prisma.ProjectUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
}

export type ProjectCreateNestedOneWithoutTechStacksInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutTechStacksInput, Prisma.ProjectUncheckedCreateWithoutTechStacksInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutTechStacksInput
  connect?: Prisma.ProjectWhereUniqueInput
}

export type ProjectUpdateOneRequiredWithoutTechStacksNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutTechStacksInput, Prisma.ProjectUncheckedCreateWithoutTechStacksInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutTechStacksInput
  upsert?: Prisma.ProjectUpsertWithoutTechStacksInput
  connect?: Prisma.ProjectWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectUpdateToOneWithWhereWithoutTechStacksInput, Prisma.ProjectUpdateWithoutTechStacksInput>, Prisma.ProjectUncheckedUpdateWithoutTechStacksInput>
}

export type ProjectCreateNestedOneWithoutImagesInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutImagesInput, Prisma.ProjectUncheckedCreateWithoutImagesInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutImagesInput
  connect?: Prisma.ProjectWhereUniqueInput
}

export type ProjectUpdateOneRequiredWithoutImagesNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutImagesInput, Prisma.ProjectUncheckedCreateWithoutImagesInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutImagesInput
  upsert?: Prisma.ProjectUpsertWithoutImagesInput
  connect?: Prisma.ProjectWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectUpdateToOneWithWhereWithoutImagesInput, Prisma.ProjectUpdateWithoutImagesInput>, Prisma.ProjectUncheckedUpdateWithoutImagesInput>
}

export type ProjectCreateNestedOneWithoutTranslationsInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutTranslationsInput, Prisma.ProjectUncheckedCreateWithoutTranslationsInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutTranslationsInput
  connect?: Prisma.ProjectWhereUniqueInput
}

export type ProjectUpdateOneWithoutTranslationsNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutTranslationsInput, Prisma.ProjectUncheckedCreateWithoutTranslationsInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutTranslationsInput
  upsert?: Prisma.ProjectUpsertWithoutTranslationsInput
  disconnect?: Prisma.ProjectWhereInput | boolean
  delete?: Prisma.ProjectWhereInput | boolean
  connect?: Prisma.ProjectWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectUpdateToOneWithWhereWithoutTranslationsInput, Prisma.ProjectUpdateWithoutTranslationsInput>, Prisma.ProjectUncheckedUpdateWithoutTranslationsInput>
}

export type ProjectCreateWithoutUserInput = {
  id?: string
  title: string
  description?: string | null
  githubLink?: string | null
  liveLink?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  images?: Prisma.ProjectImageCreateNestedManyWithoutProjectInput
  techStacks?: Prisma.ProjectTechStackCreateNestedManyWithoutProjectInput
  translations?: Prisma.TranslationCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutUserInput = {
  id?: string
  title: string
  description?: string | null
  githubLink?: string | null
  liveLink?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  images?: Prisma.ProjectImageUncheckedCreateNestedManyWithoutProjectInput
  techStacks?: Prisma.ProjectTechStackUncheckedCreateNestedManyWithoutProjectInput
  translations?: Prisma.TranslationUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutUserInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutUserInput, Prisma.ProjectUncheckedCreateWithoutUserInput>
}

export type ProjectCreateManyUserInputEnvelope = {
  data: Prisma.ProjectCreateManyUserInput | Prisma.ProjectCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ProjectUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProjectWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutUserInput, Prisma.ProjectUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutUserInput, Prisma.ProjectUncheckedCreateWithoutUserInput>
}

export type ProjectUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProjectWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutUserInput, Prisma.ProjectUncheckedUpdateWithoutUserInput>
}

export type ProjectUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ProjectScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateManyMutationInput, Prisma.ProjectUncheckedUpdateManyWithoutUserInput>
}

export type ProjectScalarWhereInput = {
  AND?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
  OR?: Prisma.ProjectScalarWhereInput[]
  NOT?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
  id?: Prisma.StringFilter<"Project"> | string
  userId?: Prisma.StringFilter<"Project"> | string
  title?: Prisma.StringFilter<"Project"> | string
  description?: Prisma.StringNullableFilter<"Project"> | string | null
  githubLink?: Prisma.StringNullableFilter<"Project"> | string | null
  liveLink?: Prisma.StringNullableFilter<"Project"> | string | null
  startDate?: Prisma.DateTimeNullableFilter<"Project"> | Date | string | null
  endDate?: Prisma.DateTimeNullableFilter<"Project"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Project"> | Date | string
}

export type ProjectCreateWithoutTechStacksInput = {
  id?: string
  title: string
  description?: string | null
  githubLink?: string | null
  liveLink?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  images?: Prisma.ProjectImageCreateNestedManyWithoutProjectInput
  user: Prisma.UserCreateNestedOneWithoutProjectsInput
  translations?: Prisma.TranslationCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutTechStacksInput = {
  id?: string
  userId: string
  title: string
  description?: string | null
  githubLink?: string | null
  liveLink?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  images?: Prisma.ProjectImageUncheckedCreateNestedManyWithoutProjectInput
  translations?: Prisma.TranslationUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutTechStacksInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutTechStacksInput, Prisma.ProjectUncheckedCreateWithoutTechStacksInput>
}

export type ProjectUpsertWithoutTechStacksInput = {
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutTechStacksInput, Prisma.ProjectUncheckedUpdateWithoutTechStacksInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutTechStacksInput, Prisma.ProjectUncheckedCreateWithoutTechStacksInput>
  where?: Prisma.ProjectWhereInput
}

export type ProjectUpdateToOneWithWhereWithoutTechStacksInput = {
  where?: Prisma.ProjectWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutTechStacksInput, Prisma.ProjectUncheckedUpdateWithoutTechStacksInput>
}

export type ProjectUpdateWithoutTechStacksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  githubLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  liveLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  images?: Prisma.ProjectImageUpdateManyWithoutProjectNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutProjectsNestedInput
  translations?: Prisma.TranslationUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutTechStacksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  githubLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  liveLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  images?: Prisma.ProjectImageUncheckedUpdateManyWithoutProjectNestedInput
  translations?: Prisma.TranslationUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateWithoutImagesInput = {
  id?: string
  title: string
  description?: string | null
  githubLink?: string | null
  liveLink?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  techStacks?: Prisma.ProjectTechStackCreateNestedManyWithoutProjectInput
  user: Prisma.UserCreateNestedOneWithoutProjectsInput
  translations?: Prisma.TranslationCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutImagesInput = {
  id?: string
  userId: string
  title: string
  description?: string | null
  githubLink?: string | null
  liveLink?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  techStacks?: Prisma.ProjectTechStackUncheckedCreateNestedManyWithoutProjectInput
  translations?: Prisma.TranslationUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutImagesInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutImagesInput, Prisma.ProjectUncheckedCreateWithoutImagesInput>
}

export type ProjectUpsertWithoutImagesInput = {
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutImagesInput, Prisma.ProjectUncheckedUpdateWithoutImagesInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutImagesInput, Prisma.ProjectUncheckedCreateWithoutImagesInput>
  where?: Prisma.ProjectWhereInput
}

export type ProjectUpdateToOneWithWhereWithoutImagesInput = {
  where?: Prisma.ProjectWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutImagesInput, Prisma.ProjectUncheckedUpdateWithoutImagesInput>
}

export type ProjectUpdateWithoutImagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  githubLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  liveLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  techStacks?: Prisma.ProjectTechStackUpdateManyWithoutProjectNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutProjectsNestedInput
  translations?: Prisma.TranslationUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutImagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  githubLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  liveLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  techStacks?: Prisma.ProjectTechStackUncheckedUpdateManyWithoutProjectNestedInput
  translations?: Prisma.TranslationUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateWithoutTranslationsInput = {
  id?: string
  title: string
  description?: string | null
  githubLink?: string | null
  liveLink?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  images?: Prisma.ProjectImageCreateNestedManyWithoutProjectInput
  techStacks?: Prisma.ProjectTechStackCreateNestedManyWithoutProjectInput
  user: Prisma.UserCreateNestedOneWithoutProjectsInput
}

export type ProjectUncheckedCreateWithoutTranslationsInput = {
  id?: string
  userId: string
  title: string
  description?: string | null
  githubLink?: string | null
  liveLink?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  images?: Prisma.ProjectImageUncheckedCreateNestedManyWithoutProjectInput
  techStacks?: Prisma.ProjectTechStackUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutTranslationsInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutTranslationsInput, Prisma.ProjectUncheckedCreateWithoutTranslationsInput>
}

export type ProjectUpsertWithoutTranslationsInput = {
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutTranslationsInput, Prisma.ProjectUncheckedUpdateWithoutTranslationsInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutTranslationsInput, Prisma.ProjectUncheckedCreateWithoutTranslationsInput>
  where?: Prisma.ProjectWhereInput
}

export type ProjectUpdateToOneWithWhereWithoutTranslationsInput = {
  where?: Prisma.ProjectWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutTranslationsInput, Prisma.ProjectUncheckedUpdateWithoutTranslationsInput>
}

export type ProjectUpdateWithoutTranslationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  githubLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  liveLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  images?: Prisma.ProjectImageUpdateManyWithoutProjectNestedInput
  techStacks?: Prisma.ProjectTechStackUpdateManyWithoutProjectNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutProjectsNestedInput
}

export type ProjectUncheckedUpdateWithoutTranslationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  githubLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  liveLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  images?: Prisma.ProjectImageUncheckedUpdateManyWithoutProjectNestedInput
  techStacks?: Prisma.ProjectTechStackUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateManyUserInput = {
  id?: string
  title: string
  description?: string | null
  githubLink?: string | null
  liveLink?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  githubLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  liveLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  images?: Prisma.ProjectImageUpdateManyWithoutProjectNestedInput
  techStacks?: Prisma.ProjectTechStackUpdateManyWithoutProjectNestedInput
  translations?: Prisma.TranslationUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  githubLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  liveLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  images?: Prisma.ProjectImageUncheckedUpdateManyWithoutProjectNestedInput
  techStacks?: Prisma.ProjectTechStackUncheckedUpdateManyWithoutProjectNestedInput
  translations?: Prisma.TranslationUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  githubLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  liveLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ProjectCountOutputType
 */

export type ProjectCountOutputType = {
  images: number
  techStacks: number
  translations: number
}

export type ProjectCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  images?: boolean | ProjectCountOutputTypeCountImagesArgs
  techStacks?: boolean | ProjectCountOutputTypeCountTechStacksArgs
  translations?: boolean | ProjectCountOutputTypeCountTranslationsArgs
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectCountOutputType
   */
  select?: Prisma.ProjectCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountImagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectImageWhereInput
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountTechStacksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectTechStackWhereInput
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountTranslationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TranslationWhereInput
}


export type ProjectSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  title?: boolean
  description?: boolean
  githubLink?: boolean
  liveLink?: boolean
  startDate?: boolean
  endDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  images?: boolean | Prisma.Project$imagesArgs<ExtArgs>
  techStacks?: boolean | Prisma.Project$techStacksArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  translations?: boolean | Prisma.Project$translationsArgs<ExtArgs>
  _count?: boolean | Prisma.ProjectCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["project"]>



export type ProjectSelectScalar = {
  id?: boolean
  userId?: boolean
  title?: boolean
  description?: boolean
  githubLink?: boolean
  liveLink?: boolean
  startDate?: boolean
  endDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProjectOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "title" | "description" | "githubLink" | "liveLink" | "startDate" | "endDate" | "createdAt" | "updatedAt", ExtArgs["result"]["project"]>
export type ProjectInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  images?: boolean | Prisma.Project$imagesArgs<ExtArgs>
  techStacks?: boolean | Prisma.Project$techStacksArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  translations?: boolean | Prisma.Project$translationsArgs<ExtArgs>
  _count?: boolean | Prisma.ProjectCountOutputTypeDefaultArgs<ExtArgs>
}

export type $ProjectPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Project"
  objects: {
    images: Prisma.$ProjectImagePayload<ExtArgs>[]
    techStacks: Prisma.$ProjectTechStackPayload<ExtArgs>[]
    user: Prisma.$UserPayload<ExtArgs>
    translations: Prisma.$TranslationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    title: string
    description: string | null
    githubLink: string | null
    liveLink: string | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["project"]>
  composites: {}
}

export type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProjectPayload, S>

export type ProjectCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProjectCountAggregateInputType | true
  }

export interface ProjectDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
  /**
   * Find zero or one Project that matches the filter.
   * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProjectFindUniqueArgs>(args: Prisma.SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Project that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Project that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectFindFirstArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProjectFindFirstArgs>(args?: Prisma.SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Project that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Projects that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Projects
   * const projects = await prisma.project.findMany()
   * 
   * // Get first 10 Projects
   * const projects = await prisma.project.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProjectFindManyArgs>(args?: Prisma.SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Project.
   * @param {ProjectCreateArgs} args - Arguments to create a Project.
   * @example
   * // Create one Project
   * const Project = await prisma.project.create({
   *   data: {
   *     // ... data to create a Project
   *   }
   * })
   * 
   */
  create<T extends ProjectCreateArgs>(args: Prisma.SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Projects.
   * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
   * @example
   * // Create many Projects
   * const project = await prisma.project.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProjectCreateManyArgs>(args?: Prisma.SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Project.
   * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
   * @example
   * // Delete one Project
   * const Project = await prisma.project.delete({
   *   where: {
   *     // ... filter to delete one Project
   *   }
   * })
   * 
   */
  delete<T extends ProjectDeleteArgs>(args: Prisma.SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Project.
   * @param {ProjectUpdateArgs} args - Arguments to update one Project.
   * @example
   * // Update one Project
   * const project = await prisma.project.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProjectUpdateArgs>(args: Prisma.SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Projects.
   * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
   * @example
   * // Delete a few Projects
   * const { count } = await prisma.project.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProjectDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Projects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Projects
   * const project = await prisma.project.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProjectUpdateManyArgs>(args: Prisma.SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Project.
   * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
   * @example
   * // Update or create a Project
   * const project = await prisma.project.upsert({
   *   create: {
   *     // ... data to create a Project
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Project we want to update
   *   }
   * })
   */
  upsert<T extends ProjectUpsertArgs>(args: Prisma.SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Projects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
   * @example
   * // Count the number of Projects
   * const count = await prisma.project.count({
   *   where: {
   *     // ... the filter for the Projects we want to count
   *   }
   * })
  **/
  count<T extends ProjectCountArgs>(
    args?: Prisma.Subset<T, ProjectCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProjectCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Project.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProjectAggregateArgs>(args: Prisma.Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

  /**
   * Group by Project.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProjectGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProjectGroupByArgs['orderBy'] }
      : { orderBy?: ProjectGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Project model
 */
readonly fields: ProjectFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Project.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  images<T extends Prisma.Project$imagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  techStacks<T extends Prisma.Project$techStacksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$techStacksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectTechStackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  translations<T extends Prisma.Project$translationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$translationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Project model
 */
export interface ProjectFieldRefs {
  readonly id: Prisma.FieldRef<"Project", 'String'>
  readonly userId: Prisma.FieldRef<"Project", 'String'>
  readonly title: Prisma.FieldRef<"Project", 'String'>
  readonly description: Prisma.FieldRef<"Project", 'String'>
  readonly githubLink: Prisma.FieldRef<"Project", 'String'>
  readonly liveLink: Prisma.FieldRef<"Project", 'String'>
  readonly startDate: Prisma.FieldRef<"Project", 'DateTime'>
  readonly endDate: Prisma.FieldRef<"Project", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Project", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Project", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Project findUnique
 */
export type ProjectFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Project to fetch.
   */
  where: Prisma.ProjectWhereUniqueInput
}

/**
 * Project findUniqueOrThrow
 */
export type ProjectFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Project to fetch.
   */
  where: Prisma.ProjectWhereUniqueInput
}

/**
 * Project findFirst
 */
export type ProjectFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Project to fetch.
   */
  where?: Prisma.ProjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Projects to fetch.
   */
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Projects.
   */
  cursor?: Prisma.ProjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Projects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Projects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Projects.
   */
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * Project findFirstOrThrow
 */
export type ProjectFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Project to fetch.
   */
  where?: Prisma.ProjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Projects to fetch.
   */
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Projects.
   */
  cursor?: Prisma.ProjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Projects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Projects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Projects.
   */
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * Project findMany
 */
export type ProjectFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Projects to fetch.
   */
  where?: Prisma.ProjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Projects to fetch.
   */
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Projects.
   */
  cursor?: Prisma.ProjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Projects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Projects.
   */
  skip?: number
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * Project create
 */
export type ProjectCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * The data needed to create a Project.
   */
  data: Prisma.XOR<Prisma.ProjectCreateInput, Prisma.ProjectUncheckedCreateInput>
}

/**
 * Project createMany
 */
export type ProjectCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Projects.
   */
  data: Prisma.ProjectCreateManyInput | Prisma.ProjectCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Project update
 */
export type ProjectUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * The data needed to update a Project.
   */
  data: Prisma.XOR<Prisma.ProjectUpdateInput, Prisma.ProjectUncheckedUpdateInput>
  /**
   * Choose, which Project to update.
   */
  where: Prisma.ProjectWhereUniqueInput
}

/**
 * Project updateMany
 */
export type ProjectUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Projects.
   */
  data: Prisma.XOR<Prisma.ProjectUpdateManyMutationInput, Prisma.ProjectUncheckedUpdateManyInput>
  /**
   * Filter which Projects to update
   */
  where?: Prisma.ProjectWhereInput
  /**
   * Limit how many Projects to update.
   */
  limit?: number
}

/**
 * Project upsert
 */
export type ProjectUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * The filter to search for the Project to update in case it exists.
   */
  where: Prisma.ProjectWhereUniqueInput
  /**
   * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
   */
  create: Prisma.XOR<Prisma.ProjectCreateInput, Prisma.ProjectUncheckedCreateInput>
  /**
   * In case the Project was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProjectUpdateInput, Prisma.ProjectUncheckedUpdateInput>
}

/**
 * Project delete
 */
export type ProjectDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter which Project to delete.
   */
  where: Prisma.ProjectWhereUniqueInput
}

/**
 * Project deleteMany
 */
export type ProjectDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Projects to delete
   */
  where?: Prisma.ProjectWhereInput
  /**
   * Limit how many Projects to delete.
   */
  limit?: number
}

/**
 * Project.images
 */
export type Project$imagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectImage
   */
  select?: Prisma.ProjectImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectImage
   */
  omit?: Prisma.ProjectImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectImageInclude<ExtArgs> | null
  where?: Prisma.ProjectImageWhereInput
  orderBy?: Prisma.ProjectImageOrderByWithRelationInput | Prisma.ProjectImageOrderByWithRelationInput[]
  cursor?: Prisma.ProjectImageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProjectImageScalarFieldEnum | Prisma.ProjectImageScalarFieldEnum[]
}

/**
 * Project.techStacks
 */
export type Project$techStacksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectTechStack
   */
  select?: Prisma.ProjectTechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectTechStack
   */
  omit?: Prisma.ProjectTechStackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectTechStackInclude<ExtArgs> | null
  where?: Prisma.ProjectTechStackWhereInput
  orderBy?: Prisma.ProjectTechStackOrderByWithRelationInput | Prisma.ProjectTechStackOrderByWithRelationInput[]
  cursor?: Prisma.ProjectTechStackWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProjectTechStackScalarFieldEnum | Prisma.ProjectTechStackScalarFieldEnum[]
}

/**
 * Project.translations
 */
export type Project$translationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Translation
   */
  select?: Prisma.TranslationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Translation
   */
  omit?: Prisma.TranslationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TranslationInclude<ExtArgs> | null
  where?: Prisma.TranslationWhereInput
  orderBy?: Prisma.TranslationOrderByWithRelationInput | Prisma.TranslationOrderByWithRelationInput[]
  cursor?: Prisma.TranslationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TranslationScalarFieldEnum | Prisma.TranslationScalarFieldEnum[]
}

/**
 * Project without action
 */
export type ProjectDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
}
