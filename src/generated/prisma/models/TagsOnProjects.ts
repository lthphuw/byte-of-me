
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TagsOnProjects` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model TagsOnProjects
 * 
 */
export type TagsOnProjectsModel = runtime.Types.Result.DefaultSelection<Prisma.$TagsOnProjectsPayload>

export type AggregateTagsOnProjects = {
  _count: TagsOnProjectsCountAggregateOutputType | null
  _min: TagsOnProjectsMinAggregateOutputType | null
  _max: TagsOnProjectsMaxAggregateOutputType | null
}

export type TagsOnProjectsMinAggregateOutputType = {
  projectId: string | null
  tagId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TagsOnProjectsMaxAggregateOutputType = {
  projectId: string | null
  tagId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TagsOnProjectsCountAggregateOutputType = {
  projectId: number
  tagId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TagsOnProjectsMinAggregateInputType = {
  projectId?: true
  tagId?: true
  createdAt?: true
  updatedAt?: true
}

export type TagsOnProjectsMaxAggregateInputType = {
  projectId?: true
  tagId?: true
  createdAt?: true
  updatedAt?: true
}

export type TagsOnProjectsCountAggregateInputType = {
  projectId?: true
  tagId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TagsOnProjectsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TagsOnProjects to aggregate.
   */
  where?: Prisma.TagsOnProjectsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TagsOnProjects to fetch.
   */
  orderBy?: Prisma.TagsOnProjectsOrderByWithRelationInput | Prisma.TagsOnProjectsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TagsOnProjectsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TagsOnProjects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TagsOnProjects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TagsOnProjects
  **/
  _count?: true | TagsOnProjectsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TagsOnProjectsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TagsOnProjectsMaxAggregateInputType
}

export type GetTagsOnProjectsAggregateType<T extends TagsOnProjectsAggregateArgs> = {
      [P in keyof T & keyof AggregateTagsOnProjects]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTagsOnProjects[P]>
    : Prisma.GetScalarType<T[P], AggregateTagsOnProjects[P]>
}




export type TagsOnProjectsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TagsOnProjectsWhereInput
  orderBy?: Prisma.TagsOnProjectsOrderByWithAggregationInput | Prisma.TagsOnProjectsOrderByWithAggregationInput[]
  by: Prisma.TagsOnProjectsScalarFieldEnum[] | Prisma.TagsOnProjectsScalarFieldEnum
  having?: Prisma.TagsOnProjectsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TagsOnProjectsCountAggregateInputType | true
  _min?: TagsOnProjectsMinAggregateInputType
  _max?: TagsOnProjectsMaxAggregateInputType
}

export type TagsOnProjectsGroupByOutputType = {
  projectId: string
  tagId: string
  createdAt: Date
  updatedAt: Date
  _count: TagsOnProjectsCountAggregateOutputType | null
  _min: TagsOnProjectsMinAggregateOutputType | null
  _max: TagsOnProjectsMaxAggregateOutputType | null
}

type GetTagsOnProjectsGroupByPayload<T extends TagsOnProjectsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TagsOnProjectsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TagsOnProjectsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TagsOnProjectsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TagsOnProjectsGroupByOutputType[P]>
      }
    >
  > 



export type TagsOnProjectsWhereInput = {
  AND?: Prisma.TagsOnProjectsWhereInput | Prisma.TagsOnProjectsWhereInput[]
  OR?: Prisma.TagsOnProjectsWhereInput[]
  NOT?: Prisma.TagsOnProjectsWhereInput | Prisma.TagsOnProjectsWhereInput[]
  projectId?: Prisma.StringFilter<"TagsOnProjects"> | string
  tagId?: Prisma.StringFilter<"TagsOnProjects"> | string
  createdAt?: Prisma.DateTimeFilter<"TagsOnProjects"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TagsOnProjects"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  tag?: Prisma.XOR<Prisma.TagScalarRelationFilter, Prisma.TagWhereInput>
}

export type TagsOnProjectsOrderByWithRelationInput = {
  projectId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
  tag?: Prisma.TagOrderByWithRelationInput
  _relevance?: Prisma.TagsOnProjectsOrderByRelevanceInput
}

export type TagsOnProjectsWhereUniqueInput = Prisma.AtLeast<{
  projectId_tagId?: Prisma.TagsOnProjectsProjectIdTagIdCompoundUniqueInput
  AND?: Prisma.TagsOnProjectsWhereInput | Prisma.TagsOnProjectsWhereInput[]
  OR?: Prisma.TagsOnProjectsWhereInput[]
  NOT?: Prisma.TagsOnProjectsWhereInput | Prisma.TagsOnProjectsWhereInput[]
  projectId?: Prisma.StringFilter<"TagsOnProjects"> | string
  tagId?: Prisma.StringFilter<"TagsOnProjects"> | string
  createdAt?: Prisma.DateTimeFilter<"TagsOnProjects"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TagsOnProjects"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  tag?: Prisma.XOR<Prisma.TagScalarRelationFilter, Prisma.TagWhereInput>
}, "projectId_tagId">

export type TagsOnProjectsOrderByWithAggregationInput = {
  projectId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TagsOnProjectsCountOrderByAggregateInput
  _max?: Prisma.TagsOnProjectsMaxOrderByAggregateInput
  _min?: Prisma.TagsOnProjectsMinOrderByAggregateInput
}

export type TagsOnProjectsScalarWhereWithAggregatesInput = {
  AND?: Prisma.TagsOnProjectsScalarWhereWithAggregatesInput | Prisma.TagsOnProjectsScalarWhereWithAggregatesInput[]
  OR?: Prisma.TagsOnProjectsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TagsOnProjectsScalarWhereWithAggregatesInput | Prisma.TagsOnProjectsScalarWhereWithAggregatesInput[]
  projectId?: Prisma.StringWithAggregatesFilter<"TagsOnProjects"> | string
  tagId?: Prisma.StringWithAggregatesFilter<"TagsOnProjects"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TagsOnProjects"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TagsOnProjects"> | Date | string
}

export type TagsOnProjectsCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutTagsInput
  tag: Prisma.TagCreateNestedOneWithoutProjectsInput
}

export type TagsOnProjectsUncheckedCreateInput = {
  projectId: string
  tagId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TagsOnProjectsUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutTagsNestedInput
  tag?: Prisma.TagUpdateOneRequiredWithoutProjectsNestedInput
}

export type TagsOnProjectsUncheckedUpdateInput = {
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TagsOnProjectsCreateManyInput = {
  projectId: string
  tagId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TagsOnProjectsUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TagsOnProjectsUncheckedUpdateManyInput = {
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TagsOnProjectsListRelationFilter = {
  every?: Prisma.TagsOnProjectsWhereInput
  some?: Prisma.TagsOnProjectsWhereInput
  none?: Prisma.TagsOnProjectsWhereInput
}

export type TagsOnProjectsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TagsOnProjectsOrderByRelevanceInput = {
  fields: Prisma.TagsOnProjectsOrderByRelevanceFieldEnum | Prisma.TagsOnProjectsOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type TagsOnProjectsProjectIdTagIdCompoundUniqueInput = {
  projectId: string
  tagId: string
}

export type TagsOnProjectsCountOrderByAggregateInput = {
  projectId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TagsOnProjectsMaxOrderByAggregateInput = {
  projectId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TagsOnProjectsMinOrderByAggregateInput = {
  projectId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TagsOnProjectsCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.TagsOnProjectsCreateWithoutProjectInput, Prisma.TagsOnProjectsUncheckedCreateWithoutProjectInput> | Prisma.TagsOnProjectsCreateWithoutProjectInput[] | Prisma.TagsOnProjectsUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.TagsOnProjectsCreateOrConnectWithoutProjectInput | Prisma.TagsOnProjectsCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.TagsOnProjectsCreateManyProjectInputEnvelope
  connect?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
}

export type TagsOnProjectsUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.TagsOnProjectsCreateWithoutProjectInput, Prisma.TagsOnProjectsUncheckedCreateWithoutProjectInput> | Prisma.TagsOnProjectsCreateWithoutProjectInput[] | Prisma.TagsOnProjectsUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.TagsOnProjectsCreateOrConnectWithoutProjectInput | Prisma.TagsOnProjectsCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.TagsOnProjectsCreateManyProjectInputEnvelope
  connect?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
}

export type TagsOnProjectsUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.TagsOnProjectsCreateWithoutProjectInput, Prisma.TagsOnProjectsUncheckedCreateWithoutProjectInput> | Prisma.TagsOnProjectsCreateWithoutProjectInput[] | Prisma.TagsOnProjectsUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.TagsOnProjectsCreateOrConnectWithoutProjectInput | Prisma.TagsOnProjectsCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.TagsOnProjectsUpsertWithWhereUniqueWithoutProjectInput | Prisma.TagsOnProjectsUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.TagsOnProjectsCreateManyProjectInputEnvelope
  set?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  disconnect?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  delete?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  connect?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  update?: Prisma.TagsOnProjectsUpdateWithWhereUniqueWithoutProjectInput | Prisma.TagsOnProjectsUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.TagsOnProjectsUpdateManyWithWhereWithoutProjectInput | Prisma.TagsOnProjectsUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.TagsOnProjectsScalarWhereInput | Prisma.TagsOnProjectsScalarWhereInput[]
}

export type TagsOnProjectsUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.TagsOnProjectsCreateWithoutProjectInput, Prisma.TagsOnProjectsUncheckedCreateWithoutProjectInput> | Prisma.TagsOnProjectsCreateWithoutProjectInput[] | Prisma.TagsOnProjectsUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.TagsOnProjectsCreateOrConnectWithoutProjectInput | Prisma.TagsOnProjectsCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.TagsOnProjectsUpsertWithWhereUniqueWithoutProjectInput | Prisma.TagsOnProjectsUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.TagsOnProjectsCreateManyProjectInputEnvelope
  set?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  disconnect?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  delete?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  connect?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  update?: Prisma.TagsOnProjectsUpdateWithWhereUniqueWithoutProjectInput | Prisma.TagsOnProjectsUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.TagsOnProjectsUpdateManyWithWhereWithoutProjectInput | Prisma.TagsOnProjectsUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.TagsOnProjectsScalarWhereInput | Prisma.TagsOnProjectsScalarWhereInput[]
}

export type TagsOnProjectsCreateNestedManyWithoutTagInput = {
  create?: Prisma.XOR<Prisma.TagsOnProjectsCreateWithoutTagInput, Prisma.TagsOnProjectsUncheckedCreateWithoutTagInput> | Prisma.TagsOnProjectsCreateWithoutTagInput[] | Prisma.TagsOnProjectsUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.TagsOnProjectsCreateOrConnectWithoutTagInput | Prisma.TagsOnProjectsCreateOrConnectWithoutTagInput[]
  createMany?: Prisma.TagsOnProjectsCreateManyTagInputEnvelope
  connect?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
}

export type TagsOnProjectsUncheckedCreateNestedManyWithoutTagInput = {
  create?: Prisma.XOR<Prisma.TagsOnProjectsCreateWithoutTagInput, Prisma.TagsOnProjectsUncheckedCreateWithoutTagInput> | Prisma.TagsOnProjectsCreateWithoutTagInput[] | Prisma.TagsOnProjectsUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.TagsOnProjectsCreateOrConnectWithoutTagInput | Prisma.TagsOnProjectsCreateOrConnectWithoutTagInput[]
  createMany?: Prisma.TagsOnProjectsCreateManyTagInputEnvelope
  connect?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
}

export type TagsOnProjectsUpdateManyWithoutTagNestedInput = {
  create?: Prisma.XOR<Prisma.TagsOnProjectsCreateWithoutTagInput, Prisma.TagsOnProjectsUncheckedCreateWithoutTagInput> | Prisma.TagsOnProjectsCreateWithoutTagInput[] | Prisma.TagsOnProjectsUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.TagsOnProjectsCreateOrConnectWithoutTagInput | Prisma.TagsOnProjectsCreateOrConnectWithoutTagInput[]
  upsert?: Prisma.TagsOnProjectsUpsertWithWhereUniqueWithoutTagInput | Prisma.TagsOnProjectsUpsertWithWhereUniqueWithoutTagInput[]
  createMany?: Prisma.TagsOnProjectsCreateManyTagInputEnvelope
  set?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  disconnect?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  delete?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  connect?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  update?: Prisma.TagsOnProjectsUpdateWithWhereUniqueWithoutTagInput | Prisma.TagsOnProjectsUpdateWithWhereUniqueWithoutTagInput[]
  updateMany?: Prisma.TagsOnProjectsUpdateManyWithWhereWithoutTagInput | Prisma.TagsOnProjectsUpdateManyWithWhereWithoutTagInput[]
  deleteMany?: Prisma.TagsOnProjectsScalarWhereInput | Prisma.TagsOnProjectsScalarWhereInput[]
}

export type TagsOnProjectsUncheckedUpdateManyWithoutTagNestedInput = {
  create?: Prisma.XOR<Prisma.TagsOnProjectsCreateWithoutTagInput, Prisma.TagsOnProjectsUncheckedCreateWithoutTagInput> | Prisma.TagsOnProjectsCreateWithoutTagInput[] | Prisma.TagsOnProjectsUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.TagsOnProjectsCreateOrConnectWithoutTagInput | Prisma.TagsOnProjectsCreateOrConnectWithoutTagInput[]
  upsert?: Prisma.TagsOnProjectsUpsertWithWhereUniqueWithoutTagInput | Prisma.TagsOnProjectsUpsertWithWhereUniqueWithoutTagInput[]
  createMany?: Prisma.TagsOnProjectsCreateManyTagInputEnvelope
  set?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  disconnect?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  delete?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  connect?: Prisma.TagsOnProjectsWhereUniqueInput | Prisma.TagsOnProjectsWhereUniqueInput[]
  update?: Prisma.TagsOnProjectsUpdateWithWhereUniqueWithoutTagInput | Prisma.TagsOnProjectsUpdateWithWhereUniqueWithoutTagInput[]
  updateMany?: Prisma.TagsOnProjectsUpdateManyWithWhereWithoutTagInput | Prisma.TagsOnProjectsUpdateManyWithWhereWithoutTagInput[]
  deleteMany?: Prisma.TagsOnProjectsScalarWhereInput | Prisma.TagsOnProjectsScalarWhereInput[]
}

export type TagsOnProjectsCreateWithoutProjectInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  tag: Prisma.TagCreateNestedOneWithoutProjectsInput
}

export type TagsOnProjectsUncheckedCreateWithoutProjectInput = {
  tagId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TagsOnProjectsCreateOrConnectWithoutProjectInput = {
  where: Prisma.TagsOnProjectsWhereUniqueInput
  create: Prisma.XOR<Prisma.TagsOnProjectsCreateWithoutProjectInput, Prisma.TagsOnProjectsUncheckedCreateWithoutProjectInput>
}

export type TagsOnProjectsCreateManyProjectInputEnvelope = {
  data: Prisma.TagsOnProjectsCreateManyProjectInput | Prisma.TagsOnProjectsCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type TagsOnProjectsUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.TagsOnProjectsWhereUniqueInput
  update: Prisma.XOR<Prisma.TagsOnProjectsUpdateWithoutProjectInput, Prisma.TagsOnProjectsUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.TagsOnProjectsCreateWithoutProjectInput, Prisma.TagsOnProjectsUncheckedCreateWithoutProjectInput>
}

export type TagsOnProjectsUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.TagsOnProjectsWhereUniqueInput
  data: Prisma.XOR<Prisma.TagsOnProjectsUpdateWithoutProjectInput, Prisma.TagsOnProjectsUncheckedUpdateWithoutProjectInput>
}

export type TagsOnProjectsUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.TagsOnProjectsScalarWhereInput
  data: Prisma.XOR<Prisma.TagsOnProjectsUpdateManyMutationInput, Prisma.TagsOnProjectsUncheckedUpdateManyWithoutProjectInput>
}

export type TagsOnProjectsScalarWhereInput = {
  AND?: Prisma.TagsOnProjectsScalarWhereInput | Prisma.TagsOnProjectsScalarWhereInput[]
  OR?: Prisma.TagsOnProjectsScalarWhereInput[]
  NOT?: Prisma.TagsOnProjectsScalarWhereInput | Prisma.TagsOnProjectsScalarWhereInput[]
  projectId?: Prisma.StringFilter<"TagsOnProjects"> | string
  tagId?: Prisma.StringFilter<"TagsOnProjects"> | string
  createdAt?: Prisma.DateTimeFilter<"TagsOnProjects"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TagsOnProjects"> | Date | string
}

export type TagsOnProjectsCreateWithoutTagInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutTagsInput
}

export type TagsOnProjectsUncheckedCreateWithoutTagInput = {
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TagsOnProjectsCreateOrConnectWithoutTagInput = {
  where: Prisma.TagsOnProjectsWhereUniqueInput
  create: Prisma.XOR<Prisma.TagsOnProjectsCreateWithoutTagInput, Prisma.TagsOnProjectsUncheckedCreateWithoutTagInput>
}

export type TagsOnProjectsCreateManyTagInputEnvelope = {
  data: Prisma.TagsOnProjectsCreateManyTagInput | Prisma.TagsOnProjectsCreateManyTagInput[]
  skipDuplicates?: boolean
}

export type TagsOnProjectsUpsertWithWhereUniqueWithoutTagInput = {
  where: Prisma.TagsOnProjectsWhereUniqueInput
  update: Prisma.XOR<Prisma.TagsOnProjectsUpdateWithoutTagInput, Prisma.TagsOnProjectsUncheckedUpdateWithoutTagInput>
  create: Prisma.XOR<Prisma.TagsOnProjectsCreateWithoutTagInput, Prisma.TagsOnProjectsUncheckedCreateWithoutTagInput>
}

export type TagsOnProjectsUpdateWithWhereUniqueWithoutTagInput = {
  where: Prisma.TagsOnProjectsWhereUniqueInput
  data: Prisma.XOR<Prisma.TagsOnProjectsUpdateWithoutTagInput, Prisma.TagsOnProjectsUncheckedUpdateWithoutTagInput>
}

export type TagsOnProjectsUpdateManyWithWhereWithoutTagInput = {
  where: Prisma.TagsOnProjectsScalarWhereInput
  data: Prisma.XOR<Prisma.TagsOnProjectsUpdateManyMutationInput, Prisma.TagsOnProjectsUncheckedUpdateManyWithoutTagInput>
}

export type TagsOnProjectsCreateManyProjectInput = {
  tagId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TagsOnProjectsUpdateWithoutProjectInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tag?: Prisma.TagUpdateOneRequiredWithoutProjectsNestedInput
}

export type TagsOnProjectsUncheckedUpdateWithoutProjectInput = {
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TagsOnProjectsUncheckedUpdateManyWithoutProjectInput = {
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TagsOnProjectsCreateManyTagInput = {
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TagsOnProjectsUpdateWithoutTagInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutTagsNestedInput
}

export type TagsOnProjectsUncheckedUpdateWithoutTagInput = {
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TagsOnProjectsUncheckedUpdateManyWithoutTagInput = {
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TagsOnProjectsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  projectId?: boolean
  tagId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tagsOnProjects"]>



export type TagsOnProjectsSelectScalar = {
  projectId?: boolean
  tagId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TagsOnProjectsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"projectId" | "tagId" | "createdAt" | "updatedAt", ExtArgs["result"]["tagsOnProjects"]>
export type TagsOnProjectsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}

export type $TagsOnProjectsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TagsOnProjects"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>
    tag: Prisma.$TagPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    projectId: string
    tagId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["tagsOnProjects"]>
  composites: {}
}

export type TagsOnProjectsGetPayload<S extends boolean | null | undefined | TagsOnProjectsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TagsOnProjectsPayload, S>

export type TagsOnProjectsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TagsOnProjectsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TagsOnProjectsCountAggregateInputType | true
  }

export interface TagsOnProjectsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TagsOnProjects'], meta: { name: 'TagsOnProjects' } }
  /**
   * Find zero or one TagsOnProjects that matches the filter.
   * @param {TagsOnProjectsFindUniqueArgs} args - Arguments to find a TagsOnProjects
   * @example
   * // Get one TagsOnProjects
   * const tagsOnProjects = await prisma.tagsOnProjects.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TagsOnProjectsFindUniqueArgs>(args: Prisma.SelectSubset<T, TagsOnProjectsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TagsOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TagsOnProjectsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TagsOnProjects that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TagsOnProjectsFindUniqueOrThrowArgs} args - Arguments to find a TagsOnProjects
   * @example
   * // Get one TagsOnProjects
   * const tagsOnProjects = await prisma.tagsOnProjects.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TagsOnProjectsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TagsOnProjectsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TagsOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TagsOnProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TagsOnProjects that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsOnProjectsFindFirstArgs} args - Arguments to find a TagsOnProjects
   * @example
   * // Get one TagsOnProjects
   * const tagsOnProjects = await prisma.tagsOnProjects.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TagsOnProjectsFindFirstArgs>(args?: Prisma.SelectSubset<T, TagsOnProjectsFindFirstArgs<ExtArgs>>): Prisma.Prisma__TagsOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TagsOnProjectsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TagsOnProjects that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsOnProjectsFindFirstOrThrowArgs} args - Arguments to find a TagsOnProjects
   * @example
   * // Get one TagsOnProjects
   * const tagsOnProjects = await prisma.tagsOnProjects.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TagsOnProjectsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TagsOnProjectsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TagsOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TagsOnProjectsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TagsOnProjects that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsOnProjectsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TagsOnProjects
   * const tagsOnProjects = await prisma.tagsOnProjects.findMany()
   * 
   * // Get first 10 TagsOnProjects
   * const tagsOnProjects = await prisma.tagsOnProjects.findMany({ take: 10 })
   * 
   * // Only select the `projectId`
   * const tagsOnProjectsWithProjectIdOnly = await prisma.tagsOnProjects.findMany({ select: { projectId: true } })
   * 
   */
  findMany<T extends TagsOnProjectsFindManyArgs>(args?: Prisma.SelectSubset<T, TagsOnProjectsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TagsOnProjectsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TagsOnProjects.
   * @param {TagsOnProjectsCreateArgs} args - Arguments to create a TagsOnProjects.
   * @example
   * // Create one TagsOnProjects
   * const TagsOnProjects = await prisma.tagsOnProjects.create({
   *   data: {
   *     // ... data to create a TagsOnProjects
   *   }
   * })
   * 
   */
  create<T extends TagsOnProjectsCreateArgs>(args: Prisma.SelectSubset<T, TagsOnProjectsCreateArgs<ExtArgs>>): Prisma.Prisma__TagsOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TagsOnProjectsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TagsOnProjects.
   * @param {TagsOnProjectsCreateManyArgs} args - Arguments to create many TagsOnProjects.
   * @example
   * // Create many TagsOnProjects
   * const tagsOnProjects = await prisma.tagsOnProjects.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TagsOnProjectsCreateManyArgs>(args?: Prisma.SelectSubset<T, TagsOnProjectsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a TagsOnProjects.
   * @param {TagsOnProjectsDeleteArgs} args - Arguments to delete one TagsOnProjects.
   * @example
   * // Delete one TagsOnProjects
   * const TagsOnProjects = await prisma.tagsOnProjects.delete({
   *   where: {
   *     // ... filter to delete one TagsOnProjects
   *   }
   * })
   * 
   */
  delete<T extends TagsOnProjectsDeleteArgs>(args: Prisma.SelectSubset<T, TagsOnProjectsDeleteArgs<ExtArgs>>): Prisma.Prisma__TagsOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TagsOnProjectsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TagsOnProjects.
   * @param {TagsOnProjectsUpdateArgs} args - Arguments to update one TagsOnProjects.
   * @example
   * // Update one TagsOnProjects
   * const tagsOnProjects = await prisma.tagsOnProjects.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TagsOnProjectsUpdateArgs>(args: Prisma.SelectSubset<T, TagsOnProjectsUpdateArgs<ExtArgs>>): Prisma.Prisma__TagsOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TagsOnProjectsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TagsOnProjects.
   * @param {TagsOnProjectsDeleteManyArgs} args - Arguments to filter TagsOnProjects to delete.
   * @example
   * // Delete a few TagsOnProjects
   * const { count } = await prisma.tagsOnProjects.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TagsOnProjectsDeleteManyArgs>(args?: Prisma.SelectSubset<T, TagsOnProjectsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TagsOnProjects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsOnProjectsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TagsOnProjects
   * const tagsOnProjects = await prisma.tagsOnProjects.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TagsOnProjectsUpdateManyArgs>(args: Prisma.SelectSubset<T, TagsOnProjectsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one TagsOnProjects.
   * @param {TagsOnProjectsUpsertArgs} args - Arguments to update or create a TagsOnProjects.
   * @example
   * // Update or create a TagsOnProjects
   * const tagsOnProjects = await prisma.tagsOnProjects.upsert({
   *   create: {
   *     // ... data to create a TagsOnProjects
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TagsOnProjects we want to update
   *   }
   * })
   */
  upsert<T extends TagsOnProjectsUpsertArgs>(args: Prisma.SelectSubset<T, TagsOnProjectsUpsertArgs<ExtArgs>>): Prisma.Prisma__TagsOnProjectsClient<runtime.Types.Result.GetResult<Prisma.$TagsOnProjectsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TagsOnProjects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsOnProjectsCountArgs} args - Arguments to filter TagsOnProjects to count.
   * @example
   * // Count the number of TagsOnProjects
   * const count = await prisma.tagsOnProjects.count({
   *   where: {
   *     // ... the filter for the TagsOnProjects we want to count
   *   }
   * })
  **/
  count<T extends TagsOnProjectsCountArgs>(
    args?: Prisma.Subset<T, TagsOnProjectsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TagsOnProjectsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TagsOnProjects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsOnProjectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TagsOnProjectsAggregateArgs>(args: Prisma.Subset<T, TagsOnProjectsAggregateArgs>): Prisma.PrismaPromise<GetTagsOnProjectsAggregateType<T>>

  /**
   * Group by TagsOnProjects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsOnProjectsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TagsOnProjectsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TagsOnProjectsGroupByArgs['orderBy'] }
      : { orderBy?: TagsOnProjectsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TagsOnProjectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagsOnProjectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TagsOnProjects model
 */
readonly fields: TagsOnProjectsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TagsOnProjects.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TagsOnProjectsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  tag<T extends Prisma.TagDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TagDefaultArgs<ExtArgs>>): Prisma.Prisma__TagClient<runtime.Types.Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TagsOnProjects model
 */
export interface TagsOnProjectsFieldRefs {
  readonly projectId: Prisma.FieldRef<"TagsOnProjects", 'String'>
  readonly tagId: Prisma.FieldRef<"TagsOnProjects", 'String'>
  readonly createdAt: Prisma.FieldRef<"TagsOnProjects", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TagsOnProjects", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TagsOnProjects findUnique
 */
export type TagsOnProjectsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnProjects
   */
  select?: Prisma.TagsOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnProjects
   */
  omit?: Prisma.TagsOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnProjectsInclude<ExtArgs> | null
  /**
   * Filter, which TagsOnProjects to fetch.
   */
  where: Prisma.TagsOnProjectsWhereUniqueInput
}

/**
 * TagsOnProjects findUniqueOrThrow
 */
export type TagsOnProjectsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnProjects
   */
  select?: Prisma.TagsOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnProjects
   */
  omit?: Prisma.TagsOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnProjectsInclude<ExtArgs> | null
  /**
   * Filter, which TagsOnProjects to fetch.
   */
  where: Prisma.TagsOnProjectsWhereUniqueInput
}

/**
 * TagsOnProjects findFirst
 */
export type TagsOnProjectsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnProjects
   */
  select?: Prisma.TagsOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnProjects
   */
  omit?: Prisma.TagsOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnProjectsInclude<ExtArgs> | null
  /**
   * Filter, which TagsOnProjects to fetch.
   */
  where?: Prisma.TagsOnProjectsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TagsOnProjects to fetch.
   */
  orderBy?: Prisma.TagsOnProjectsOrderByWithRelationInput | Prisma.TagsOnProjectsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TagsOnProjects.
   */
  cursor?: Prisma.TagsOnProjectsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TagsOnProjects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TagsOnProjects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TagsOnProjects.
   */
  distinct?: Prisma.TagsOnProjectsScalarFieldEnum | Prisma.TagsOnProjectsScalarFieldEnum[]
}

/**
 * TagsOnProjects findFirstOrThrow
 */
export type TagsOnProjectsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnProjects
   */
  select?: Prisma.TagsOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnProjects
   */
  omit?: Prisma.TagsOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnProjectsInclude<ExtArgs> | null
  /**
   * Filter, which TagsOnProjects to fetch.
   */
  where?: Prisma.TagsOnProjectsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TagsOnProjects to fetch.
   */
  orderBy?: Prisma.TagsOnProjectsOrderByWithRelationInput | Prisma.TagsOnProjectsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TagsOnProjects.
   */
  cursor?: Prisma.TagsOnProjectsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TagsOnProjects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TagsOnProjects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TagsOnProjects.
   */
  distinct?: Prisma.TagsOnProjectsScalarFieldEnum | Prisma.TagsOnProjectsScalarFieldEnum[]
}

/**
 * TagsOnProjects findMany
 */
export type TagsOnProjectsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnProjects
   */
  select?: Prisma.TagsOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnProjects
   */
  omit?: Prisma.TagsOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnProjectsInclude<ExtArgs> | null
  /**
   * Filter, which TagsOnProjects to fetch.
   */
  where?: Prisma.TagsOnProjectsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TagsOnProjects to fetch.
   */
  orderBy?: Prisma.TagsOnProjectsOrderByWithRelationInput | Prisma.TagsOnProjectsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TagsOnProjects.
   */
  cursor?: Prisma.TagsOnProjectsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TagsOnProjects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TagsOnProjects.
   */
  skip?: number
  distinct?: Prisma.TagsOnProjectsScalarFieldEnum | Prisma.TagsOnProjectsScalarFieldEnum[]
}

/**
 * TagsOnProjects create
 */
export type TagsOnProjectsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnProjects
   */
  select?: Prisma.TagsOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnProjects
   */
  omit?: Prisma.TagsOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnProjectsInclude<ExtArgs> | null
  /**
   * The data needed to create a TagsOnProjects.
   */
  data: Prisma.XOR<Prisma.TagsOnProjectsCreateInput, Prisma.TagsOnProjectsUncheckedCreateInput>
}

/**
 * TagsOnProjects createMany
 */
export type TagsOnProjectsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TagsOnProjects.
   */
  data: Prisma.TagsOnProjectsCreateManyInput | Prisma.TagsOnProjectsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TagsOnProjects update
 */
export type TagsOnProjectsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnProjects
   */
  select?: Prisma.TagsOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnProjects
   */
  omit?: Prisma.TagsOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnProjectsInclude<ExtArgs> | null
  /**
   * The data needed to update a TagsOnProjects.
   */
  data: Prisma.XOR<Prisma.TagsOnProjectsUpdateInput, Prisma.TagsOnProjectsUncheckedUpdateInput>
  /**
   * Choose, which TagsOnProjects to update.
   */
  where: Prisma.TagsOnProjectsWhereUniqueInput
}

/**
 * TagsOnProjects updateMany
 */
export type TagsOnProjectsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TagsOnProjects.
   */
  data: Prisma.XOR<Prisma.TagsOnProjectsUpdateManyMutationInput, Prisma.TagsOnProjectsUncheckedUpdateManyInput>
  /**
   * Filter which TagsOnProjects to update
   */
  where?: Prisma.TagsOnProjectsWhereInput
  /**
   * Limit how many TagsOnProjects to update.
   */
  limit?: number
}

/**
 * TagsOnProjects upsert
 */
export type TagsOnProjectsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnProjects
   */
  select?: Prisma.TagsOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnProjects
   */
  omit?: Prisma.TagsOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnProjectsInclude<ExtArgs> | null
  /**
   * The filter to search for the TagsOnProjects to update in case it exists.
   */
  where: Prisma.TagsOnProjectsWhereUniqueInput
  /**
   * In case the TagsOnProjects found by the `where` argument doesn't exist, create a new TagsOnProjects with this data.
   */
  create: Prisma.XOR<Prisma.TagsOnProjectsCreateInput, Prisma.TagsOnProjectsUncheckedCreateInput>
  /**
   * In case the TagsOnProjects was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TagsOnProjectsUpdateInput, Prisma.TagsOnProjectsUncheckedUpdateInput>
}

/**
 * TagsOnProjects delete
 */
export type TagsOnProjectsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnProjects
   */
  select?: Prisma.TagsOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnProjects
   */
  omit?: Prisma.TagsOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnProjectsInclude<ExtArgs> | null
  /**
   * Filter which TagsOnProjects to delete.
   */
  where: Prisma.TagsOnProjectsWhereUniqueInput
}

/**
 * TagsOnProjects deleteMany
 */
export type TagsOnProjectsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TagsOnProjects to delete
   */
  where?: Prisma.TagsOnProjectsWhereInput
  /**
   * Limit how many TagsOnProjects to delete.
   */
  limit?: number
}

/**
 * TagsOnProjects without action
 */
export type TagsOnProjectsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnProjects
   */
  select?: Prisma.TagsOnProjectsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnProjects
   */
  omit?: Prisma.TagsOnProjectsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnProjectsInclude<ExtArgs> | null
}
