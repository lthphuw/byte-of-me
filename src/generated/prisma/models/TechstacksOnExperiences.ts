
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TechstacksOnExperiences` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model TechstacksOnExperiences
 * 
 */
export type TechstacksOnExperiencesModel = runtime.Types.Result.DefaultSelection<Prisma.$TechstacksOnExperiencesPayload>

export type AggregateTechstacksOnExperiences = {
  _count: TechstacksOnExperiencesCountAggregateOutputType | null
  _min: TechstacksOnExperiencesMinAggregateOutputType | null
  _max: TechstacksOnExperiencesMaxAggregateOutputType | null
}

export type TechstacksOnExperiencesMinAggregateOutputType = {
  experienceId: string | null
  techstackId: string | null
}

export type TechstacksOnExperiencesMaxAggregateOutputType = {
  experienceId: string | null
  techstackId: string | null
}

export type TechstacksOnExperiencesCountAggregateOutputType = {
  experienceId: number
  techstackId: number
  _all: number
}


export type TechstacksOnExperiencesMinAggregateInputType = {
  experienceId?: true
  techstackId?: true
}

export type TechstacksOnExperiencesMaxAggregateInputType = {
  experienceId?: true
  techstackId?: true
}

export type TechstacksOnExperiencesCountAggregateInputType = {
  experienceId?: true
  techstackId?: true
  _all?: true
}

export type TechstacksOnExperiencesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TechstacksOnExperiences to aggregate.
   */
  where?: Prisma.TechstacksOnExperiencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechstacksOnExperiences to fetch.
   */
  orderBy?: Prisma.TechstacksOnExperiencesOrderByWithRelationInput | Prisma.TechstacksOnExperiencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TechstacksOnExperiencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechstacksOnExperiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechstacksOnExperiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TechstacksOnExperiences
  **/
  _count?: true | TechstacksOnExperiencesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TechstacksOnExperiencesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TechstacksOnExperiencesMaxAggregateInputType
}

export type GetTechstacksOnExperiencesAggregateType<T extends TechstacksOnExperiencesAggregateArgs> = {
      [P in keyof T & keyof AggregateTechstacksOnExperiences]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTechstacksOnExperiences[P]>
    : Prisma.GetScalarType<T[P], AggregateTechstacksOnExperiences[P]>
}




export type TechstacksOnExperiencesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TechstacksOnExperiencesWhereInput
  orderBy?: Prisma.TechstacksOnExperiencesOrderByWithAggregationInput | Prisma.TechstacksOnExperiencesOrderByWithAggregationInput[]
  by: Prisma.TechstacksOnExperiencesScalarFieldEnum[] | Prisma.TechstacksOnExperiencesScalarFieldEnum
  having?: Prisma.TechstacksOnExperiencesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TechstacksOnExperiencesCountAggregateInputType | true
  _min?: TechstacksOnExperiencesMinAggregateInputType
  _max?: TechstacksOnExperiencesMaxAggregateInputType
}

export type TechstacksOnExperiencesGroupByOutputType = {
  experienceId: string
  techstackId: string
  _count: TechstacksOnExperiencesCountAggregateOutputType | null
  _min: TechstacksOnExperiencesMinAggregateOutputType | null
  _max: TechstacksOnExperiencesMaxAggregateOutputType | null
}

type GetTechstacksOnExperiencesGroupByPayload<T extends TechstacksOnExperiencesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TechstacksOnExperiencesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TechstacksOnExperiencesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TechstacksOnExperiencesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TechstacksOnExperiencesGroupByOutputType[P]>
      }
    >
  > 



export type TechstacksOnExperiencesWhereInput = {
  AND?: Prisma.TechstacksOnExperiencesWhereInput | Prisma.TechstacksOnExperiencesWhereInput[]
  OR?: Prisma.TechstacksOnExperiencesWhereInput[]
  NOT?: Prisma.TechstacksOnExperiencesWhereInput | Prisma.TechstacksOnExperiencesWhereInput[]
  experienceId?: Prisma.StringFilter<"TechstacksOnExperiences"> | string
  techstackId?: Prisma.StringFilter<"TechstacksOnExperiences"> | string
  experience?: Prisma.XOR<Prisma.ExperienceScalarRelationFilter, Prisma.ExperienceWhereInput>
  techstack?: Prisma.XOR<Prisma.TechStackScalarRelationFilter, Prisma.TechStackWhereInput>
}

export type TechstacksOnExperiencesOrderByWithRelationInput = {
  experienceId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
  experience?: Prisma.ExperienceOrderByWithRelationInput
  techstack?: Prisma.TechStackOrderByWithRelationInput
  _relevance?: Prisma.TechstacksOnExperiencesOrderByRelevanceInput
}

export type TechstacksOnExperiencesWhereUniqueInput = Prisma.AtLeast<{
  techstackId_experienceId?: Prisma.TechstacksOnExperiencesTechstackIdExperienceIdCompoundUniqueInput
  AND?: Prisma.TechstacksOnExperiencesWhereInput | Prisma.TechstacksOnExperiencesWhereInput[]
  OR?: Prisma.TechstacksOnExperiencesWhereInput[]
  NOT?: Prisma.TechstacksOnExperiencesWhereInput | Prisma.TechstacksOnExperiencesWhereInput[]
  experienceId?: Prisma.StringFilter<"TechstacksOnExperiences"> | string
  techstackId?: Prisma.StringFilter<"TechstacksOnExperiences"> | string
  experience?: Prisma.XOR<Prisma.ExperienceScalarRelationFilter, Prisma.ExperienceWhereInput>
  techstack?: Prisma.XOR<Prisma.TechStackScalarRelationFilter, Prisma.TechStackWhereInput>
}, "techstackId_experienceId">

export type TechstacksOnExperiencesOrderByWithAggregationInput = {
  experienceId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
  _count?: Prisma.TechstacksOnExperiencesCountOrderByAggregateInput
  _max?: Prisma.TechstacksOnExperiencesMaxOrderByAggregateInput
  _min?: Prisma.TechstacksOnExperiencesMinOrderByAggregateInput
}

export type TechstacksOnExperiencesScalarWhereWithAggregatesInput = {
  AND?: Prisma.TechstacksOnExperiencesScalarWhereWithAggregatesInput | Prisma.TechstacksOnExperiencesScalarWhereWithAggregatesInput[]
  OR?: Prisma.TechstacksOnExperiencesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TechstacksOnExperiencesScalarWhereWithAggregatesInput | Prisma.TechstacksOnExperiencesScalarWhereWithAggregatesInput[]
  experienceId?: Prisma.StringWithAggregatesFilter<"TechstacksOnExperiences"> | string
  techstackId?: Prisma.StringWithAggregatesFilter<"TechstacksOnExperiences"> | string
}

export type TechstacksOnExperiencesCreateInput = {
  experience: Prisma.ExperienceCreateNestedOneWithoutTechstacksInput
  techstack: Prisma.TechStackCreateNestedOneWithoutExperiencesInput
}

export type TechstacksOnExperiencesUncheckedCreateInput = {
  experienceId: string
  techstackId: string
}

export type TechstacksOnExperiencesUpdateInput = {
  experience?: Prisma.ExperienceUpdateOneRequiredWithoutTechstacksNestedInput
  techstack?: Prisma.TechStackUpdateOneRequiredWithoutExperiencesNestedInput
}

export type TechstacksOnExperiencesUncheckedUpdateInput = {
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
  techstackId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TechstacksOnExperiencesCreateManyInput = {
  experienceId: string
  techstackId: string
}

export type TechstacksOnExperiencesUpdateManyMutationInput = {

}

export type TechstacksOnExperiencesUncheckedUpdateManyInput = {
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
  techstackId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TechstacksOnExperiencesListRelationFilter = {
  every?: Prisma.TechstacksOnExperiencesWhereInput
  some?: Prisma.TechstacksOnExperiencesWhereInput
  none?: Prisma.TechstacksOnExperiencesWhereInput
}

export type TechstacksOnExperiencesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TechstacksOnExperiencesOrderByRelevanceInput = {
  fields: Prisma.TechstacksOnExperiencesOrderByRelevanceFieldEnum | Prisma.TechstacksOnExperiencesOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type TechstacksOnExperiencesTechstackIdExperienceIdCompoundUniqueInput = {
  techstackId: string
  experienceId: string
}

export type TechstacksOnExperiencesCountOrderByAggregateInput = {
  experienceId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
}

export type TechstacksOnExperiencesMaxOrderByAggregateInput = {
  experienceId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
}

export type TechstacksOnExperiencesMinOrderByAggregateInput = {
  experienceId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
}

export type TechstacksOnExperiencesCreateNestedManyWithoutTechstackInput = {
  create?: Prisma.XOR<Prisma.TechstacksOnExperiencesCreateWithoutTechstackInput, Prisma.TechstacksOnExperiencesUncheckedCreateWithoutTechstackInput> | Prisma.TechstacksOnExperiencesCreateWithoutTechstackInput[] | Prisma.TechstacksOnExperiencesUncheckedCreateWithoutTechstackInput[]
  connectOrCreate?: Prisma.TechstacksOnExperiencesCreateOrConnectWithoutTechstackInput | Prisma.TechstacksOnExperiencesCreateOrConnectWithoutTechstackInput[]
  createMany?: Prisma.TechstacksOnExperiencesCreateManyTechstackInputEnvelope
  connect?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
}

export type TechstacksOnExperiencesUncheckedCreateNestedManyWithoutTechstackInput = {
  create?: Prisma.XOR<Prisma.TechstacksOnExperiencesCreateWithoutTechstackInput, Prisma.TechstacksOnExperiencesUncheckedCreateWithoutTechstackInput> | Prisma.TechstacksOnExperiencesCreateWithoutTechstackInput[] | Prisma.TechstacksOnExperiencesUncheckedCreateWithoutTechstackInput[]
  connectOrCreate?: Prisma.TechstacksOnExperiencesCreateOrConnectWithoutTechstackInput | Prisma.TechstacksOnExperiencesCreateOrConnectWithoutTechstackInput[]
  createMany?: Prisma.TechstacksOnExperiencesCreateManyTechstackInputEnvelope
  connect?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
}

export type TechstacksOnExperiencesUpdateManyWithoutTechstackNestedInput = {
  create?: Prisma.XOR<Prisma.TechstacksOnExperiencesCreateWithoutTechstackInput, Prisma.TechstacksOnExperiencesUncheckedCreateWithoutTechstackInput> | Prisma.TechstacksOnExperiencesCreateWithoutTechstackInput[] | Prisma.TechstacksOnExperiencesUncheckedCreateWithoutTechstackInput[]
  connectOrCreate?: Prisma.TechstacksOnExperiencesCreateOrConnectWithoutTechstackInput | Prisma.TechstacksOnExperiencesCreateOrConnectWithoutTechstackInput[]
  upsert?: Prisma.TechstacksOnExperiencesUpsertWithWhereUniqueWithoutTechstackInput | Prisma.TechstacksOnExperiencesUpsertWithWhereUniqueWithoutTechstackInput[]
  createMany?: Prisma.TechstacksOnExperiencesCreateManyTechstackInputEnvelope
  set?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  disconnect?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  delete?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  connect?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  update?: Prisma.TechstacksOnExperiencesUpdateWithWhereUniqueWithoutTechstackInput | Prisma.TechstacksOnExperiencesUpdateWithWhereUniqueWithoutTechstackInput[]
  updateMany?: Prisma.TechstacksOnExperiencesUpdateManyWithWhereWithoutTechstackInput | Prisma.TechstacksOnExperiencesUpdateManyWithWhereWithoutTechstackInput[]
  deleteMany?: Prisma.TechstacksOnExperiencesScalarWhereInput | Prisma.TechstacksOnExperiencesScalarWhereInput[]
}

export type TechstacksOnExperiencesUncheckedUpdateManyWithoutTechstackNestedInput = {
  create?: Prisma.XOR<Prisma.TechstacksOnExperiencesCreateWithoutTechstackInput, Prisma.TechstacksOnExperiencesUncheckedCreateWithoutTechstackInput> | Prisma.TechstacksOnExperiencesCreateWithoutTechstackInput[] | Prisma.TechstacksOnExperiencesUncheckedCreateWithoutTechstackInput[]
  connectOrCreate?: Prisma.TechstacksOnExperiencesCreateOrConnectWithoutTechstackInput | Prisma.TechstacksOnExperiencesCreateOrConnectWithoutTechstackInput[]
  upsert?: Prisma.TechstacksOnExperiencesUpsertWithWhereUniqueWithoutTechstackInput | Prisma.TechstacksOnExperiencesUpsertWithWhereUniqueWithoutTechstackInput[]
  createMany?: Prisma.TechstacksOnExperiencesCreateManyTechstackInputEnvelope
  set?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  disconnect?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  delete?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  connect?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  update?: Prisma.TechstacksOnExperiencesUpdateWithWhereUniqueWithoutTechstackInput | Prisma.TechstacksOnExperiencesUpdateWithWhereUniqueWithoutTechstackInput[]
  updateMany?: Prisma.TechstacksOnExperiencesUpdateManyWithWhereWithoutTechstackInput | Prisma.TechstacksOnExperiencesUpdateManyWithWhereWithoutTechstackInput[]
  deleteMany?: Prisma.TechstacksOnExperiencesScalarWhereInput | Prisma.TechstacksOnExperiencesScalarWhereInput[]
}

export type TechstacksOnExperiencesCreateNestedManyWithoutExperienceInput = {
  create?: Prisma.XOR<Prisma.TechstacksOnExperiencesCreateWithoutExperienceInput, Prisma.TechstacksOnExperiencesUncheckedCreateWithoutExperienceInput> | Prisma.TechstacksOnExperiencesCreateWithoutExperienceInput[] | Prisma.TechstacksOnExperiencesUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.TechstacksOnExperiencesCreateOrConnectWithoutExperienceInput | Prisma.TechstacksOnExperiencesCreateOrConnectWithoutExperienceInput[]
  createMany?: Prisma.TechstacksOnExperiencesCreateManyExperienceInputEnvelope
  connect?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
}

export type TechstacksOnExperiencesUncheckedCreateNestedManyWithoutExperienceInput = {
  create?: Prisma.XOR<Prisma.TechstacksOnExperiencesCreateWithoutExperienceInput, Prisma.TechstacksOnExperiencesUncheckedCreateWithoutExperienceInput> | Prisma.TechstacksOnExperiencesCreateWithoutExperienceInput[] | Prisma.TechstacksOnExperiencesUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.TechstacksOnExperiencesCreateOrConnectWithoutExperienceInput | Prisma.TechstacksOnExperiencesCreateOrConnectWithoutExperienceInput[]
  createMany?: Prisma.TechstacksOnExperiencesCreateManyExperienceInputEnvelope
  connect?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
}

export type TechstacksOnExperiencesUpdateManyWithoutExperienceNestedInput = {
  create?: Prisma.XOR<Prisma.TechstacksOnExperiencesCreateWithoutExperienceInput, Prisma.TechstacksOnExperiencesUncheckedCreateWithoutExperienceInput> | Prisma.TechstacksOnExperiencesCreateWithoutExperienceInput[] | Prisma.TechstacksOnExperiencesUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.TechstacksOnExperiencesCreateOrConnectWithoutExperienceInput | Prisma.TechstacksOnExperiencesCreateOrConnectWithoutExperienceInput[]
  upsert?: Prisma.TechstacksOnExperiencesUpsertWithWhereUniqueWithoutExperienceInput | Prisma.TechstacksOnExperiencesUpsertWithWhereUniqueWithoutExperienceInput[]
  createMany?: Prisma.TechstacksOnExperiencesCreateManyExperienceInputEnvelope
  set?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  disconnect?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  delete?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  connect?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  update?: Prisma.TechstacksOnExperiencesUpdateWithWhereUniqueWithoutExperienceInput | Prisma.TechstacksOnExperiencesUpdateWithWhereUniqueWithoutExperienceInput[]
  updateMany?: Prisma.TechstacksOnExperiencesUpdateManyWithWhereWithoutExperienceInput | Prisma.TechstacksOnExperiencesUpdateManyWithWhereWithoutExperienceInput[]
  deleteMany?: Prisma.TechstacksOnExperiencesScalarWhereInput | Prisma.TechstacksOnExperiencesScalarWhereInput[]
}

export type TechstacksOnExperiencesUncheckedUpdateManyWithoutExperienceNestedInput = {
  create?: Prisma.XOR<Prisma.TechstacksOnExperiencesCreateWithoutExperienceInput, Prisma.TechstacksOnExperiencesUncheckedCreateWithoutExperienceInput> | Prisma.TechstacksOnExperiencesCreateWithoutExperienceInput[] | Prisma.TechstacksOnExperiencesUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.TechstacksOnExperiencesCreateOrConnectWithoutExperienceInput | Prisma.TechstacksOnExperiencesCreateOrConnectWithoutExperienceInput[]
  upsert?: Prisma.TechstacksOnExperiencesUpsertWithWhereUniqueWithoutExperienceInput | Prisma.TechstacksOnExperiencesUpsertWithWhereUniqueWithoutExperienceInput[]
  createMany?: Prisma.TechstacksOnExperiencesCreateManyExperienceInputEnvelope
  set?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  disconnect?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  delete?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  connect?: Prisma.TechstacksOnExperiencesWhereUniqueInput | Prisma.TechstacksOnExperiencesWhereUniqueInput[]
  update?: Prisma.TechstacksOnExperiencesUpdateWithWhereUniqueWithoutExperienceInput | Prisma.TechstacksOnExperiencesUpdateWithWhereUniqueWithoutExperienceInput[]
  updateMany?: Prisma.TechstacksOnExperiencesUpdateManyWithWhereWithoutExperienceInput | Prisma.TechstacksOnExperiencesUpdateManyWithWhereWithoutExperienceInput[]
  deleteMany?: Prisma.TechstacksOnExperiencesScalarWhereInput | Prisma.TechstacksOnExperiencesScalarWhereInput[]
}

export type TechstacksOnExperiencesCreateWithoutTechstackInput = {
  experience: Prisma.ExperienceCreateNestedOneWithoutTechstacksInput
}

export type TechstacksOnExperiencesUncheckedCreateWithoutTechstackInput = {
  experienceId: string
}

export type TechstacksOnExperiencesCreateOrConnectWithoutTechstackInput = {
  where: Prisma.TechstacksOnExperiencesWhereUniqueInput
  create: Prisma.XOR<Prisma.TechstacksOnExperiencesCreateWithoutTechstackInput, Prisma.TechstacksOnExperiencesUncheckedCreateWithoutTechstackInput>
}

export type TechstacksOnExperiencesCreateManyTechstackInputEnvelope = {
  data: Prisma.TechstacksOnExperiencesCreateManyTechstackInput | Prisma.TechstacksOnExperiencesCreateManyTechstackInput[]
  skipDuplicates?: boolean
}

export type TechstacksOnExperiencesUpsertWithWhereUniqueWithoutTechstackInput = {
  where: Prisma.TechstacksOnExperiencesWhereUniqueInput
  update: Prisma.XOR<Prisma.TechstacksOnExperiencesUpdateWithoutTechstackInput, Prisma.TechstacksOnExperiencesUncheckedUpdateWithoutTechstackInput>
  create: Prisma.XOR<Prisma.TechstacksOnExperiencesCreateWithoutTechstackInput, Prisma.TechstacksOnExperiencesUncheckedCreateWithoutTechstackInput>
}

export type TechstacksOnExperiencesUpdateWithWhereUniqueWithoutTechstackInput = {
  where: Prisma.TechstacksOnExperiencesWhereUniqueInput
  data: Prisma.XOR<Prisma.TechstacksOnExperiencesUpdateWithoutTechstackInput, Prisma.TechstacksOnExperiencesUncheckedUpdateWithoutTechstackInput>
}

export type TechstacksOnExperiencesUpdateManyWithWhereWithoutTechstackInput = {
  where: Prisma.TechstacksOnExperiencesScalarWhereInput
  data: Prisma.XOR<Prisma.TechstacksOnExperiencesUpdateManyMutationInput, Prisma.TechstacksOnExperiencesUncheckedUpdateManyWithoutTechstackInput>
}

export type TechstacksOnExperiencesScalarWhereInput = {
  AND?: Prisma.TechstacksOnExperiencesScalarWhereInput | Prisma.TechstacksOnExperiencesScalarWhereInput[]
  OR?: Prisma.TechstacksOnExperiencesScalarWhereInput[]
  NOT?: Prisma.TechstacksOnExperiencesScalarWhereInput | Prisma.TechstacksOnExperiencesScalarWhereInput[]
  experienceId?: Prisma.StringFilter<"TechstacksOnExperiences"> | string
  techstackId?: Prisma.StringFilter<"TechstacksOnExperiences"> | string
}

export type TechstacksOnExperiencesCreateWithoutExperienceInput = {
  techstack: Prisma.TechStackCreateNestedOneWithoutExperiencesInput
}

export type TechstacksOnExperiencesUncheckedCreateWithoutExperienceInput = {
  techstackId: string
}

export type TechstacksOnExperiencesCreateOrConnectWithoutExperienceInput = {
  where: Prisma.TechstacksOnExperiencesWhereUniqueInput
  create: Prisma.XOR<Prisma.TechstacksOnExperiencesCreateWithoutExperienceInput, Prisma.TechstacksOnExperiencesUncheckedCreateWithoutExperienceInput>
}

export type TechstacksOnExperiencesCreateManyExperienceInputEnvelope = {
  data: Prisma.TechstacksOnExperiencesCreateManyExperienceInput | Prisma.TechstacksOnExperiencesCreateManyExperienceInput[]
  skipDuplicates?: boolean
}

export type TechstacksOnExperiencesUpsertWithWhereUniqueWithoutExperienceInput = {
  where: Prisma.TechstacksOnExperiencesWhereUniqueInput
  update: Prisma.XOR<Prisma.TechstacksOnExperiencesUpdateWithoutExperienceInput, Prisma.TechstacksOnExperiencesUncheckedUpdateWithoutExperienceInput>
  create: Prisma.XOR<Prisma.TechstacksOnExperiencesCreateWithoutExperienceInput, Prisma.TechstacksOnExperiencesUncheckedCreateWithoutExperienceInput>
}

export type TechstacksOnExperiencesUpdateWithWhereUniqueWithoutExperienceInput = {
  where: Prisma.TechstacksOnExperiencesWhereUniqueInput
  data: Prisma.XOR<Prisma.TechstacksOnExperiencesUpdateWithoutExperienceInput, Prisma.TechstacksOnExperiencesUncheckedUpdateWithoutExperienceInput>
}

export type TechstacksOnExperiencesUpdateManyWithWhereWithoutExperienceInput = {
  where: Prisma.TechstacksOnExperiencesScalarWhereInput
  data: Prisma.XOR<Prisma.TechstacksOnExperiencesUpdateManyMutationInput, Prisma.TechstacksOnExperiencesUncheckedUpdateManyWithoutExperienceInput>
}

export type TechstacksOnExperiencesCreateManyTechstackInput = {
  experienceId: string
}

export type TechstacksOnExperiencesUpdateWithoutTechstackInput = {
  experience?: Prisma.ExperienceUpdateOneRequiredWithoutTechstacksNestedInput
}

export type TechstacksOnExperiencesUncheckedUpdateWithoutTechstackInput = {
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TechstacksOnExperiencesUncheckedUpdateManyWithoutTechstackInput = {
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TechstacksOnExperiencesCreateManyExperienceInput = {
  techstackId: string
}

export type TechstacksOnExperiencesUpdateWithoutExperienceInput = {
  techstack?: Prisma.TechStackUpdateOneRequiredWithoutExperiencesNestedInput
}

export type TechstacksOnExperiencesUncheckedUpdateWithoutExperienceInput = {
  techstackId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TechstacksOnExperiencesUncheckedUpdateManyWithoutExperienceInput = {
  techstackId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type TechstacksOnExperiencesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  experienceId?: boolean
  techstackId?: boolean
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
  techstack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}, ExtArgs["result"]["techstacksOnExperiences"]>



export type TechstacksOnExperiencesSelectScalar = {
  experienceId?: boolean
  techstackId?: boolean
}

export type TechstacksOnExperiencesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"experienceId" | "techstackId", ExtArgs["result"]["techstacksOnExperiences"]>
export type TechstacksOnExperiencesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
  techstack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}

export type $TechstacksOnExperiencesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TechstacksOnExperiences"
  objects: {
    experience: Prisma.$ExperiencePayload<ExtArgs>
    techstack: Prisma.$TechStackPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    experienceId: string
    techstackId: string
  }, ExtArgs["result"]["techstacksOnExperiences"]>
  composites: {}
}

export type TechstacksOnExperiencesGetPayload<S extends boolean | null | undefined | TechstacksOnExperiencesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TechstacksOnExperiencesPayload, S>

export type TechstacksOnExperiencesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TechstacksOnExperiencesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TechstacksOnExperiencesCountAggregateInputType | true
  }

export interface TechstacksOnExperiencesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TechstacksOnExperiences'], meta: { name: 'TechstacksOnExperiences' } }
  /**
   * Find zero or one TechstacksOnExperiences that matches the filter.
   * @param {TechstacksOnExperiencesFindUniqueArgs} args - Arguments to find a TechstacksOnExperiences
   * @example
   * // Get one TechstacksOnExperiences
   * const techstacksOnExperiences = await prisma.techstacksOnExperiences.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TechstacksOnExperiencesFindUniqueArgs>(args: Prisma.SelectSubset<T, TechstacksOnExperiencesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TechstacksOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechstacksOnExperiencesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TechstacksOnExperiences that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TechstacksOnExperiencesFindUniqueOrThrowArgs} args - Arguments to find a TechstacksOnExperiences
   * @example
   * // Get one TechstacksOnExperiences
   * const techstacksOnExperiences = await prisma.techstacksOnExperiences.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TechstacksOnExperiencesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TechstacksOnExperiencesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TechstacksOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechstacksOnExperiencesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TechstacksOnExperiences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechstacksOnExperiencesFindFirstArgs} args - Arguments to find a TechstacksOnExperiences
   * @example
   * // Get one TechstacksOnExperiences
   * const techstacksOnExperiences = await prisma.techstacksOnExperiences.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TechstacksOnExperiencesFindFirstArgs>(args?: Prisma.SelectSubset<T, TechstacksOnExperiencesFindFirstArgs<ExtArgs>>): Prisma.Prisma__TechstacksOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechstacksOnExperiencesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TechstacksOnExperiences that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechstacksOnExperiencesFindFirstOrThrowArgs} args - Arguments to find a TechstacksOnExperiences
   * @example
   * // Get one TechstacksOnExperiences
   * const techstacksOnExperiences = await prisma.techstacksOnExperiences.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TechstacksOnExperiencesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TechstacksOnExperiencesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TechstacksOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechstacksOnExperiencesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TechstacksOnExperiences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechstacksOnExperiencesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TechstacksOnExperiences
   * const techstacksOnExperiences = await prisma.techstacksOnExperiences.findMany()
   * 
   * // Get first 10 TechstacksOnExperiences
   * const techstacksOnExperiences = await prisma.techstacksOnExperiences.findMany({ take: 10 })
   * 
   * // Only select the `experienceId`
   * const techstacksOnExperiencesWithExperienceIdOnly = await prisma.techstacksOnExperiences.findMany({ select: { experienceId: true } })
   * 
   */
  findMany<T extends TechstacksOnExperiencesFindManyArgs>(args?: Prisma.SelectSubset<T, TechstacksOnExperiencesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechstacksOnExperiencesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TechstacksOnExperiences.
   * @param {TechstacksOnExperiencesCreateArgs} args - Arguments to create a TechstacksOnExperiences.
   * @example
   * // Create one TechstacksOnExperiences
   * const TechstacksOnExperiences = await prisma.techstacksOnExperiences.create({
   *   data: {
   *     // ... data to create a TechstacksOnExperiences
   *   }
   * })
   * 
   */
  create<T extends TechstacksOnExperiencesCreateArgs>(args: Prisma.SelectSubset<T, TechstacksOnExperiencesCreateArgs<ExtArgs>>): Prisma.Prisma__TechstacksOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechstacksOnExperiencesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TechstacksOnExperiences.
   * @param {TechstacksOnExperiencesCreateManyArgs} args - Arguments to create many TechstacksOnExperiences.
   * @example
   * // Create many TechstacksOnExperiences
   * const techstacksOnExperiences = await prisma.techstacksOnExperiences.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TechstacksOnExperiencesCreateManyArgs>(args?: Prisma.SelectSubset<T, TechstacksOnExperiencesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a TechstacksOnExperiences.
   * @param {TechstacksOnExperiencesDeleteArgs} args - Arguments to delete one TechstacksOnExperiences.
   * @example
   * // Delete one TechstacksOnExperiences
   * const TechstacksOnExperiences = await prisma.techstacksOnExperiences.delete({
   *   where: {
   *     // ... filter to delete one TechstacksOnExperiences
   *   }
   * })
   * 
   */
  delete<T extends TechstacksOnExperiencesDeleteArgs>(args: Prisma.SelectSubset<T, TechstacksOnExperiencesDeleteArgs<ExtArgs>>): Prisma.Prisma__TechstacksOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechstacksOnExperiencesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TechstacksOnExperiences.
   * @param {TechstacksOnExperiencesUpdateArgs} args - Arguments to update one TechstacksOnExperiences.
   * @example
   * // Update one TechstacksOnExperiences
   * const techstacksOnExperiences = await prisma.techstacksOnExperiences.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TechstacksOnExperiencesUpdateArgs>(args: Prisma.SelectSubset<T, TechstacksOnExperiencesUpdateArgs<ExtArgs>>): Prisma.Prisma__TechstacksOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechstacksOnExperiencesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TechstacksOnExperiences.
   * @param {TechstacksOnExperiencesDeleteManyArgs} args - Arguments to filter TechstacksOnExperiences to delete.
   * @example
   * // Delete a few TechstacksOnExperiences
   * const { count } = await prisma.techstacksOnExperiences.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TechstacksOnExperiencesDeleteManyArgs>(args?: Prisma.SelectSubset<T, TechstacksOnExperiencesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TechstacksOnExperiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechstacksOnExperiencesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TechstacksOnExperiences
   * const techstacksOnExperiences = await prisma.techstacksOnExperiences.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TechstacksOnExperiencesUpdateManyArgs>(args: Prisma.SelectSubset<T, TechstacksOnExperiencesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one TechstacksOnExperiences.
   * @param {TechstacksOnExperiencesUpsertArgs} args - Arguments to update or create a TechstacksOnExperiences.
   * @example
   * // Update or create a TechstacksOnExperiences
   * const techstacksOnExperiences = await prisma.techstacksOnExperiences.upsert({
   *   create: {
   *     // ... data to create a TechstacksOnExperiences
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TechstacksOnExperiences we want to update
   *   }
   * })
   */
  upsert<T extends TechstacksOnExperiencesUpsertArgs>(args: Prisma.SelectSubset<T, TechstacksOnExperiencesUpsertArgs<ExtArgs>>): Prisma.Prisma__TechstacksOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechstacksOnExperiencesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TechstacksOnExperiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechstacksOnExperiencesCountArgs} args - Arguments to filter TechstacksOnExperiences to count.
   * @example
   * // Count the number of TechstacksOnExperiences
   * const count = await prisma.techstacksOnExperiences.count({
   *   where: {
   *     // ... the filter for the TechstacksOnExperiences we want to count
   *   }
   * })
  **/
  count<T extends TechstacksOnExperiencesCountArgs>(
    args?: Prisma.Subset<T, TechstacksOnExperiencesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TechstacksOnExperiencesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TechstacksOnExperiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechstacksOnExperiencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TechstacksOnExperiencesAggregateArgs>(args: Prisma.Subset<T, TechstacksOnExperiencesAggregateArgs>): Prisma.PrismaPromise<GetTechstacksOnExperiencesAggregateType<T>>

  /**
   * Group by TechstacksOnExperiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechstacksOnExperiencesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TechstacksOnExperiencesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TechstacksOnExperiencesGroupByArgs['orderBy'] }
      : { orderBy?: TechstacksOnExperiencesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TechstacksOnExperiencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTechstacksOnExperiencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TechstacksOnExperiences model
 */
readonly fields: TechstacksOnExperiencesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TechstacksOnExperiences.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TechstacksOnExperiencesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  experience<T extends Prisma.ExperienceDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ExperienceDefaultArgs<ExtArgs>>): Prisma.Prisma__ExperienceClient<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  techstack<T extends Prisma.TechStackDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TechStackDefaultArgs<ExtArgs>>): Prisma.Prisma__TechStackClient<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TechstacksOnExperiences model
 */
export interface TechstacksOnExperiencesFieldRefs {
  readonly experienceId: Prisma.FieldRef<"TechstacksOnExperiences", 'String'>
  readonly techstackId: Prisma.FieldRef<"TechstacksOnExperiences", 'String'>
}
    

// Custom InputTypes
/**
 * TechstacksOnExperiences findUnique
 */
export type TechstacksOnExperiencesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechstacksOnExperiences
   */
  select?: Prisma.TechstacksOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechstacksOnExperiences
   */
  omit?: Prisma.TechstacksOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechstacksOnExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which TechstacksOnExperiences to fetch.
   */
  where: Prisma.TechstacksOnExperiencesWhereUniqueInput
}

/**
 * TechstacksOnExperiences findUniqueOrThrow
 */
export type TechstacksOnExperiencesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechstacksOnExperiences
   */
  select?: Prisma.TechstacksOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechstacksOnExperiences
   */
  omit?: Prisma.TechstacksOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechstacksOnExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which TechstacksOnExperiences to fetch.
   */
  where: Prisma.TechstacksOnExperiencesWhereUniqueInput
}

/**
 * TechstacksOnExperiences findFirst
 */
export type TechstacksOnExperiencesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechstacksOnExperiences
   */
  select?: Prisma.TechstacksOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechstacksOnExperiences
   */
  omit?: Prisma.TechstacksOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechstacksOnExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which TechstacksOnExperiences to fetch.
   */
  where?: Prisma.TechstacksOnExperiencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechstacksOnExperiences to fetch.
   */
  orderBy?: Prisma.TechstacksOnExperiencesOrderByWithRelationInput | Prisma.TechstacksOnExperiencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TechstacksOnExperiences.
   */
  cursor?: Prisma.TechstacksOnExperiencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechstacksOnExperiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechstacksOnExperiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TechstacksOnExperiences.
   */
  distinct?: Prisma.TechstacksOnExperiencesScalarFieldEnum | Prisma.TechstacksOnExperiencesScalarFieldEnum[]
}

/**
 * TechstacksOnExperiences findFirstOrThrow
 */
export type TechstacksOnExperiencesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechstacksOnExperiences
   */
  select?: Prisma.TechstacksOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechstacksOnExperiences
   */
  omit?: Prisma.TechstacksOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechstacksOnExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which TechstacksOnExperiences to fetch.
   */
  where?: Prisma.TechstacksOnExperiencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechstacksOnExperiences to fetch.
   */
  orderBy?: Prisma.TechstacksOnExperiencesOrderByWithRelationInput | Prisma.TechstacksOnExperiencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TechstacksOnExperiences.
   */
  cursor?: Prisma.TechstacksOnExperiencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechstacksOnExperiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechstacksOnExperiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TechstacksOnExperiences.
   */
  distinct?: Prisma.TechstacksOnExperiencesScalarFieldEnum | Prisma.TechstacksOnExperiencesScalarFieldEnum[]
}

/**
 * TechstacksOnExperiences findMany
 */
export type TechstacksOnExperiencesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechstacksOnExperiences
   */
  select?: Prisma.TechstacksOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechstacksOnExperiences
   */
  omit?: Prisma.TechstacksOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechstacksOnExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which TechstacksOnExperiences to fetch.
   */
  where?: Prisma.TechstacksOnExperiencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechstacksOnExperiences to fetch.
   */
  orderBy?: Prisma.TechstacksOnExperiencesOrderByWithRelationInput | Prisma.TechstacksOnExperiencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TechstacksOnExperiences.
   */
  cursor?: Prisma.TechstacksOnExperiencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechstacksOnExperiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechstacksOnExperiences.
   */
  skip?: number
  distinct?: Prisma.TechstacksOnExperiencesScalarFieldEnum | Prisma.TechstacksOnExperiencesScalarFieldEnum[]
}

/**
 * TechstacksOnExperiences create
 */
export type TechstacksOnExperiencesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechstacksOnExperiences
   */
  select?: Prisma.TechstacksOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechstacksOnExperiences
   */
  omit?: Prisma.TechstacksOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechstacksOnExperiencesInclude<ExtArgs> | null
  /**
   * The data needed to create a TechstacksOnExperiences.
   */
  data: Prisma.XOR<Prisma.TechstacksOnExperiencesCreateInput, Prisma.TechstacksOnExperiencesUncheckedCreateInput>
}

/**
 * TechstacksOnExperiences createMany
 */
export type TechstacksOnExperiencesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TechstacksOnExperiences.
   */
  data: Prisma.TechstacksOnExperiencesCreateManyInput | Prisma.TechstacksOnExperiencesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TechstacksOnExperiences update
 */
export type TechstacksOnExperiencesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechstacksOnExperiences
   */
  select?: Prisma.TechstacksOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechstacksOnExperiences
   */
  omit?: Prisma.TechstacksOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechstacksOnExperiencesInclude<ExtArgs> | null
  /**
   * The data needed to update a TechstacksOnExperiences.
   */
  data: Prisma.XOR<Prisma.TechstacksOnExperiencesUpdateInput, Prisma.TechstacksOnExperiencesUncheckedUpdateInput>
  /**
   * Choose, which TechstacksOnExperiences to update.
   */
  where: Prisma.TechstacksOnExperiencesWhereUniqueInput
}

/**
 * TechstacksOnExperiences updateMany
 */
export type TechstacksOnExperiencesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TechstacksOnExperiences.
   */
  data: Prisma.XOR<Prisma.TechstacksOnExperiencesUpdateManyMutationInput, Prisma.TechstacksOnExperiencesUncheckedUpdateManyInput>
  /**
   * Filter which TechstacksOnExperiences to update
   */
  where?: Prisma.TechstacksOnExperiencesWhereInput
  /**
   * Limit how many TechstacksOnExperiences to update.
   */
  limit?: number
}

/**
 * TechstacksOnExperiences upsert
 */
export type TechstacksOnExperiencesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechstacksOnExperiences
   */
  select?: Prisma.TechstacksOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechstacksOnExperiences
   */
  omit?: Prisma.TechstacksOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechstacksOnExperiencesInclude<ExtArgs> | null
  /**
   * The filter to search for the TechstacksOnExperiences to update in case it exists.
   */
  where: Prisma.TechstacksOnExperiencesWhereUniqueInput
  /**
   * In case the TechstacksOnExperiences found by the `where` argument doesn't exist, create a new TechstacksOnExperiences with this data.
   */
  create: Prisma.XOR<Prisma.TechstacksOnExperiencesCreateInput, Prisma.TechstacksOnExperiencesUncheckedCreateInput>
  /**
   * In case the TechstacksOnExperiences was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TechstacksOnExperiencesUpdateInput, Prisma.TechstacksOnExperiencesUncheckedUpdateInput>
}

/**
 * TechstacksOnExperiences delete
 */
export type TechstacksOnExperiencesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechstacksOnExperiences
   */
  select?: Prisma.TechstacksOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechstacksOnExperiences
   */
  omit?: Prisma.TechstacksOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechstacksOnExperiencesInclude<ExtArgs> | null
  /**
   * Filter which TechstacksOnExperiences to delete.
   */
  where: Prisma.TechstacksOnExperiencesWhereUniqueInput
}

/**
 * TechstacksOnExperiences deleteMany
 */
export type TechstacksOnExperiencesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TechstacksOnExperiences to delete
   */
  where?: Prisma.TechstacksOnExperiencesWhereInput
  /**
   * Limit how many TechstacksOnExperiences to delete.
   */
  limit?: number
}

/**
 * TechstacksOnExperiences without action
 */
export type TechstacksOnExperiencesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechstacksOnExperiences
   */
  select?: Prisma.TechstacksOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechstacksOnExperiences
   */
  omit?: Prisma.TechstacksOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechstacksOnExperiencesInclude<ExtArgs> | null
}
