
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models.ts"
import { type PrismaClient } from "./class.ts"

export type * from '../models.ts'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.10.0
 * Query Engine version: aee10d5a411e4360c6d3445ce4810ca65adbf3e8
 */
export const prismaVersion: PrismaVersion = {
  client: "6.10.0",
  engine: "aee10d5a411e4360c6d3445ce4810ca65adbf3e8"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  User: 'User',
  UserBannerImage: 'UserBannerImage',
  Education: 'Education',
  EducationSubItem: 'EducationSubItem',
  TechStack: 'TechStack',
  Experience: 'Experience',
  TechstacksOnExperiences: 'TechstacksOnExperiences',
  ExperienceRole: 'ExperienceRole',
  Task: 'Task',
  Project: 'Project',
  TechStackOnProjects: 'TechStackOnProjects',
  TagsOnProjects: 'TagsOnProjects',
  Blog: 'Blog',
  Tag: 'Tag',
  BlogTag: 'BlogTag',
  Translation: 'Translation'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "user" | "userBannerImage" | "education" | "educationSubItem" | "techStack" | "experience" | "techstacksOnExperiences" | "experienceRole" | "task" | "project" | "techStackOnProjects" | "tagsOnProjects" | "blog" | "tag" | "blogTag" | "translation"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    UserBannerImage: {
      payload: Prisma.$UserBannerImagePayload<ExtArgs>
      fields: Prisma.UserBannerImageFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserBannerImageFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBannerImagePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserBannerImageFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBannerImagePayload>
        }
        findFirst: {
          args: Prisma.UserBannerImageFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBannerImagePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserBannerImageFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBannerImagePayload>
        }
        findMany: {
          args: Prisma.UserBannerImageFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBannerImagePayload>[]
        }
        create: {
          args: Prisma.UserBannerImageCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBannerImagePayload>
        }
        createMany: {
          args: Prisma.UserBannerImageCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.UserBannerImageDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBannerImagePayload>
        }
        update: {
          args: Prisma.UserBannerImageUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBannerImagePayload>
        }
        deleteMany: {
          args: Prisma.UserBannerImageDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserBannerImageUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.UserBannerImageUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBannerImagePayload>
        }
        aggregate: {
          args: Prisma.UserBannerImageAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserBannerImage>
        }
        groupBy: {
          args: Prisma.UserBannerImageGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserBannerImageGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserBannerImageCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserBannerImageCountAggregateOutputType> | number
        }
      }
    }
    Education: {
      payload: Prisma.$EducationPayload<ExtArgs>
      fields: Prisma.EducationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EducationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EducationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload>
        }
        findFirst: {
          args: Prisma.EducationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EducationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload>
        }
        findMany: {
          args: Prisma.EducationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload>[]
        }
        create: {
          args: Prisma.EducationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload>
        }
        createMany: {
          args: Prisma.EducationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.EducationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload>
        }
        update: {
          args: Prisma.EducationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload>
        }
        deleteMany: {
          args: Prisma.EducationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EducationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.EducationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload>
        }
        aggregate: {
          args: Prisma.EducationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEducation>
        }
        groupBy: {
          args: Prisma.EducationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EducationGroupByOutputType>[]
        }
        count: {
          args: Prisma.EducationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EducationCountAggregateOutputType> | number
        }
      }
    }
    EducationSubItem: {
      payload: Prisma.$EducationSubItemPayload<ExtArgs>
      fields: Prisma.EducationSubItemFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EducationSubItemFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationSubItemPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EducationSubItemFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationSubItemPayload>
        }
        findFirst: {
          args: Prisma.EducationSubItemFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationSubItemPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EducationSubItemFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationSubItemPayload>
        }
        findMany: {
          args: Prisma.EducationSubItemFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationSubItemPayload>[]
        }
        create: {
          args: Prisma.EducationSubItemCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationSubItemPayload>
        }
        createMany: {
          args: Prisma.EducationSubItemCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.EducationSubItemDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationSubItemPayload>
        }
        update: {
          args: Prisma.EducationSubItemUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationSubItemPayload>
        }
        deleteMany: {
          args: Prisma.EducationSubItemDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EducationSubItemUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.EducationSubItemUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationSubItemPayload>
        }
        aggregate: {
          args: Prisma.EducationSubItemAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEducationSubItem>
        }
        groupBy: {
          args: Prisma.EducationSubItemGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EducationSubItemGroupByOutputType>[]
        }
        count: {
          args: Prisma.EducationSubItemCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EducationSubItemCountAggregateOutputType> | number
        }
      }
    }
    TechStack: {
      payload: Prisma.$TechStackPayload<ExtArgs>
      fields: Prisma.TechStackFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TechStackFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TechStackFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackPayload>
        }
        findFirst: {
          args: Prisma.TechStackFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TechStackFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackPayload>
        }
        findMany: {
          args: Prisma.TechStackFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackPayload>[]
        }
        create: {
          args: Prisma.TechStackCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackPayload>
        }
        createMany: {
          args: Prisma.TechStackCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.TechStackDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackPayload>
        }
        update: {
          args: Prisma.TechStackUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackPayload>
        }
        deleteMany: {
          args: Prisma.TechStackDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TechStackUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.TechStackUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackPayload>
        }
        aggregate: {
          args: Prisma.TechStackAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTechStack>
        }
        groupBy: {
          args: Prisma.TechStackGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TechStackGroupByOutputType>[]
        }
        count: {
          args: Prisma.TechStackCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TechStackCountAggregateOutputType> | number
        }
      }
    }
    Experience: {
      payload: Prisma.$ExperiencePayload<ExtArgs>
      fields: Prisma.ExperienceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ExperienceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ExperienceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload>
        }
        findFirst: {
          args: Prisma.ExperienceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ExperienceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload>
        }
        findMany: {
          args: Prisma.ExperienceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload>[]
        }
        create: {
          args: Prisma.ExperienceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload>
        }
        createMany: {
          args: Prisma.ExperienceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.ExperienceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload>
        }
        update: {
          args: Prisma.ExperienceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload>
        }
        deleteMany: {
          args: Prisma.ExperienceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ExperienceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.ExperienceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload>
        }
        aggregate: {
          args: Prisma.ExperienceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateExperience>
        }
        groupBy: {
          args: Prisma.ExperienceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ExperienceGroupByOutputType>[]
        }
        count: {
          args: Prisma.ExperienceCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ExperienceCountAggregateOutputType> | number
        }
      }
    }
    TechstacksOnExperiences: {
      payload: Prisma.$TechstacksOnExperiencesPayload<ExtArgs>
      fields: Prisma.TechstacksOnExperiencesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TechstacksOnExperiencesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechstacksOnExperiencesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TechstacksOnExperiencesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechstacksOnExperiencesPayload>
        }
        findFirst: {
          args: Prisma.TechstacksOnExperiencesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechstacksOnExperiencesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TechstacksOnExperiencesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechstacksOnExperiencesPayload>
        }
        findMany: {
          args: Prisma.TechstacksOnExperiencesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechstacksOnExperiencesPayload>[]
        }
        create: {
          args: Prisma.TechstacksOnExperiencesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechstacksOnExperiencesPayload>
        }
        createMany: {
          args: Prisma.TechstacksOnExperiencesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.TechstacksOnExperiencesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechstacksOnExperiencesPayload>
        }
        update: {
          args: Prisma.TechstacksOnExperiencesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechstacksOnExperiencesPayload>
        }
        deleteMany: {
          args: Prisma.TechstacksOnExperiencesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TechstacksOnExperiencesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.TechstacksOnExperiencesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechstacksOnExperiencesPayload>
        }
        aggregate: {
          args: Prisma.TechstacksOnExperiencesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTechstacksOnExperiences>
        }
        groupBy: {
          args: Prisma.TechstacksOnExperiencesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TechstacksOnExperiencesGroupByOutputType>[]
        }
        count: {
          args: Prisma.TechstacksOnExperiencesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TechstacksOnExperiencesCountAggregateOutputType> | number
        }
      }
    }
    ExperienceRole: {
      payload: Prisma.$ExperienceRolePayload<ExtArgs>
      fields: Prisma.ExperienceRoleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ExperienceRoleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperienceRolePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ExperienceRoleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperienceRolePayload>
        }
        findFirst: {
          args: Prisma.ExperienceRoleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperienceRolePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ExperienceRoleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperienceRolePayload>
        }
        findMany: {
          args: Prisma.ExperienceRoleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperienceRolePayload>[]
        }
        create: {
          args: Prisma.ExperienceRoleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperienceRolePayload>
        }
        createMany: {
          args: Prisma.ExperienceRoleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.ExperienceRoleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperienceRolePayload>
        }
        update: {
          args: Prisma.ExperienceRoleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperienceRolePayload>
        }
        deleteMany: {
          args: Prisma.ExperienceRoleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ExperienceRoleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.ExperienceRoleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperienceRolePayload>
        }
        aggregate: {
          args: Prisma.ExperienceRoleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateExperienceRole>
        }
        groupBy: {
          args: Prisma.ExperienceRoleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ExperienceRoleGroupByOutputType>[]
        }
        count: {
          args: Prisma.ExperienceRoleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ExperienceRoleCountAggregateOutputType> | number
        }
      }
    }
    Task: {
      payload: Prisma.$TaskPayload<ExtArgs>
      fields: Prisma.TaskFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TaskFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        findFirst: {
          args: Prisma.TaskFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        findMany: {
          args: Prisma.TaskFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>[]
        }
        create: {
          args: Prisma.TaskCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        createMany: {
          args: Prisma.TaskCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.TaskDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        update: {
          args: Prisma.TaskUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        deleteMany: {
          args: Prisma.TaskDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TaskUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.TaskUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        aggregate: {
          args: Prisma.TaskAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTask>
        }
        groupBy: {
          args: Prisma.TaskGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TaskGroupByOutputType>[]
        }
        count: {
          args: Prisma.TaskCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TaskCountAggregateOutputType> | number
        }
      }
    }
    Project: {
      payload: Prisma.$ProjectPayload<ExtArgs>
      fields: Prisma.ProjectFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProjectFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>
        }
        findFirst: {
          args: Prisma.ProjectFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>
        }
        findMany: {
          args: Prisma.ProjectFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>[]
        }
        create: {
          args: Prisma.ProjectCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>
        }
        createMany: {
          args: Prisma.ProjectCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.ProjectDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>
        }
        update: {
          args: Prisma.ProjectUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>
        }
        deleteMany: {
          args: Prisma.ProjectDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProjectUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.ProjectUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>
        }
        aggregate: {
          args: Prisma.ProjectAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProject>
        }
        groupBy: {
          args: Prisma.ProjectGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProjectGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProjectCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProjectCountAggregateOutputType> | number
        }
      }
    }
    TechStackOnProjects: {
      payload: Prisma.$TechStackOnProjectsPayload<ExtArgs>
      fields: Prisma.TechStackOnProjectsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TechStackOnProjectsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackOnProjectsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TechStackOnProjectsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackOnProjectsPayload>
        }
        findFirst: {
          args: Prisma.TechStackOnProjectsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackOnProjectsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TechStackOnProjectsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackOnProjectsPayload>
        }
        findMany: {
          args: Prisma.TechStackOnProjectsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackOnProjectsPayload>[]
        }
        create: {
          args: Prisma.TechStackOnProjectsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackOnProjectsPayload>
        }
        createMany: {
          args: Prisma.TechStackOnProjectsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.TechStackOnProjectsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackOnProjectsPayload>
        }
        update: {
          args: Prisma.TechStackOnProjectsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackOnProjectsPayload>
        }
        deleteMany: {
          args: Prisma.TechStackOnProjectsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TechStackOnProjectsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.TechStackOnProjectsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechStackOnProjectsPayload>
        }
        aggregate: {
          args: Prisma.TechStackOnProjectsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTechStackOnProjects>
        }
        groupBy: {
          args: Prisma.TechStackOnProjectsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TechStackOnProjectsGroupByOutputType>[]
        }
        count: {
          args: Prisma.TechStackOnProjectsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TechStackOnProjectsCountAggregateOutputType> | number
        }
      }
    }
    TagsOnProjects: {
      payload: Prisma.$TagsOnProjectsPayload<ExtArgs>
      fields: Prisma.TagsOnProjectsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TagsOnProjectsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagsOnProjectsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TagsOnProjectsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagsOnProjectsPayload>
        }
        findFirst: {
          args: Prisma.TagsOnProjectsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagsOnProjectsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TagsOnProjectsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagsOnProjectsPayload>
        }
        findMany: {
          args: Prisma.TagsOnProjectsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagsOnProjectsPayload>[]
        }
        create: {
          args: Prisma.TagsOnProjectsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagsOnProjectsPayload>
        }
        createMany: {
          args: Prisma.TagsOnProjectsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.TagsOnProjectsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagsOnProjectsPayload>
        }
        update: {
          args: Prisma.TagsOnProjectsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagsOnProjectsPayload>
        }
        deleteMany: {
          args: Prisma.TagsOnProjectsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TagsOnProjectsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.TagsOnProjectsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagsOnProjectsPayload>
        }
        aggregate: {
          args: Prisma.TagsOnProjectsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTagsOnProjects>
        }
        groupBy: {
          args: Prisma.TagsOnProjectsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TagsOnProjectsGroupByOutputType>[]
        }
        count: {
          args: Prisma.TagsOnProjectsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TagsOnProjectsCountAggregateOutputType> | number
        }
      }
    }
    Blog: {
      payload: Prisma.$BlogPayload<ExtArgs>
      fields: Prisma.BlogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.BlogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.BlogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>
        }
        findFirst: {
          args: Prisma.BlogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.BlogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>
        }
        findMany: {
          args: Prisma.BlogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>[]
        }
        create: {
          args: Prisma.BlogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>
        }
        createMany: {
          args: Prisma.BlogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.BlogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>
        }
        update: {
          args: Prisma.BlogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>
        }
        deleteMany: {
          args: Prisma.BlogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.BlogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.BlogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>
        }
        aggregate: {
          args: Prisma.BlogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBlog>
        }
        groupBy: {
          args: Prisma.BlogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BlogGroupByOutputType>[]
        }
        count: {
          args: Prisma.BlogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BlogCountAggregateOutputType> | number
        }
      }
    }
    Tag: {
      payload: Prisma.$TagPayload<ExtArgs>
      fields: Prisma.TagFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TagFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>
        }
        findFirst: {
          args: Prisma.TagFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>
        }
        findMany: {
          args: Prisma.TagFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>[]
        }
        create: {
          args: Prisma.TagCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>
        }
        createMany: {
          args: Prisma.TagCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.TagDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>
        }
        update: {
          args: Prisma.TagUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>
        }
        deleteMany: {
          args: Prisma.TagDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TagUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.TagUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>
        }
        aggregate: {
          args: Prisma.TagAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTag>
        }
        groupBy: {
          args: Prisma.TagGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TagGroupByOutputType>[]
        }
        count: {
          args: Prisma.TagCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TagCountAggregateOutputType> | number
        }
      }
    }
    BlogTag: {
      payload: Prisma.$BlogTagPayload<ExtArgs>
      fields: Prisma.BlogTagFieldRefs
      operations: {
        findUnique: {
          args: Prisma.BlogTagFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogTagPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.BlogTagFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogTagPayload>
        }
        findFirst: {
          args: Prisma.BlogTagFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogTagPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.BlogTagFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogTagPayload>
        }
        findMany: {
          args: Prisma.BlogTagFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogTagPayload>[]
        }
        create: {
          args: Prisma.BlogTagCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogTagPayload>
        }
        createMany: {
          args: Prisma.BlogTagCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.BlogTagDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogTagPayload>
        }
        update: {
          args: Prisma.BlogTagUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogTagPayload>
        }
        deleteMany: {
          args: Prisma.BlogTagDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.BlogTagUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.BlogTagUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogTagPayload>
        }
        aggregate: {
          args: Prisma.BlogTagAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBlogTag>
        }
        groupBy: {
          args: Prisma.BlogTagGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BlogTagGroupByOutputType>[]
        }
        count: {
          args: Prisma.BlogTagCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BlogTagCountAggregateOutputType> | number
        }
      }
    }
    Translation: {
      payload: Prisma.$TranslationPayload<ExtArgs>
      fields: Prisma.TranslationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TranslationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TranslationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>
        }
        findFirst: {
          args: Prisma.TranslationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TranslationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>
        }
        findMany: {
          args: Prisma.TranslationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>[]
        }
        create: {
          args: Prisma.TranslationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>
        }
        createMany: {
          args: Prisma.TranslationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.TranslationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>
        }
        update: {
          args: Prisma.TranslationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>
        }
        deleteMany: {
          args: Prisma.TranslationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TranslationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.TranslationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TranslationPayload>
        }
        aggregate: {
          args: Prisma.TranslationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTranslation>
        }
        groupBy: {
          args: Prisma.TranslationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TranslationGroupByOutputType>[]
        }
        count: {
          args: Prisma.TranslationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TranslationCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  firstName: 'firstName',
  lastName: 'lastName',
  birthdate: 'birthdate',
  greeting: 'greeting',
  tagLine: 'tagLine',
  email: 'email',
  phoneNumber: 'phoneNumber',
  linkedIn: 'linkedIn',
  facebook: 'facebook',
  github: 'github',
  leetCode: 'leetCode',
  twitter: 'twitter',
  portfolio: 'portfolio',
  stackOverflow: 'stackOverflow',
  image: 'image',
  imageCaption: 'imageCaption',
  quote: 'quote',
  bio: 'bio',
  aboutMe: 'aboutMe',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const UserBannerImageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  src: 'src',
  caption: 'caption'
} as const

export type UserBannerImageScalarFieldEnum = (typeof UserBannerImageScalarFieldEnum)[keyof typeof UserBannerImageScalarFieldEnum]


export const EducationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  timeline: 'timeline',
  title: 'title',
  message: 'message',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type EducationScalarFieldEnum = (typeof EducationScalarFieldEnum)[keyof typeof EducationScalarFieldEnum]


export const EducationSubItemScalarFieldEnum = {
  id: 'id',
  educationId: 'educationId',
  title: 'title',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type EducationSubItemScalarFieldEnum = (typeof EducationSubItemScalarFieldEnum)[keyof typeof EducationSubItemScalarFieldEnum]


export const TechStackScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logo: 'logo',
  group: 'group',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
} as const

export type TechStackScalarFieldEnum = (typeof TechStackScalarFieldEnum)[keyof typeof TechStackScalarFieldEnum]


export const ExperienceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  company: 'company',
  logoUrl: 'logoUrl',
  location: 'location',
  type: 'type',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ExperienceScalarFieldEnum = (typeof ExperienceScalarFieldEnum)[keyof typeof ExperienceScalarFieldEnum]


export const TechstacksOnExperiencesScalarFieldEnum = {
  experienceId: 'experienceId',
  techstackId: 'techstackId'
} as const

export type TechstacksOnExperiencesScalarFieldEnum = (typeof TechstacksOnExperiencesScalarFieldEnum)[keyof typeof TechstacksOnExperiencesScalarFieldEnum]


export const ExperienceRoleScalarFieldEnum = {
  id: 'id',
  experienceId: 'experienceId',
  title: 'title',
  startDate: 'startDate',
  endDate: 'endDate'
} as const

export type ExperienceRoleScalarFieldEnum = (typeof ExperienceRoleScalarFieldEnum)[keyof typeof ExperienceRoleScalarFieldEnum]


export const TaskScalarFieldEnum = {
  id: 'id',
  experienceRoleId: 'experienceRoleId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


export const ProjectScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  githubLink: 'githubLink',
  liveLink: 'liveLink',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


export const TechStackOnProjectsScalarFieldEnum = {
  projectId: 'projectId',
  techstackId: 'techstackId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TechStackOnProjectsScalarFieldEnum = (typeof TechStackOnProjectsScalarFieldEnum)[keyof typeof TechStackOnProjectsScalarFieldEnum]


export const TagsOnProjectsScalarFieldEnum = {
  projectId: 'projectId',
  tagId: 'tagId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TagsOnProjectsScalarFieldEnum = (typeof TagsOnProjectsScalarFieldEnum)[keyof typeof TagsOnProjectsScalarFieldEnum]


export const BlogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  content: 'content',
  publishedDate: 'publishedDate',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId'
} as const

export type BlogScalarFieldEnum = (typeof BlogScalarFieldEnum)[keyof typeof BlogScalarFieldEnum]


export const TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


export const BlogTagScalarFieldEnum = {
  blogId: 'blogId',
  tagId: 'tagId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type BlogTagScalarFieldEnum = (typeof BlogTagScalarFieldEnum)[keyof typeof BlogTagScalarFieldEnum]


export const TranslationScalarFieldEnum = {
  id: 'id',
  language: 'language',
  field: 'field',
  value: 'value',
  userId: 'userId',
  educationId: 'educationId',
  educationSubItemId: 'educationSubItemId',
  techStackId: 'techStackId',
  experienceId: 'experienceId',
  projectId: 'projectId',
  projectImageId: 'projectImageId',
  blogId: 'blogId',
  tagId: 'tagId',
  technologyId: 'technologyId',
  bannerImageId: 'bannerImageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  taskId: 'taskId'
} as const

export type TranslationScalarFieldEnum = (typeof TranslationScalarFieldEnum)[keyof typeof TranslationScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const UserOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  firstName: 'firstName',
  lastName: 'lastName',
  birthdate: 'birthdate',
  greeting: 'greeting',
  tagLine: 'tagLine',
  email: 'email',
  phoneNumber: 'phoneNumber',
  linkedIn: 'linkedIn',
  facebook: 'facebook',
  github: 'github',
  leetCode: 'leetCode',
  twitter: 'twitter',
  portfolio: 'portfolio',
  stackOverflow: 'stackOverflow',
  image: 'image',
  imageCaption: 'imageCaption',
  quote: 'quote',
  bio: 'bio',
  aboutMe: 'aboutMe'
} as const

export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


export const UserBannerImageOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  src: 'src',
  caption: 'caption'
} as const

export type UserBannerImageOrderByRelevanceFieldEnum = (typeof UserBannerImageOrderByRelevanceFieldEnum)[keyof typeof UserBannerImageOrderByRelevanceFieldEnum]


export const EducationOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  timeline: 'timeline',
  title: 'title',
  message: 'message',
  icon: 'icon'
} as const

export type EducationOrderByRelevanceFieldEnum = (typeof EducationOrderByRelevanceFieldEnum)[keyof typeof EducationOrderByRelevanceFieldEnum]


export const EducationSubItemOrderByRelevanceFieldEnum = {
  id: 'id',
  educationId: 'educationId',
  title: 'title',
  message: 'message'
} as const

export type EducationSubItemOrderByRelevanceFieldEnum = (typeof EducationSubItemOrderByRelevanceFieldEnum)[keyof typeof EducationSubItemOrderByRelevanceFieldEnum]


export const TechStackOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  logo: 'logo',
  group: 'group',
  userId: 'userId'
} as const

export type TechStackOrderByRelevanceFieldEnum = (typeof TechStackOrderByRelevanceFieldEnum)[keyof typeof TechStackOrderByRelevanceFieldEnum]


export const ExperienceOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  company: 'company',
  logoUrl: 'logoUrl',
  location: 'location',
  type: 'type',
  description: 'description'
} as const

export type ExperienceOrderByRelevanceFieldEnum = (typeof ExperienceOrderByRelevanceFieldEnum)[keyof typeof ExperienceOrderByRelevanceFieldEnum]


export const TechstacksOnExperiencesOrderByRelevanceFieldEnum = {
  experienceId: 'experienceId',
  techstackId: 'techstackId'
} as const

export type TechstacksOnExperiencesOrderByRelevanceFieldEnum = (typeof TechstacksOnExperiencesOrderByRelevanceFieldEnum)[keyof typeof TechstacksOnExperiencesOrderByRelevanceFieldEnum]


export const ExperienceRoleOrderByRelevanceFieldEnum = {
  id: 'id',
  experienceId: 'experienceId',
  title: 'title'
} as const

export type ExperienceRoleOrderByRelevanceFieldEnum = (typeof ExperienceRoleOrderByRelevanceFieldEnum)[keyof typeof ExperienceRoleOrderByRelevanceFieldEnum]


export const TaskOrderByRelevanceFieldEnum = {
  id: 'id',
  experienceRoleId: 'experienceRoleId',
  content: 'content'
} as const

export type TaskOrderByRelevanceFieldEnum = (typeof TaskOrderByRelevanceFieldEnum)[keyof typeof TaskOrderByRelevanceFieldEnum]


export const ProjectOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  githubLink: 'githubLink',
  liveLink: 'liveLink'
} as const

export type ProjectOrderByRelevanceFieldEnum = (typeof ProjectOrderByRelevanceFieldEnum)[keyof typeof ProjectOrderByRelevanceFieldEnum]


export const TechStackOnProjectsOrderByRelevanceFieldEnum = {
  projectId: 'projectId',
  techstackId: 'techstackId'
} as const

export type TechStackOnProjectsOrderByRelevanceFieldEnum = (typeof TechStackOnProjectsOrderByRelevanceFieldEnum)[keyof typeof TechStackOnProjectsOrderByRelevanceFieldEnum]


export const TagsOnProjectsOrderByRelevanceFieldEnum = {
  projectId: 'projectId',
  tagId: 'tagId'
} as const

export type TagsOnProjectsOrderByRelevanceFieldEnum = (typeof TagsOnProjectsOrderByRelevanceFieldEnum)[keyof typeof TagsOnProjectsOrderByRelevanceFieldEnum]


export const BlogOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  content: 'content',
  slug: 'slug',
  projectId: 'projectId'
} as const

export type BlogOrderByRelevanceFieldEnum = (typeof BlogOrderByRelevanceFieldEnum)[keyof typeof BlogOrderByRelevanceFieldEnum]


export const TagOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
} as const

export type TagOrderByRelevanceFieldEnum = (typeof TagOrderByRelevanceFieldEnum)[keyof typeof TagOrderByRelevanceFieldEnum]


export const BlogTagOrderByRelevanceFieldEnum = {
  blogId: 'blogId',
  tagId: 'tagId'
} as const

export type BlogTagOrderByRelevanceFieldEnum = (typeof BlogTagOrderByRelevanceFieldEnum)[keyof typeof BlogTagOrderByRelevanceFieldEnum]


export const TranslationOrderByRelevanceFieldEnum = {
  id: 'id',
  language: 'language',
  field: 'field',
  value: 'value',
  userId: 'userId',
  educationId: 'educationId',
  educationSubItemId: 'educationSubItemId',
  techStackId: 'techStackId',
  experienceId: 'experienceId',
  projectId: 'projectId',
  projectImageId: 'projectImageId',
  blogId: 'blogId',
  tagId: 'tagId',
  technologyId: 'technologyId',
  bannerImageId: 'bannerImageId',
  taskId: 'taskId'
} as const

export type TranslationOrderByRelevanceFieldEnum = (typeof TranslationOrderByRelevanceFieldEnum)[keyof typeof TranslationOrderByRelevanceFieldEnum]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  user?: Prisma.UserOmit
  userBannerImage?: Prisma.UserBannerImageOmit
  education?: Prisma.EducationOmit
  educationSubItem?: Prisma.EducationSubItemOmit
  techStack?: Prisma.TechStackOmit
  experience?: Prisma.ExperienceOmit
  techstacksOnExperiences?: Prisma.TechstacksOnExperiencesOmit
  experienceRole?: Prisma.ExperienceRoleOmit
  task?: Prisma.TaskOmit
  project?: Prisma.ProjectOmit
  techStackOnProjects?: Prisma.TechStackOnProjectsOmit
  tagsOnProjects?: Prisma.TagsOnProjectsOmit
  blog?: Prisma.BlogOmit
  tag?: Prisma.TagOmit
  blogTag?: Prisma.BlogTagOmit
  translation?: Prisma.TranslationOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

