
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ExperienceRole` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ExperienceRole
 * 
 */
export type ExperienceRoleModel = runtime.Types.Result.DefaultSelection<Prisma.$ExperienceRolePayload>

export type AggregateExperienceRole = {
  _count: ExperienceRoleCountAggregateOutputType | null
  _min: ExperienceRoleMinAggregateOutputType | null
  _max: ExperienceRoleMaxAggregateOutputType | null
}

export type ExperienceRoleMinAggregateOutputType = {
  id: string | null
  experienceId: string | null
  title: string | null
  startDate: Date | null
  endDate: Date | null
}

export type ExperienceRoleMaxAggregateOutputType = {
  id: string | null
  experienceId: string | null
  title: string | null
  startDate: Date | null
  endDate: Date | null
}

export type ExperienceRoleCountAggregateOutputType = {
  id: number
  experienceId: number
  title: number
  startDate: number
  endDate: number
  _all: number
}


export type ExperienceRoleMinAggregateInputType = {
  id?: true
  experienceId?: true
  title?: true
  startDate?: true
  endDate?: true
}

export type ExperienceRoleMaxAggregateInputType = {
  id?: true
  experienceId?: true
  title?: true
  startDate?: true
  endDate?: true
}

export type ExperienceRoleCountAggregateInputType = {
  id?: true
  experienceId?: true
  title?: true
  startDate?: true
  endDate?: true
  _all?: true
}

export type ExperienceRoleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExperienceRole to aggregate.
   */
  where?: Prisma.ExperienceRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExperienceRoles to fetch.
   */
  orderBy?: Prisma.ExperienceRoleOrderByWithRelationInput | Prisma.ExperienceRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExperienceRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExperienceRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExperienceRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ExperienceRoles
  **/
  _count?: true | ExperienceRoleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExperienceRoleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExperienceRoleMaxAggregateInputType
}

export type GetExperienceRoleAggregateType<T extends ExperienceRoleAggregateArgs> = {
      [P in keyof T & keyof AggregateExperienceRole]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExperienceRole[P]>
    : Prisma.GetScalarType<T[P], AggregateExperienceRole[P]>
}




export type ExperienceRoleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExperienceRoleWhereInput
  orderBy?: Prisma.ExperienceRoleOrderByWithAggregationInput | Prisma.ExperienceRoleOrderByWithAggregationInput[]
  by: Prisma.ExperienceRoleScalarFieldEnum[] | Prisma.ExperienceRoleScalarFieldEnum
  having?: Prisma.ExperienceRoleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExperienceRoleCountAggregateInputType | true
  _min?: ExperienceRoleMinAggregateInputType
  _max?: ExperienceRoleMaxAggregateInputType
}

export type ExperienceRoleGroupByOutputType = {
  id: string
  experienceId: string
  title: string
  startDate: Date
  endDate: Date | null
  _count: ExperienceRoleCountAggregateOutputType | null
  _min: ExperienceRoleMinAggregateOutputType | null
  _max: ExperienceRoleMaxAggregateOutputType | null
}

type GetExperienceRoleGroupByPayload<T extends ExperienceRoleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExperienceRoleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExperienceRoleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExperienceRoleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExperienceRoleGroupByOutputType[P]>
      }
    >
  > 



export type ExperienceRoleWhereInput = {
  AND?: Prisma.ExperienceRoleWhereInput | Prisma.ExperienceRoleWhereInput[]
  OR?: Prisma.ExperienceRoleWhereInput[]
  NOT?: Prisma.ExperienceRoleWhereInput | Prisma.ExperienceRoleWhereInput[]
  id?: Prisma.StringFilter<"ExperienceRole"> | string
  experienceId?: Prisma.StringFilter<"ExperienceRole"> | string
  title?: Prisma.StringFilter<"ExperienceRole"> | string
  startDate?: Prisma.DateTimeFilter<"ExperienceRole"> | Date | string
  endDate?: Prisma.DateTimeNullableFilter<"ExperienceRole"> | Date | string | null
  tasks?: Prisma.TaskListRelationFilter
  experience?: Prisma.XOR<Prisma.ExperienceScalarRelationFilter, Prisma.ExperienceWhereInput>
}

export type ExperienceRoleOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  experienceId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  tasks?: Prisma.TaskOrderByRelationAggregateInput
  experience?: Prisma.ExperienceOrderByWithRelationInput
}

export type ExperienceRoleWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ExperienceRoleWhereInput | Prisma.ExperienceRoleWhereInput[]
  OR?: Prisma.ExperienceRoleWhereInput[]
  NOT?: Prisma.ExperienceRoleWhereInput | Prisma.ExperienceRoleWhereInput[]
  experienceId?: Prisma.StringFilter<"ExperienceRole"> | string
  title?: Prisma.StringFilter<"ExperienceRole"> | string
  startDate?: Prisma.DateTimeFilter<"ExperienceRole"> | Date | string
  endDate?: Prisma.DateTimeNullableFilter<"ExperienceRole"> | Date | string | null
  tasks?: Prisma.TaskListRelationFilter
  experience?: Prisma.XOR<Prisma.ExperienceScalarRelationFilter, Prisma.ExperienceWhereInput>
}, "id">

export type ExperienceRoleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  experienceId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ExperienceRoleCountOrderByAggregateInput
  _max?: Prisma.ExperienceRoleMaxOrderByAggregateInput
  _min?: Prisma.ExperienceRoleMinOrderByAggregateInput
}

export type ExperienceRoleScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExperienceRoleScalarWhereWithAggregatesInput | Prisma.ExperienceRoleScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExperienceRoleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExperienceRoleScalarWhereWithAggregatesInput | Prisma.ExperienceRoleScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ExperienceRole"> | string
  experienceId?: Prisma.StringWithAggregatesFilter<"ExperienceRole"> | string
  title?: Prisma.StringWithAggregatesFilter<"ExperienceRole"> | string
  startDate?: Prisma.DateTimeWithAggregatesFilter<"ExperienceRole"> | Date | string
  endDate?: Prisma.DateTimeNullableWithAggregatesFilter<"ExperienceRole"> | Date | string | null
}

export type ExperienceRoleCreateInput = {
  id?: string
  title: string
  startDate: Date | string
  endDate?: Date | string | null
  tasks?: Prisma.TaskCreateNestedManyWithoutExperienceRoleInput
  experience: Prisma.ExperienceCreateNestedOneWithoutRolesInput
}

export type ExperienceRoleUncheckedCreateInput = {
  id?: string
  experienceId: string
  title: string
  startDate: Date | string
  endDate?: Date | string | null
  tasks?: Prisma.TaskUncheckedCreateNestedManyWithoutExperienceRoleInput
}

export type ExperienceRoleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tasks?: Prisma.TaskUpdateManyWithoutExperienceRoleNestedInput
  experience?: Prisma.ExperienceUpdateOneRequiredWithoutRolesNestedInput
}

export type ExperienceRoleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tasks?: Prisma.TaskUncheckedUpdateManyWithoutExperienceRoleNestedInput
}

export type ExperienceRoleCreateManyInput = {
  id?: string
  experienceId: string
  title: string
  startDate: Date | string
  endDate?: Date | string | null
}

export type ExperienceRoleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ExperienceRoleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ExperienceRoleListRelationFilter = {
  every?: Prisma.ExperienceRoleWhereInput
  some?: Prisma.ExperienceRoleWhereInput
  none?: Prisma.ExperienceRoleWhereInput
}

export type ExperienceRoleOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ExperienceRoleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  experienceId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
}

export type ExperienceRoleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  experienceId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
}

export type ExperienceRoleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  experienceId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
}

export type ExperienceRoleScalarRelationFilter = {
  is?: Prisma.ExperienceRoleWhereInput
  isNot?: Prisma.ExperienceRoleWhereInput
}

export type ExperienceRoleCreateNestedManyWithoutExperienceInput = {
  create?: Prisma.XOR<Prisma.ExperienceRoleCreateWithoutExperienceInput, Prisma.ExperienceRoleUncheckedCreateWithoutExperienceInput> | Prisma.ExperienceRoleCreateWithoutExperienceInput[] | Prisma.ExperienceRoleUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.ExperienceRoleCreateOrConnectWithoutExperienceInput | Prisma.ExperienceRoleCreateOrConnectWithoutExperienceInput[]
  createMany?: Prisma.ExperienceRoleCreateManyExperienceInputEnvelope
  connect?: Prisma.ExperienceRoleWhereUniqueInput | Prisma.ExperienceRoleWhereUniqueInput[]
}

export type ExperienceRoleUncheckedCreateNestedManyWithoutExperienceInput = {
  create?: Prisma.XOR<Prisma.ExperienceRoleCreateWithoutExperienceInput, Prisma.ExperienceRoleUncheckedCreateWithoutExperienceInput> | Prisma.ExperienceRoleCreateWithoutExperienceInput[] | Prisma.ExperienceRoleUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.ExperienceRoleCreateOrConnectWithoutExperienceInput | Prisma.ExperienceRoleCreateOrConnectWithoutExperienceInput[]
  createMany?: Prisma.ExperienceRoleCreateManyExperienceInputEnvelope
  connect?: Prisma.ExperienceRoleWhereUniqueInput | Prisma.ExperienceRoleWhereUniqueInput[]
}

export type ExperienceRoleUpdateManyWithoutExperienceNestedInput = {
  create?: Prisma.XOR<Prisma.ExperienceRoleCreateWithoutExperienceInput, Prisma.ExperienceRoleUncheckedCreateWithoutExperienceInput> | Prisma.ExperienceRoleCreateWithoutExperienceInput[] | Prisma.ExperienceRoleUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.ExperienceRoleCreateOrConnectWithoutExperienceInput | Prisma.ExperienceRoleCreateOrConnectWithoutExperienceInput[]
  upsert?: Prisma.ExperienceRoleUpsertWithWhereUniqueWithoutExperienceInput | Prisma.ExperienceRoleUpsertWithWhereUniqueWithoutExperienceInput[]
  createMany?: Prisma.ExperienceRoleCreateManyExperienceInputEnvelope
  set?: Prisma.ExperienceRoleWhereUniqueInput | Prisma.ExperienceRoleWhereUniqueInput[]
  disconnect?: Prisma.ExperienceRoleWhereUniqueInput | Prisma.ExperienceRoleWhereUniqueInput[]
  delete?: Prisma.ExperienceRoleWhereUniqueInput | Prisma.ExperienceRoleWhereUniqueInput[]
  connect?: Prisma.ExperienceRoleWhereUniqueInput | Prisma.ExperienceRoleWhereUniqueInput[]
  update?: Prisma.ExperienceRoleUpdateWithWhereUniqueWithoutExperienceInput | Prisma.ExperienceRoleUpdateWithWhereUniqueWithoutExperienceInput[]
  updateMany?: Prisma.ExperienceRoleUpdateManyWithWhereWithoutExperienceInput | Prisma.ExperienceRoleUpdateManyWithWhereWithoutExperienceInput[]
  deleteMany?: Prisma.ExperienceRoleScalarWhereInput | Prisma.ExperienceRoleScalarWhereInput[]
}

export type ExperienceRoleUncheckedUpdateManyWithoutExperienceNestedInput = {
  create?: Prisma.XOR<Prisma.ExperienceRoleCreateWithoutExperienceInput, Prisma.ExperienceRoleUncheckedCreateWithoutExperienceInput> | Prisma.ExperienceRoleCreateWithoutExperienceInput[] | Prisma.ExperienceRoleUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.ExperienceRoleCreateOrConnectWithoutExperienceInput | Prisma.ExperienceRoleCreateOrConnectWithoutExperienceInput[]
  upsert?: Prisma.ExperienceRoleUpsertWithWhereUniqueWithoutExperienceInput | Prisma.ExperienceRoleUpsertWithWhereUniqueWithoutExperienceInput[]
  createMany?: Prisma.ExperienceRoleCreateManyExperienceInputEnvelope
  set?: Prisma.ExperienceRoleWhereUniqueInput | Prisma.ExperienceRoleWhereUniqueInput[]
  disconnect?: Prisma.ExperienceRoleWhereUniqueInput | Prisma.ExperienceRoleWhereUniqueInput[]
  delete?: Prisma.ExperienceRoleWhereUniqueInput | Prisma.ExperienceRoleWhereUniqueInput[]
  connect?: Prisma.ExperienceRoleWhereUniqueInput | Prisma.ExperienceRoleWhereUniqueInput[]
  update?: Prisma.ExperienceRoleUpdateWithWhereUniqueWithoutExperienceInput | Prisma.ExperienceRoleUpdateWithWhereUniqueWithoutExperienceInput[]
  updateMany?: Prisma.ExperienceRoleUpdateManyWithWhereWithoutExperienceInput | Prisma.ExperienceRoleUpdateManyWithWhereWithoutExperienceInput[]
  deleteMany?: Prisma.ExperienceRoleScalarWhereInput | Prisma.ExperienceRoleScalarWhereInput[]
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type ExperienceRoleCreateNestedOneWithoutTasksInput = {
  create?: Prisma.XOR<Prisma.ExperienceRoleCreateWithoutTasksInput, Prisma.ExperienceRoleUncheckedCreateWithoutTasksInput>
  connectOrCreate?: Prisma.ExperienceRoleCreateOrConnectWithoutTasksInput
  connect?: Prisma.ExperienceRoleWhereUniqueInput
}

export type ExperienceRoleUpdateOneRequiredWithoutTasksNestedInput = {
  create?: Prisma.XOR<Prisma.ExperienceRoleCreateWithoutTasksInput, Prisma.ExperienceRoleUncheckedCreateWithoutTasksInput>
  connectOrCreate?: Prisma.ExperienceRoleCreateOrConnectWithoutTasksInput
  upsert?: Prisma.ExperienceRoleUpsertWithoutTasksInput
  connect?: Prisma.ExperienceRoleWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ExperienceRoleUpdateToOneWithWhereWithoutTasksInput, Prisma.ExperienceRoleUpdateWithoutTasksInput>, Prisma.ExperienceRoleUncheckedUpdateWithoutTasksInput>
}

export type ExperienceRoleCreateWithoutExperienceInput = {
  id?: string
  title: string
  startDate: Date | string
  endDate?: Date | string | null
  tasks?: Prisma.TaskCreateNestedManyWithoutExperienceRoleInput
}

export type ExperienceRoleUncheckedCreateWithoutExperienceInput = {
  id?: string
  title: string
  startDate: Date | string
  endDate?: Date | string | null
  tasks?: Prisma.TaskUncheckedCreateNestedManyWithoutExperienceRoleInput
}

export type ExperienceRoleCreateOrConnectWithoutExperienceInput = {
  where: Prisma.ExperienceRoleWhereUniqueInput
  create: Prisma.XOR<Prisma.ExperienceRoleCreateWithoutExperienceInput, Prisma.ExperienceRoleUncheckedCreateWithoutExperienceInput>
}

export type ExperienceRoleCreateManyExperienceInputEnvelope = {
  data: Prisma.ExperienceRoleCreateManyExperienceInput | Prisma.ExperienceRoleCreateManyExperienceInput[]
  skipDuplicates?: boolean
}

export type ExperienceRoleUpsertWithWhereUniqueWithoutExperienceInput = {
  where: Prisma.ExperienceRoleWhereUniqueInput
  update: Prisma.XOR<Prisma.ExperienceRoleUpdateWithoutExperienceInput, Prisma.ExperienceRoleUncheckedUpdateWithoutExperienceInput>
  create: Prisma.XOR<Prisma.ExperienceRoleCreateWithoutExperienceInput, Prisma.ExperienceRoleUncheckedCreateWithoutExperienceInput>
}

export type ExperienceRoleUpdateWithWhereUniqueWithoutExperienceInput = {
  where: Prisma.ExperienceRoleWhereUniqueInput
  data: Prisma.XOR<Prisma.ExperienceRoleUpdateWithoutExperienceInput, Prisma.ExperienceRoleUncheckedUpdateWithoutExperienceInput>
}

export type ExperienceRoleUpdateManyWithWhereWithoutExperienceInput = {
  where: Prisma.ExperienceRoleScalarWhereInput
  data: Prisma.XOR<Prisma.ExperienceRoleUpdateManyMutationInput, Prisma.ExperienceRoleUncheckedUpdateManyWithoutExperienceInput>
}

export type ExperienceRoleScalarWhereInput = {
  AND?: Prisma.ExperienceRoleScalarWhereInput | Prisma.ExperienceRoleScalarWhereInput[]
  OR?: Prisma.ExperienceRoleScalarWhereInput[]
  NOT?: Prisma.ExperienceRoleScalarWhereInput | Prisma.ExperienceRoleScalarWhereInput[]
  id?: Prisma.StringFilter<"ExperienceRole"> | string
  experienceId?: Prisma.StringFilter<"ExperienceRole"> | string
  title?: Prisma.StringFilter<"ExperienceRole"> | string
  startDate?: Prisma.DateTimeFilter<"ExperienceRole"> | Date | string
  endDate?: Prisma.DateTimeNullableFilter<"ExperienceRole"> | Date | string | null
}

export type ExperienceRoleCreateWithoutTasksInput = {
  id?: string
  title: string
  startDate: Date | string
  endDate?: Date | string | null
  experience: Prisma.ExperienceCreateNestedOneWithoutRolesInput
}

export type ExperienceRoleUncheckedCreateWithoutTasksInput = {
  id?: string
  experienceId: string
  title: string
  startDate: Date | string
  endDate?: Date | string | null
}

export type ExperienceRoleCreateOrConnectWithoutTasksInput = {
  where: Prisma.ExperienceRoleWhereUniqueInput
  create: Prisma.XOR<Prisma.ExperienceRoleCreateWithoutTasksInput, Prisma.ExperienceRoleUncheckedCreateWithoutTasksInput>
}

export type ExperienceRoleUpsertWithoutTasksInput = {
  update: Prisma.XOR<Prisma.ExperienceRoleUpdateWithoutTasksInput, Prisma.ExperienceRoleUncheckedUpdateWithoutTasksInput>
  create: Prisma.XOR<Prisma.ExperienceRoleCreateWithoutTasksInput, Prisma.ExperienceRoleUncheckedCreateWithoutTasksInput>
  where?: Prisma.ExperienceRoleWhereInput
}

export type ExperienceRoleUpdateToOneWithWhereWithoutTasksInput = {
  where?: Prisma.ExperienceRoleWhereInput
  data: Prisma.XOR<Prisma.ExperienceRoleUpdateWithoutTasksInput, Prisma.ExperienceRoleUncheckedUpdateWithoutTasksInput>
}

export type ExperienceRoleUpdateWithoutTasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  experience?: Prisma.ExperienceUpdateOneRequiredWithoutRolesNestedInput
}

export type ExperienceRoleUncheckedUpdateWithoutTasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ExperienceRoleCreateManyExperienceInput = {
  id?: string
  title: string
  startDate: Date | string
  endDate?: Date | string | null
}

export type ExperienceRoleUpdateWithoutExperienceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tasks?: Prisma.TaskUpdateManyWithoutExperienceRoleNestedInput
}

export type ExperienceRoleUncheckedUpdateWithoutExperienceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tasks?: Prisma.TaskUncheckedUpdateManyWithoutExperienceRoleNestedInput
}

export type ExperienceRoleUncheckedUpdateManyWithoutExperienceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type ExperienceRoleCountOutputType
 */

export type ExperienceRoleCountOutputType = {
  tasks: number
}

export type ExperienceRoleCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tasks?: boolean | ExperienceRoleCountOutputTypeCountTasksArgs
}

/**
 * ExperienceRoleCountOutputType without action
 */
export type ExperienceRoleCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceRoleCountOutputType
   */
  select?: Prisma.ExperienceRoleCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ExperienceRoleCountOutputType without action
 */
export type ExperienceRoleCountOutputTypeCountTasksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TaskWhereInput
}


export type ExperienceRoleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  experienceId?: boolean
  title?: boolean
  startDate?: boolean
  endDate?: boolean
  tasks?: boolean | Prisma.ExperienceRole$tasksArgs<ExtArgs>
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.ExperienceRoleCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["experienceRole"]>

export type ExperienceRoleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  experienceId?: boolean
  title?: boolean
  startDate?: boolean
  endDate?: boolean
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
}, ExtArgs["result"]["experienceRole"]>

export type ExperienceRoleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  experienceId?: boolean
  title?: boolean
  startDate?: boolean
  endDate?: boolean
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
}, ExtArgs["result"]["experienceRole"]>

export type ExperienceRoleSelectScalar = {
  id?: boolean
  experienceId?: boolean
  title?: boolean
  startDate?: boolean
  endDate?: boolean
}

export type ExperienceRoleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "experienceId" | "title" | "startDate" | "endDate", ExtArgs["result"]["experienceRole"]>
export type ExperienceRoleInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tasks?: boolean | Prisma.ExperienceRole$tasksArgs<ExtArgs>
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.ExperienceRoleCountOutputTypeDefaultArgs<ExtArgs>
}
export type ExperienceRoleIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
}
export type ExperienceRoleIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
}

export type $ExperienceRolePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ExperienceRole"
  objects: {
    tasks: Prisma.$TaskPayload<ExtArgs>[]
    experience: Prisma.$ExperiencePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    experienceId: string
    title: string
    startDate: Date
    endDate: Date | null
  }, ExtArgs["result"]["experienceRole"]>
  composites: {}
}

export type ExperienceRoleGetPayload<S extends boolean | null | undefined | ExperienceRoleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExperienceRolePayload, S>

export type ExperienceRoleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExperienceRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExperienceRoleCountAggregateInputType | true
  }

export interface ExperienceRoleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExperienceRole'], meta: { name: 'ExperienceRole' } }
  /**
   * Find zero or one ExperienceRole that matches the filter.
   * @param {ExperienceRoleFindUniqueArgs} args - Arguments to find a ExperienceRole
   * @example
   * // Get one ExperienceRole
   * const experienceRole = await prisma.experienceRole.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExperienceRoleFindUniqueArgs>(args: Prisma.SelectSubset<T, ExperienceRoleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExperienceRoleClient<runtime.Types.Result.GetResult<Prisma.$ExperienceRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ExperienceRole that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExperienceRoleFindUniqueOrThrowArgs} args - Arguments to find a ExperienceRole
   * @example
   * // Get one ExperienceRole
   * const experienceRole = await prisma.experienceRole.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExperienceRoleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExperienceRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExperienceRoleClient<runtime.Types.Result.GetResult<Prisma.$ExperienceRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExperienceRole that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceRoleFindFirstArgs} args - Arguments to find a ExperienceRole
   * @example
   * // Get one ExperienceRole
   * const experienceRole = await prisma.experienceRole.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExperienceRoleFindFirstArgs>(args?: Prisma.SelectSubset<T, ExperienceRoleFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExperienceRoleClient<runtime.Types.Result.GetResult<Prisma.$ExperienceRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExperienceRole that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceRoleFindFirstOrThrowArgs} args - Arguments to find a ExperienceRole
   * @example
   * // Get one ExperienceRole
   * const experienceRole = await prisma.experienceRole.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExperienceRoleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExperienceRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExperienceRoleClient<runtime.Types.Result.GetResult<Prisma.$ExperienceRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ExperienceRoles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceRoleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ExperienceRoles
   * const experienceRoles = await prisma.experienceRole.findMany()
   * 
   * // Get first 10 ExperienceRoles
   * const experienceRoles = await prisma.experienceRole.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const experienceRoleWithIdOnly = await prisma.experienceRole.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExperienceRoleFindManyArgs>(args?: Prisma.SelectSubset<T, ExperienceRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExperienceRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ExperienceRole.
   * @param {ExperienceRoleCreateArgs} args - Arguments to create a ExperienceRole.
   * @example
   * // Create one ExperienceRole
   * const ExperienceRole = await prisma.experienceRole.create({
   *   data: {
   *     // ... data to create a ExperienceRole
   *   }
   * })
   * 
   */
  create<T extends ExperienceRoleCreateArgs>(args: Prisma.SelectSubset<T, ExperienceRoleCreateArgs<ExtArgs>>): Prisma.Prisma__ExperienceRoleClient<runtime.Types.Result.GetResult<Prisma.$ExperienceRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ExperienceRoles.
   * @param {ExperienceRoleCreateManyArgs} args - Arguments to create many ExperienceRoles.
   * @example
   * // Create many ExperienceRoles
   * const experienceRole = await prisma.experienceRole.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExperienceRoleCreateManyArgs>(args?: Prisma.SelectSubset<T, ExperienceRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ExperienceRoles and returns the data saved in the database.
   * @param {ExperienceRoleCreateManyAndReturnArgs} args - Arguments to create many ExperienceRoles.
   * @example
   * // Create many ExperienceRoles
   * const experienceRole = await prisma.experienceRole.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ExperienceRoles and only return the `id`
   * const experienceRoleWithIdOnly = await prisma.experienceRole.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExperienceRoleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExperienceRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExperienceRolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ExperienceRole.
   * @param {ExperienceRoleDeleteArgs} args - Arguments to delete one ExperienceRole.
   * @example
   * // Delete one ExperienceRole
   * const ExperienceRole = await prisma.experienceRole.delete({
   *   where: {
   *     // ... filter to delete one ExperienceRole
   *   }
   * })
   * 
   */
  delete<T extends ExperienceRoleDeleteArgs>(args: Prisma.SelectSubset<T, ExperienceRoleDeleteArgs<ExtArgs>>): Prisma.Prisma__ExperienceRoleClient<runtime.Types.Result.GetResult<Prisma.$ExperienceRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ExperienceRole.
   * @param {ExperienceRoleUpdateArgs} args - Arguments to update one ExperienceRole.
   * @example
   * // Update one ExperienceRole
   * const experienceRole = await prisma.experienceRole.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExperienceRoleUpdateArgs>(args: Prisma.SelectSubset<T, ExperienceRoleUpdateArgs<ExtArgs>>): Prisma.Prisma__ExperienceRoleClient<runtime.Types.Result.GetResult<Prisma.$ExperienceRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ExperienceRoles.
   * @param {ExperienceRoleDeleteManyArgs} args - Arguments to filter ExperienceRoles to delete.
   * @example
   * // Delete a few ExperienceRoles
   * const { count } = await prisma.experienceRole.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExperienceRoleDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExperienceRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExperienceRoles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceRoleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ExperienceRoles
   * const experienceRole = await prisma.experienceRole.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExperienceRoleUpdateManyArgs>(args: Prisma.SelectSubset<T, ExperienceRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExperienceRoles and returns the data updated in the database.
   * @param {ExperienceRoleUpdateManyAndReturnArgs} args - Arguments to update many ExperienceRoles.
   * @example
   * // Update many ExperienceRoles
   * const experienceRole = await prisma.experienceRole.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ExperienceRoles and only return the `id`
   * const experienceRoleWithIdOnly = await prisma.experienceRole.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExperienceRoleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExperienceRoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExperienceRolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ExperienceRole.
   * @param {ExperienceRoleUpsertArgs} args - Arguments to update or create a ExperienceRole.
   * @example
   * // Update or create a ExperienceRole
   * const experienceRole = await prisma.experienceRole.upsert({
   *   create: {
   *     // ... data to create a ExperienceRole
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ExperienceRole we want to update
   *   }
   * })
   */
  upsert<T extends ExperienceRoleUpsertArgs>(args: Prisma.SelectSubset<T, ExperienceRoleUpsertArgs<ExtArgs>>): Prisma.Prisma__ExperienceRoleClient<runtime.Types.Result.GetResult<Prisma.$ExperienceRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ExperienceRoles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceRoleCountArgs} args - Arguments to filter ExperienceRoles to count.
   * @example
   * // Count the number of ExperienceRoles
   * const count = await prisma.experienceRole.count({
   *   where: {
   *     // ... the filter for the ExperienceRoles we want to count
   *   }
   * })
  **/
  count<T extends ExperienceRoleCountArgs>(
    args?: Prisma.Subset<T, ExperienceRoleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExperienceRoleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ExperienceRole.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExperienceRoleAggregateArgs>(args: Prisma.Subset<T, ExperienceRoleAggregateArgs>): Prisma.PrismaPromise<GetExperienceRoleAggregateType<T>>

  /**
   * Group by ExperienceRole.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceRoleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExperienceRoleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExperienceRoleGroupByArgs['orderBy'] }
      : { orderBy?: ExperienceRoleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExperienceRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExperienceRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ExperienceRole model
 */
readonly fields: ExperienceRoleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ExperienceRole.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExperienceRoleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tasks<T extends Prisma.ExperienceRole$tasksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ExperienceRole$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  experience<T extends Prisma.ExperienceDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ExperienceDefaultArgs<ExtArgs>>): Prisma.Prisma__ExperienceClient<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ExperienceRole model
 */
export interface ExperienceRoleFieldRefs {
  readonly id: Prisma.FieldRef<"ExperienceRole", 'String'>
  readonly experienceId: Prisma.FieldRef<"ExperienceRole", 'String'>
  readonly title: Prisma.FieldRef<"ExperienceRole", 'String'>
  readonly startDate: Prisma.FieldRef<"ExperienceRole", 'DateTime'>
  readonly endDate: Prisma.FieldRef<"ExperienceRole", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ExperienceRole findUnique
 */
export type ExperienceRoleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceRole
   */
  select?: Prisma.ExperienceRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceRole
   */
  omit?: Prisma.ExperienceRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceRoleInclude<ExtArgs> | null
  /**
   * Filter, which ExperienceRole to fetch.
   */
  where: Prisma.ExperienceRoleWhereUniqueInput
}

/**
 * ExperienceRole findUniqueOrThrow
 */
export type ExperienceRoleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceRole
   */
  select?: Prisma.ExperienceRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceRole
   */
  omit?: Prisma.ExperienceRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceRoleInclude<ExtArgs> | null
  /**
   * Filter, which ExperienceRole to fetch.
   */
  where: Prisma.ExperienceRoleWhereUniqueInput
}

/**
 * ExperienceRole findFirst
 */
export type ExperienceRoleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceRole
   */
  select?: Prisma.ExperienceRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceRole
   */
  omit?: Prisma.ExperienceRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceRoleInclude<ExtArgs> | null
  /**
   * Filter, which ExperienceRole to fetch.
   */
  where?: Prisma.ExperienceRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExperienceRoles to fetch.
   */
  orderBy?: Prisma.ExperienceRoleOrderByWithRelationInput | Prisma.ExperienceRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExperienceRoles.
   */
  cursor?: Prisma.ExperienceRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExperienceRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExperienceRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExperienceRoles.
   */
  distinct?: Prisma.ExperienceRoleScalarFieldEnum | Prisma.ExperienceRoleScalarFieldEnum[]
}

/**
 * ExperienceRole findFirstOrThrow
 */
export type ExperienceRoleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceRole
   */
  select?: Prisma.ExperienceRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceRole
   */
  omit?: Prisma.ExperienceRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceRoleInclude<ExtArgs> | null
  /**
   * Filter, which ExperienceRole to fetch.
   */
  where?: Prisma.ExperienceRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExperienceRoles to fetch.
   */
  orderBy?: Prisma.ExperienceRoleOrderByWithRelationInput | Prisma.ExperienceRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExperienceRoles.
   */
  cursor?: Prisma.ExperienceRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExperienceRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExperienceRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExperienceRoles.
   */
  distinct?: Prisma.ExperienceRoleScalarFieldEnum | Prisma.ExperienceRoleScalarFieldEnum[]
}

/**
 * ExperienceRole findMany
 */
export type ExperienceRoleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceRole
   */
  select?: Prisma.ExperienceRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceRole
   */
  omit?: Prisma.ExperienceRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceRoleInclude<ExtArgs> | null
  /**
   * Filter, which ExperienceRoles to fetch.
   */
  where?: Prisma.ExperienceRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExperienceRoles to fetch.
   */
  orderBy?: Prisma.ExperienceRoleOrderByWithRelationInput | Prisma.ExperienceRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ExperienceRoles.
   */
  cursor?: Prisma.ExperienceRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExperienceRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExperienceRoles.
   */
  skip?: number
  distinct?: Prisma.ExperienceRoleScalarFieldEnum | Prisma.ExperienceRoleScalarFieldEnum[]
}

/**
 * ExperienceRole create
 */
export type ExperienceRoleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceRole
   */
  select?: Prisma.ExperienceRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceRole
   */
  omit?: Prisma.ExperienceRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceRoleInclude<ExtArgs> | null
  /**
   * The data needed to create a ExperienceRole.
   */
  data: Prisma.XOR<Prisma.ExperienceRoleCreateInput, Prisma.ExperienceRoleUncheckedCreateInput>
}

/**
 * ExperienceRole createMany
 */
export type ExperienceRoleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ExperienceRoles.
   */
  data: Prisma.ExperienceRoleCreateManyInput | Prisma.ExperienceRoleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ExperienceRole createManyAndReturn
 */
export type ExperienceRoleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceRole
   */
  select?: Prisma.ExperienceRoleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceRole
   */
  omit?: Prisma.ExperienceRoleOmit<ExtArgs> | null
  /**
   * The data used to create many ExperienceRoles.
   */
  data: Prisma.ExperienceRoleCreateManyInput | Prisma.ExperienceRoleCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceRoleIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ExperienceRole update
 */
export type ExperienceRoleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceRole
   */
  select?: Prisma.ExperienceRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceRole
   */
  omit?: Prisma.ExperienceRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceRoleInclude<ExtArgs> | null
  /**
   * The data needed to update a ExperienceRole.
   */
  data: Prisma.XOR<Prisma.ExperienceRoleUpdateInput, Prisma.ExperienceRoleUncheckedUpdateInput>
  /**
   * Choose, which ExperienceRole to update.
   */
  where: Prisma.ExperienceRoleWhereUniqueInput
}

/**
 * ExperienceRole updateMany
 */
export type ExperienceRoleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ExperienceRoles.
   */
  data: Prisma.XOR<Prisma.ExperienceRoleUpdateManyMutationInput, Prisma.ExperienceRoleUncheckedUpdateManyInput>
  /**
   * Filter which ExperienceRoles to update
   */
  where?: Prisma.ExperienceRoleWhereInput
  /**
   * Limit how many ExperienceRoles to update.
   */
  limit?: number
}

/**
 * ExperienceRole updateManyAndReturn
 */
export type ExperienceRoleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceRole
   */
  select?: Prisma.ExperienceRoleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceRole
   */
  omit?: Prisma.ExperienceRoleOmit<ExtArgs> | null
  /**
   * The data used to update ExperienceRoles.
   */
  data: Prisma.XOR<Prisma.ExperienceRoleUpdateManyMutationInput, Prisma.ExperienceRoleUncheckedUpdateManyInput>
  /**
   * Filter which ExperienceRoles to update
   */
  where?: Prisma.ExperienceRoleWhereInput
  /**
   * Limit how many ExperienceRoles to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceRoleIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ExperienceRole upsert
 */
export type ExperienceRoleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceRole
   */
  select?: Prisma.ExperienceRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceRole
   */
  omit?: Prisma.ExperienceRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceRoleInclude<ExtArgs> | null
  /**
   * The filter to search for the ExperienceRole to update in case it exists.
   */
  where: Prisma.ExperienceRoleWhereUniqueInput
  /**
   * In case the ExperienceRole found by the `where` argument doesn't exist, create a new ExperienceRole with this data.
   */
  create: Prisma.XOR<Prisma.ExperienceRoleCreateInput, Prisma.ExperienceRoleUncheckedCreateInput>
  /**
   * In case the ExperienceRole was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExperienceRoleUpdateInput, Prisma.ExperienceRoleUncheckedUpdateInput>
}

/**
 * ExperienceRole delete
 */
export type ExperienceRoleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceRole
   */
  select?: Prisma.ExperienceRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceRole
   */
  omit?: Prisma.ExperienceRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceRoleInclude<ExtArgs> | null
  /**
   * Filter which ExperienceRole to delete.
   */
  where: Prisma.ExperienceRoleWhereUniqueInput
}

/**
 * ExperienceRole deleteMany
 */
export type ExperienceRoleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExperienceRoles to delete
   */
  where?: Prisma.ExperienceRoleWhereInput
  /**
   * Limit how many ExperienceRoles to delete.
   */
  limit?: number
}

/**
 * ExperienceRole.tasks
 */
export type ExperienceRole$tasksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  where?: Prisma.TaskWhereInput
  orderBy?: Prisma.TaskOrderByWithRelationInput | Prisma.TaskOrderByWithRelationInput[]
  cursor?: Prisma.TaskWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * ExperienceRole without action
 */
export type ExperienceRoleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperienceRole
   */
  select?: Prisma.ExperienceRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExperienceRole
   */
  omit?: Prisma.ExperienceRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceRoleInclude<ExtArgs> | null
}
