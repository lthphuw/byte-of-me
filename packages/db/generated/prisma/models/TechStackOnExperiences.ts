
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TechStackOnExperiences` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model TechStackOnExperiences
 * 
 */
export type TechStackOnExperiencesModel = runtime.Types.Result.DefaultSelection<Prisma.$TechStackOnExperiencesPayload>

export type AggregateTechStackOnExperiences = {
  _count: TechStackOnExperiencesCountAggregateOutputType | null
  _min: TechStackOnExperiencesMinAggregateOutputType | null
  _max: TechStackOnExperiencesMaxAggregateOutputType | null
}

export type TechStackOnExperiencesMinAggregateOutputType = {
  experienceId: string | null
  techstackId: string | null
}

export type TechStackOnExperiencesMaxAggregateOutputType = {
  experienceId: string | null
  techstackId: string | null
}

export type TechStackOnExperiencesCountAggregateOutputType = {
  experienceId: number
  techstackId: number
  _all: number
}


export type TechStackOnExperiencesMinAggregateInputType = {
  experienceId?: true
  techstackId?: true
}

export type TechStackOnExperiencesMaxAggregateInputType = {
  experienceId?: true
  techstackId?: true
}

export type TechStackOnExperiencesCountAggregateInputType = {
  experienceId?: true
  techstackId?: true
  _all?: true
}

export type TechStackOnExperiencesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TechStackOnExperiences to aggregate.
   */
  where?: Prisma.TechStackOnExperiencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechStackOnExperiences to fetch.
   */
  orderBy?: Prisma.TechStackOnExperiencesOrderByWithRelationInput | Prisma.TechStackOnExperiencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TechStackOnExperiencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechStackOnExperiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechStackOnExperiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TechStackOnExperiences
  **/
  _count?: true | TechStackOnExperiencesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TechStackOnExperiencesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TechStackOnExperiencesMaxAggregateInputType
}

export type GetTechStackOnExperiencesAggregateType<T extends TechStackOnExperiencesAggregateArgs> = {
      [P in keyof T & keyof AggregateTechStackOnExperiences]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTechStackOnExperiences[P]>
    : Prisma.GetScalarType<T[P], AggregateTechStackOnExperiences[P]>
}




export type TechStackOnExperiencesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TechStackOnExperiencesWhereInput
  orderBy?: Prisma.TechStackOnExperiencesOrderByWithAggregationInput | Prisma.TechStackOnExperiencesOrderByWithAggregationInput[]
  by: Prisma.TechStackOnExperiencesScalarFieldEnum[] | Prisma.TechStackOnExperiencesScalarFieldEnum
  having?: Prisma.TechStackOnExperiencesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TechStackOnExperiencesCountAggregateInputType | true
  _min?: TechStackOnExperiencesMinAggregateInputType
  _max?: TechStackOnExperiencesMaxAggregateInputType
}

export type TechStackOnExperiencesGroupByOutputType = {
  experienceId: string
  techstackId: string
  _count: TechStackOnExperiencesCountAggregateOutputType | null
  _min: TechStackOnExperiencesMinAggregateOutputType | null
  _max: TechStackOnExperiencesMaxAggregateOutputType | null
}

type GetTechStackOnExperiencesGroupByPayload<T extends TechStackOnExperiencesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TechStackOnExperiencesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TechStackOnExperiencesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TechStackOnExperiencesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TechStackOnExperiencesGroupByOutputType[P]>
      }
    >
  > 



export type TechStackOnExperiencesWhereInput = {
  AND?: Prisma.TechStackOnExperiencesWhereInput | Prisma.TechStackOnExperiencesWhereInput[]
  OR?: Prisma.TechStackOnExperiencesWhereInput[]
  NOT?: Prisma.TechStackOnExperiencesWhereInput | Prisma.TechStackOnExperiencesWhereInput[]
  experienceId?: Prisma.StringFilter<"TechStackOnExperiences"> | string
  techstackId?: Prisma.StringFilter<"TechStackOnExperiences"> | string
  experience?: Prisma.XOR<Prisma.ExperienceScalarRelationFilter, Prisma.ExperienceWhereInput>
  techstack?: Prisma.XOR<Prisma.TechStackScalarRelationFilter, Prisma.TechStackWhereInput>
}

export type TechStackOnExperiencesOrderByWithRelationInput = {
  experienceId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
  experience?: Prisma.ExperienceOrderByWithRelationInput
  techstack?: Prisma.TechStackOrderByWithRelationInput
}

export type TechStackOnExperiencesWhereUniqueInput = Prisma.AtLeast<{
  techstackId_experienceId?: Prisma.TechStackOnExperiencesTechstackIdExperienceIdCompoundUniqueInput
  AND?: Prisma.TechStackOnExperiencesWhereInput | Prisma.TechStackOnExperiencesWhereInput[]
  OR?: Prisma.TechStackOnExperiencesWhereInput[]
  NOT?: Prisma.TechStackOnExperiencesWhereInput | Prisma.TechStackOnExperiencesWhereInput[]
  experienceId?: Prisma.StringFilter<"TechStackOnExperiences"> | string
  techstackId?: Prisma.StringFilter<"TechStackOnExperiences"> | string
  experience?: Prisma.XOR<Prisma.ExperienceScalarRelationFilter, Prisma.ExperienceWhereInput>
  techstack?: Prisma.XOR<Prisma.TechStackScalarRelationFilter, Prisma.TechStackWhereInput>
}, "techstackId_experienceId">

export type TechStackOnExperiencesOrderByWithAggregationInput = {
  experienceId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
  _count?: Prisma.TechStackOnExperiencesCountOrderByAggregateInput
  _max?: Prisma.TechStackOnExperiencesMaxOrderByAggregateInput
  _min?: Prisma.TechStackOnExperiencesMinOrderByAggregateInput
}

export type TechStackOnExperiencesScalarWhereWithAggregatesInput = {
  AND?: Prisma.TechStackOnExperiencesScalarWhereWithAggregatesInput | Prisma.TechStackOnExperiencesScalarWhereWithAggregatesInput[]
  OR?: Prisma.TechStackOnExperiencesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TechStackOnExperiencesScalarWhereWithAggregatesInput | Prisma.TechStackOnExperiencesScalarWhereWithAggregatesInput[]
  experienceId?: Prisma.StringWithAggregatesFilter<"TechStackOnExperiences"> | string
  techstackId?: Prisma.StringWithAggregatesFilter<"TechStackOnExperiences"> | string
}

export type TechStackOnExperiencesCreateInput = {
  experience: Prisma.ExperienceCreateNestedOneWithoutTechstacksInput
  techstack: Prisma.TechStackCreateNestedOneWithoutExperiencesInput
}

export type TechStackOnExperiencesUncheckedCreateInput = {
  experienceId: string
  techstackId: string
}

export type TechStackOnExperiencesUpdateInput = {
  experience?: Prisma.ExperienceUpdateOneRequiredWithoutTechstacksNestedInput
  techstack?: Prisma.TechStackUpdateOneRequiredWithoutExperiencesNestedInput
}

export type TechStackOnExperiencesUncheckedUpdateInput = {
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
  techstackId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TechStackOnExperiencesCreateManyInput = {
  experienceId: string
  techstackId: string
}

export type TechStackOnExperiencesUpdateManyMutationInput = {

}

export type TechStackOnExperiencesUncheckedUpdateManyInput = {
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
  techstackId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TechStackOnExperiencesListRelationFilter = {
  every?: Prisma.TechStackOnExperiencesWhereInput
  some?: Prisma.TechStackOnExperiencesWhereInput
  none?: Prisma.TechStackOnExperiencesWhereInput
}

export type TechStackOnExperiencesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TechStackOnExperiencesTechstackIdExperienceIdCompoundUniqueInput = {
  techstackId: string
  experienceId: string
}

export type TechStackOnExperiencesCountOrderByAggregateInput = {
  experienceId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
}

export type TechStackOnExperiencesMaxOrderByAggregateInput = {
  experienceId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
}

export type TechStackOnExperiencesMinOrderByAggregateInput = {
  experienceId?: Prisma.SortOrder
  techstackId?: Prisma.SortOrder
}

export type TechStackOnExperiencesCreateNestedManyWithoutTechstackInput = {
  create?: Prisma.XOR<Prisma.TechStackOnExperiencesCreateWithoutTechstackInput, Prisma.TechStackOnExperiencesUncheckedCreateWithoutTechstackInput> | Prisma.TechStackOnExperiencesCreateWithoutTechstackInput[] | Prisma.TechStackOnExperiencesUncheckedCreateWithoutTechstackInput[]
  connectOrCreate?: Prisma.TechStackOnExperiencesCreateOrConnectWithoutTechstackInput | Prisma.TechStackOnExperiencesCreateOrConnectWithoutTechstackInput[]
  createMany?: Prisma.TechStackOnExperiencesCreateManyTechstackInputEnvelope
  connect?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
}

export type TechStackOnExperiencesUncheckedCreateNestedManyWithoutTechstackInput = {
  create?: Prisma.XOR<Prisma.TechStackOnExperiencesCreateWithoutTechstackInput, Prisma.TechStackOnExperiencesUncheckedCreateWithoutTechstackInput> | Prisma.TechStackOnExperiencesCreateWithoutTechstackInput[] | Prisma.TechStackOnExperiencesUncheckedCreateWithoutTechstackInput[]
  connectOrCreate?: Prisma.TechStackOnExperiencesCreateOrConnectWithoutTechstackInput | Prisma.TechStackOnExperiencesCreateOrConnectWithoutTechstackInput[]
  createMany?: Prisma.TechStackOnExperiencesCreateManyTechstackInputEnvelope
  connect?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
}

export type TechStackOnExperiencesUpdateManyWithoutTechstackNestedInput = {
  create?: Prisma.XOR<Prisma.TechStackOnExperiencesCreateWithoutTechstackInput, Prisma.TechStackOnExperiencesUncheckedCreateWithoutTechstackInput> | Prisma.TechStackOnExperiencesCreateWithoutTechstackInput[] | Prisma.TechStackOnExperiencesUncheckedCreateWithoutTechstackInput[]
  connectOrCreate?: Prisma.TechStackOnExperiencesCreateOrConnectWithoutTechstackInput | Prisma.TechStackOnExperiencesCreateOrConnectWithoutTechstackInput[]
  upsert?: Prisma.TechStackOnExperiencesUpsertWithWhereUniqueWithoutTechstackInput | Prisma.TechStackOnExperiencesUpsertWithWhereUniqueWithoutTechstackInput[]
  createMany?: Prisma.TechStackOnExperiencesCreateManyTechstackInputEnvelope
  set?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  disconnect?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  delete?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  connect?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  update?: Prisma.TechStackOnExperiencesUpdateWithWhereUniqueWithoutTechstackInput | Prisma.TechStackOnExperiencesUpdateWithWhereUniqueWithoutTechstackInput[]
  updateMany?: Prisma.TechStackOnExperiencesUpdateManyWithWhereWithoutTechstackInput | Prisma.TechStackOnExperiencesUpdateManyWithWhereWithoutTechstackInput[]
  deleteMany?: Prisma.TechStackOnExperiencesScalarWhereInput | Prisma.TechStackOnExperiencesScalarWhereInput[]
}

export type TechStackOnExperiencesUncheckedUpdateManyWithoutTechstackNestedInput = {
  create?: Prisma.XOR<Prisma.TechStackOnExperiencesCreateWithoutTechstackInput, Prisma.TechStackOnExperiencesUncheckedCreateWithoutTechstackInput> | Prisma.TechStackOnExperiencesCreateWithoutTechstackInput[] | Prisma.TechStackOnExperiencesUncheckedCreateWithoutTechstackInput[]
  connectOrCreate?: Prisma.TechStackOnExperiencesCreateOrConnectWithoutTechstackInput | Prisma.TechStackOnExperiencesCreateOrConnectWithoutTechstackInput[]
  upsert?: Prisma.TechStackOnExperiencesUpsertWithWhereUniqueWithoutTechstackInput | Prisma.TechStackOnExperiencesUpsertWithWhereUniqueWithoutTechstackInput[]
  createMany?: Prisma.TechStackOnExperiencesCreateManyTechstackInputEnvelope
  set?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  disconnect?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  delete?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  connect?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  update?: Prisma.TechStackOnExperiencesUpdateWithWhereUniqueWithoutTechstackInput | Prisma.TechStackOnExperiencesUpdateWithWhereUniqueWithoutTechstackInput[]
  updateMany?: Prisma.TechStackOnExperiencesUpdateManyWithWhereWithoutTechstackInput | Prisma.TechStackOnExperiencesUpdateManyWithWhereWithoutTechstackInput[]
  deleteMany?: Prisma.TechStackOnExperiencesScalarWhereInput | Prisma.TechStackOnExperiencesScalarWhereInput[]
}

export type TechStackOnExperiencesCreateNestedManyWithoutExperienceInput = {
  create?: Prisma.XOR<Prisma.TechStackOnExperiencesCreateWithoutExperienceInput, Prisma.TechStackOnExperiencesUncheckedCreateWithoutExperienceInput> | Prisma.TechStackOnExperiencesCreateWithoutExperienceInput[] | Prisma.TechStackOnExperiencesUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.TechStackOnExperiencesCreateOrConnectWithoutExperienceInput | Prisma.TechStackOnExperiencesCreateOrConnectWithoutExperienceInput[]
  createMany?: Prisma.TechStackOnExperiencesCreateManyExperienceInputEnvelope
  connect?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
}

export type TechStackOnExperiencesUncheckedCreateNestedManyWithoutExperienceInput = {
  create?: Prisma.XOR<Prisma.TechStackOnExperiencesCreateWithoutExperienceInput, Prisma.TechStackOnExperiencesUncheckedCreateWithoutExperienceInput> | Prisma.TechStackOnExperiencesCreateWithoutExperienceInput[] | Prisma.TechStackOnExperiencesUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.TechStackOnExperiencesCreateOrConnectWithoutExperienceInput | Prisma.TechStackOnExperiencesCreateOrConnectWithoutExperienceInput[]
  createMany?: Prisma.TechStackOnExperiencesCreateManyExperienceInputEnvelope
  connect?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
}

export type TechStackOnExperiencesUpdateManyWithoutExperienceNestedInput = {
  create?: Prisma.XOR<Prisma.TechStackOnExperiencesCreateWithoutExperienceInput, Prisma.TechStackOnExperiencesUncheckedCreateWithoutExperienceInput> | Prisma.TechStackOnExperiencesCreateWithoutExperienceInput[] | Prisma.TechStackOnExperiencesUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.TechStackOnExperiencesCreateOrConnectWithoutExperienceInput | Prisma.TechStackOnExperiencesCreateOrConnectWithoutExperienceInput[]
  upsert?: Prisma.TechStackOnExperiencesUpsertWithWhereUniqueWithoutExperienceInput | Prisma.TechStackOnExperiencesUpsertWithWhereUniqueWithoutExperienceInput[]
  createMany?: Prisma.TechStackOnExperiencesCreateManyExperienceInputEnvelope
  set?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  disconnect?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  delete?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  connect?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  update?: Prisma.TechStackOnExperiencesUpdateWithWhereUniqueWithoutExperienceInput | Prisma.TechStackOnExperiencesUpdateWithWhereUniqueWithoutExperienceInput[]
  updateMany?: Prisma.TechStackOnExperiencesUpdateManyWithWhereWithoutExperienceInput | Prisma.TechStackOnExperiencesUpdateManyWithWhereWithoutExperienceInput[]
  deleteMany?: Prisma.TechStackOnExperiencesScalarWhereInput | Prisma.TechStackOnExperiencesScalarWhereInput[]
}

export type TechStackOnExperiencesUncheckedUpdateManyWithoutExperienceNestedInput = {
  create?: Prisma.XOR<Prisma.TechStackOnExperiencesCreateWithoutExperienceInput, Prisma.TechStackOnExperiencesUncheckedCreateWithoutExperienceInput> | Prisma.TechStackOnExperiencesCreateWithoutExperienceInput[] | Prisma.TechStackOnExperiencesUncheckedCreateWithoutExperienceInput[]
  connectOrCreate?: Prisma.TechStackOnExperiencesCreateOrConnectWithoutExperienceInput | Prisma.TechStackOnExperiencesCreateOrConnectWithoutExperienceInput[]
  upsert?: Prisma.TechStackOnExperiencesUpsertWithWhereUniqueWithoutExperienceInput | Prisma.TechStackOnExperiencesUpsertWithWhereUniqueWithoutExperienceInput[]
  createMany?: Prisma.TechStackOnExperiencesCreateManyExperienceInputEnvelope
  set?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  disconnect?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  delete?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  connect?: Prisma.TechStackOnExperiencesWhereUniqueInput | Prisma.TechStackOnExperiencesWhereUniqueInput[]
  update?: Prisma.TechStackOnExperiencesUpdateWithWhereUniqueWithoutExperienceInput | Prisma.TechStackOnExperiencesUpdateWithWhereUniqueWithoutExperienceInput[]
  updateMany?: Prisma.TechStackOnExperiencesUpdateManyWithWhereWithoutExperienceInput | Prisma.TechStackOnExperiencesUpdateManyWithWhereWithoutExperienceInput[]
  deleteMany?: Prisma.TechStackOnExperiencesScalarWhereInput | Prisma.TechStackOnExperiencesScalarWhereInput[]
}

export type TechStackOnExperiencesCreateWithoutTechstackInput = {
  experience: Prisma.ExperienceCreateNestedOneWithoutTechstacksInput
}

export type TechStackOnExperiencesUncheckedCreateWithoutTechstackInput = {
  experienceId: string
}

export type TechStackOnExperiencesCreateOrConnectWithoutTechstackInput = {
  where: Prisma.TechStackOnExperiencesWhereUniqueInput
  create: Prisma.XOR<Prisma.TechStackOnExperiencesCreateWithoutTechstackInput, Prisma.TechStackOnExperiencesUncheckedCreateWithoutTechstackInput>
}

export type TechStackOnExperiencesCreateManyTechstackInputEnvelope = {
  data: Prisma.TechStackOnExperiencesCreateManyTechstackInput | Prisma.TechStackOnExperiencesCreateManyTechstackInput[]
  skipDuplicates?: boolean
}

export type TechStackOnExperiencesUpsertWithWhereUniqueWithoutTechstackInput = {
  where: Prisma.TechStackOnExperiencesWhereUniqueInput
  update: Prisma.XOR<Prisma.TechStackOnExperiencesUpdateWithoutTechstackInput, Prisma.TechStackOnExperiencesUncheckedUpdateWithoutTechstackInput>
  create: Prisma.XOR<Prisma.TechStackOnExperiencesCreateWithoutTechstackInput, Prisma.TechStackOnExperiencesUncheckedCreateWithoutTechstackInput>
}

export type TechStackOnExperiencesUpdateWithWhereUniqueWithoutTechstackInput = {
  where: Prisma.TechStackOnExperiencesWhereUniqueInput
  data: Prisma.XOR<Prisma.TechStackOnExperiencesUpdateWithoutTechstackInput, Prisma.TechStackOnExperiencesUncheckedUpdateWithoutTechstackInput>
}

export type TechStackOnExperiencesUpdateManyWithWhereWithoutTechstackInput = {
  where: Prisma.TechStackOnExperiencesScalarWhereInput
  data: Prisma.XOR<Prisma.TechStackOnExperiencesUpdateManyMutationInput, Prisma.TechStackOnExperiencesUncheckedUpdateManyWithoutTechstackInput>
}

export type TechStackOnExperiencesScalarWhereInput = {
  AND?: Prisma.TechStackOnExperiencesScalarWhereInput | Prisma.TechStackOnExperiencesScalarWhereInput[]
  OR?: Prisma.TechStackOnExperiencesScalarWhereInput[]
  NOT?: Prisma.TechStackOnExperiencesScalarWhereInput | Prisma.TechStackOnExperiencesScalarWhereInput[]
  experienceId?: Prisma.StringFilter<"TechStackOnExperiences"> | string
  techstackId?: Prisma.StringFilter<"TechStackOnExperiences"> | string
}

export type TechStackOnExperiencesCreateWithoutExperienceInput = {
  techstack: Prisma.TechStackCreateNestedOneWithoutExperiencesInput
}

export type TechStackOnExperiencesUncheckedCreateWithoutExperienceInput = {
  techstackId: string
}

export type TechStackOnExperiencesCreateOrConnectWithoutExperienceInput = {
  where: Prisma.TechStackOnExperiencesWhereUniqueInput
  create: Prisma.XOR<Prisma.TechStackOnExperiencesCreateWithoutExperienceInput, Prisma.TechStackOnExperiencesUncheckedCreateWithoutExperienceInput>
}

export type TechStackOnExperiencesCreateManyExperienceInputEnvelope = {
  data: Prisma.TechStackOnExperiencesCreateManyExperienceInput | Prisma.TechStackOnExperiencesCreateManyExperienceInput[]
  skipDuplicates?: boolean
}

export type TechStackOnExperiencesUpsertWithWhereUniqueWithoutExperienceInput = {
  where: Prisma.TechStackOnExperiencesWhereUniqueInput
  update: Prisma.XOR<Prisma.TechStackOnExperiencesUpdateWithoutExperienceInput, Prisma.TechStackOnExperiencesUncheckedUpdateWithoutExperienceInput>
  create: Prisma.XOR<Prisma.TechStackOnExperiencesCreateWithoutExperienceInput, Prisma.TechStackOnExperiencesUncheckedCreateWithoutExperienceInput>
}

export type TechStackOnExperiencesUpdateWithWhereUniqueWithoutExperienceInput = {
  where: Prisma.TechStackOnExperiencesWhereUniqueInput
  data: Prisma.XOR<Prisma.TechStackOnExperiencesUpdateWithoutExperienceInput, Prisma.TechStackOnExperiencesUncheckedUpdateWithoutExperienceInput>
}

export type TechStackOnExperiencesUpdateManyWithWhereWithoutExperienceInput = {
  where: Prisma.TechStackOnExperiencesScalarWhereInput
  data: Prisma.XOR<Prisma.TechStackOnExperiencesUpdateManyMutationInput, Prisma.TechStackOnExperiencesUncheckedUpdateManyWithoutExperienceInput>
}

export type TechStackOnExperiencesCreateManyTechstackInput = {
  experienceId: string
}

export type TechStackOnExperiencesUpdateWithoutTechstackInput = {
  experience?: Prisma.ExperienceUpdateOneRequiredWithoutTechstacksNestedInput
}

export type TechStackOnExperiencesUncheckedUpdateWithoutTechstackInput = {
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TechStackOnExperiencesUncheckedUpdateManyWithoutTechstackInput = {
  experienceId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TechStackOnExperiencesCreateManyExperienceInput = {
  techstackId: string
}

export type TechStackOnExperiencesUpdateWithoutExperienceInput = {
  techstack?: Prisma.TechStackUpdateOneRequiredWithoutExperiencesNestedInput
}

export type TechStackOnExperiencesUncheckedUpdateWithoutExperienceInput = {
  techstackId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TechStackOnExperiencesUncheckedUpdateManyWithoutExperienceInput = {
  techstackId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type TechStackOnExperiencesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  experienceId?: boolean
  techstackId?: boolean
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
  techstack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}, ExtArgs["result"]["techStackOnExperiences"]>

export type TechStackOnExperiencesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  experienceId?: boolean
  techstackId?: boolean
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
  techstack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}, ExtArgs["result"]["techStackOnExperiences"]>

export type TechStackOnExperiencesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  experienceId?: boolean
  techstackId?: boolean
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
  techstack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}, ExtArgs["result"]["techStackOnExperiences"]>

export type TechStackOnExperiencesSelectScalar = {
  experienceId?: boolean
  techstackId?: boolean
}

export type TechStackOnExperiencesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"experienceId" | "techstackId", ExtArgs["result"]["techStackOnExperiences"]>
export type TechStackOnExperiencesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
  techstack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}
export type TechStackOnExperiencesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
  techstack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}
export type TechStackOnExperiencesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  experience?: boolean | Prisma.ExperienceDefaultArgs<ExtArgs>
  techstack?: boolean | Prisma.TechStackDefaultArgs<ExtArgs>
}

export type $TechStackOnExperiencesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TechStackOnExperiences"
  objects: {
    experience: Prisma.$ExperiencePayload<ExtArgs>
    techstack: Prisma.$TechStackPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    experienceId: string
    techstackId: string
  }, ExtArgs["result"]["techStackOnExperiences"]>
  composites: {}
}

export type TechStackOnExperiencesGetPayload<S extends boolean | null | undefined | TechStackOnExperiencesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TechStackOnExperiencesPayload, S>

export type TechStackOnExperiencesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TechStackOnExperiencesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TechStackOnExperiencesCountAggregateInputType | true
  }

export interface TechStackOnExperiencesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TechStackOnExperiences'], meta: { name: 'TechStackOnExperiences' } }
  /**
   * Find zero or one TechStackOnExperiences that matches the filter.
   * @param {TechStackOnExperiencesFindUniqueArgs} args - Arguments to find a TechStackOnExperiences
   * @example
   * // Get one TechStackOnExperiences
   * const techStackOnExperiences = await prisma.techStackOnExperiences.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TechStackOnExperiencesFindUniqueArgs>(args: Prisma.SelectSubset<T, TechStackOnExperiencesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TechStackOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnExperiencesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TechStackOnExperiences that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TechStackOnExperiencesFindUniqueOrThrowArgs} args - Arguments to find a TechStackOnExperiences
   * @example
   * // Get one TechStackOnExperiences
   * const techStackOnExperiences = await prisma.techStackOnExperiences.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TechStackOnExperiencesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TechStackOnExperiencesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TechStackOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnExperiencesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TechStackOnExperiences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackOnExperiencesFindFirstArgs} args - Arguments to find a TechStackOnExperiences
   * @example
   * // Get one TechStackOnExperiences
   * const techStackOnExperiences = await prisma.techStackOnExperiences.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TechStackOnExperiencesFindFirstArgs>(args?: Prisma.SelectSubset<T, TechStackOnExperiencesFindFirstArgs<ExtArgs>>): Prisma.Prisma__TechStackOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnExperiencesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TechStackOnExperiences that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackOnExperiencesFindFirstOrThrowArgs} args - Arguments to find a TechStackOnExperiences
   * @example
   * // Get one TechStackOnExperiences
   * const techStackOnExperiences = await prisma.techStackOnExperiences.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TechStackOnExperiencesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TechStackOnExperiencesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TechStackOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnExperiencesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TechStackOnExperiences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackOnExperiencesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TechStackOnExperiences
   * const techStackOnExperiences = await prisma.techStackOnExperiences.findMany()
   * 
   * // Get first 10 TechStackOnExperiences
   * const techStackOnExperiences = await prisma.techStackOnExperiences.findMany({ take: 10 })
   * 
   * // Only select the `experienceId`
   * const techStackOnExperiencesWithExperienceIdOnly = await prisma.techStackOnExperiences.findMany({ select: { experienceId: true } })
   * 
   */
  findMany<T extends TechStackOnExperiencesFindManyArgs>(args?: Prisma.SelectSubset<T, TechStackOnExperiencesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechStackOnExperiencesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TechStackOnExperiences.
   * @param {TechStackOnExperiencesCreateArgs} args - Arguments to create a TechStackOnExperiences.
   * @example
   * // Create one TechStackOnExperiences
   * const TechStackOnExperiences = await prisma.techStackOnExperiences.create({
   *   data: {
   *     // ... data to create a TechStackOnExperiences
   *   }
   * })
   * 
   */
  create<T extends TechStackOnExperiencesCreateArgs>(args: Prisma.SelectSubset<T, TechStackOnExperiencesCreateArgs<ExtArgs>>): Prisma.Prisma__TechStackOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnExperiencesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TechStackOnExperiences.
   * @param {TechStackOnExperiencesCreateManyArgs} args - Arguments to create many TechStackOnExperiences.
   * @example
   * // Create many TechStackOnExperiences
   * const techStackOnExperiences = await prisma.techStackOnExperiences.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TechStackOnExperiencesCreateManyArgs>(args?: Prisma.SelectSubset<T, TechStackOnExperiencesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TechStackOnExperiences and returns the data saved in the database.
   * @param {TechStackOnExperiencesCreateManyAndReturnArgs} args - Arguments to create many TechStackOnExperiences.
   * @example
   * // Create many TechStackOnExperiences
   * const techStackOnExperiences = await prisma.techStackOnExperiences.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TechStackOnExperiences and only return the `experienceId`
   * const techStackOnExperiencesWithExperienceIdOnly = await prisma.techStackOnExperiences.createManyAndReturn({
   *   select: { experienceId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TechStackOnExperiencesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TechStackOnExperiencesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechStackOnExperiencesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TechStackOnExperiences.
   * @param {TechStackOnExperiencesDeleteArgs} args - Arguments to delete one TechStackOnExperiences.
   * @example
   * // Delete one TechStackOnExperiences
   * const TechStackOnExperiences = await prisma.techStackOnExperiences.delete({
   *   where: {
   *     // ... filter to delete one TechStackOnExperiences
   *   }
   * })
   * 
   */
  delete<T extends TechStackOnExperiencesDeleteArgs>(args: Prisma.SelectSubset<T, TechStackOnExperiencesDeleteArgs<ExtArgs>>): Prisma.Prisma__TechStackOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnExperiencesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TechStackOnExperiences.
   * @param {TechStackOnExperiencesUpdateArgs} args - Arguments to update one TechStackOnExperiences.
   * @example
   * // Update one TechStackOnExperiences
   * const techStackOnExperiences = await prisma.techStackOnExperiences.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TechStackOnExperiencesUpdateArgs>(args: Prisma.SelectSubset<T, TechStackOnExperiencesUpdateArgs<ExtArgs>>): Prisma.Prisma__TechStackOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnExperiencesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TechStackOnExperiences.
   * @param {TechStackOnExperiencesDeleteManyArgs} args - Arguments to filter TechStackOnExperiences to delete.
   * @example
   * // Delete a few TechStackOnExperiences
   * const { count } = await prisma.techStackOnExperiences.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TechStackOnExperiencesDeleteManyArgs>(args?: Prisma.SelectSubset<T, TechStackOnExperiencesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TechStackOnExperiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackOnExperiencesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TechStackOnExperiences
   * const techStackOnExperiences = await prisma.techStackOnExperiences.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TechStackOnExperiencesUpdateManyArgs>(args: Prisma.SelectSubset<T, TechStackOnExperiencesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TechStackOnExperiences and returns the data updated in the database.
   * @param {TechStackOnExperiencesUpdateManyAndReturnArgs} args - Arguments to update many TechStackOnExperiences.
   * @example
   * // Update many TechStackOnExperiences
   * const techStackOnExperiences = await prisma.techStackOnExperiences.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TechStackOnExperiences and only return the `experienceId`
   * const techStackOnExperiencesWithExperienceIdOnly = await prisma.techStackOnExperiences.updateManyAndReturn({
   *   select: { experienceId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TechStackOnExperiencesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TechStackOnExperiencesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechStackOnExperiencesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TechStackOnExperiences.
   * @param {TechStackOnExperiencesUpsertArgs} args - Arguments to update or create a TechStackOnExperiences.
   * @example
   * // Update or create a TechStackOnExperiences
   * const techStackOnExperiences = await prisma.techStackOnExperiences.upsert({
   *   create: {
   *     // ... data to create a TechStackOnExperiences
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TechStackOnExperiences we want to update
   *   }
   * })
   */
  upsert<T extends TechStackOnExperiencesUpsertArgs>(args: Prisma.SelectSubset<T, TechStackOnExperiencesUpsertArgs<ExtArgs>>): Prisma.Prisma__TechStackOnExperiencesClient<runtime.Types.Result.GetResult<Prisma.$TechStackOnExperiencesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TechStackOnExperiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackOnExperiencesCountArgs} args - Arguments to filter TechStackOnExperiences to count.
   * @example
   * // Count the number of TechStackOnExperiences
   * const count = await prisma.techStackOnExperiences.count({
   *   where: {
   *     // ... the filter for the TechStackOnExperiences we want to count
   *   }
   * })
  **/
  count<T extends TechStackOnExperiencesCountArgs>(
    args?: Prisma.Subset<T, TechStackOnExperiencesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TechStackOnExperiencesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TechStackOnExperiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackOnExperiencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TechStackOnExperiencesAggregateArgs>(args: Prisma.Subset<T, TechStackOnExperiencesAggregateArgs>): Prisma.PrismaPromise<GetTechStackOnExperiencesAggregateType<T>>

  /**
   * Group by TechStackOnExperiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackOnExperiencesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TechStackOnExperiencesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TechStackOnExperiencesGroupByArgs['orderBy'] }
      : { orderBy?: TechStackOnExperiencesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TechStackOnExperiencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTechStackOnExperiencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TechStackOnExperiences model
 */
readonly fields: TechStackOnExperiencesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TechStackOnExperiences.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TechStackOnExperiencesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  experience<T extends Prisma.ExperienceDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ExperienceDefaultArgs<ExtArgs>>): Prisma.Prisma__ExperienceClient<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  techstack<T extends Prisma.TechStackDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TechStackDefaultArgs<ExtArgs>>): Prisma.Prisma__TechStackClient<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TechStackOnExperiences model
 */
export interface TechStackOnExperiencesFieldRefs {
  readonly experienceId: Prisma.FieldRef<"TechStackOnExperiences", 'String'>
  readonly techstackId: Prisma.FieldRef<"TechStackOnExperiences", 'String'>
}
    

// Custom InputTypes
/**
 * TechStackOnExperiences findUnique
 */
export type TechStackOnExperiencesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnExperiences
   */
  select?: Prisma.TechStackOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnExperiences
   */
  omit?: Prisma.TechStackOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which TechStackOnExperiences to fetch.
   */
  where: Prisma.TechStackOnExperiencesWhereUniqueInput
}

/**
 * TechStackOnExperiences findUniqueOrThrow
 */
export type TechStackOnExperiencesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnExperiences
   */
  select?: Prisma.TechStackOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnExperiences
   */
  omit?: Prisma.TechStackOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which TechStackOnExperiences to fetch.
   */
  where: Prisma.TechStackOnExperiencesWhereUniqueInput
}

/**
 * TechStackOnExperiences findFirst
 */
export type TechStackOnExperiencesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnExperiences
   */
  select?: Prisma.TechStackOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnExperiences
   */
  omit?: Prisma.TechStackOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which TechStackOnExperiences to fetch.
   */
  where?: Prisma.TechStackOnExperiencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechStackOnExperiences to fetch.
   */
  orderBy?: Prisma.TechStackOnExperiencesOrderByWithRelationInput | Prisma.TechStackOnExperiencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TechStackOnExperiences.
   */
  cursor?: Prisma.TechStackOnExperiencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechStackOnExperiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechStackOnExperiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TechStackOnExperiences.
   */
  distinct?: Prisma.TechStackOnExperiencesScalarFieldEnum | Prisma.TechStackOnExperiencesScalarFieldEnum[]
}

/**
 * TechStackOnExperiences findFirstOrThrow
 */
export type TechStackOnExperiencesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnExperiences
   */
  select?: Prisma.TechStackOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnExperiences
   */
  omit?: Prisma.TechStackOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which TechStackOnExperiences to fetch.
   */
  where?: Prisma.TechStackOnExperiencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechStackOnExperiences to fetch.
   */
  orderBy?: Prisma.TechStackOnExperiencesOrderByWithRelationInput | Prisma.TechStackOnExperiencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TechStackOnExperiences.
   */
  cursor?: Prisma.TechStackOnExperiencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechStackOnExperiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechStackOnExperiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TechStackOnExperiences.
   */
  distinct?: Prisma.TechStackOnExperiencesScalarFieldEnum | Prisma.TechStackOnExperiencesScalarFieldEnum[]
}

/**
 * TechStackOnExperiences findMany
 */
export type TechStackOnExperiencesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnExperiences
   */
  select?: Prisma.TechStackOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnExperiences
   */
  omit?: Prisma.TechStackOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which TechStackOnExperiences to fetch.
   */
  where?: Prisma.TechStackOnExperiencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechStackOnExperiences to fetch.
   */
  orderBy?: Prisma.TechStackOnExperiencesOrderByWithRelationInput | Prisma.TechStackOnExperiencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TechStackOnExperiences.
   */
  cursor?: Prisma.TechStackOnExperiencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechStackOnExperiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechStackOnExperiences.
   */
  skip?: number
  distinct?: Prisma.TechStackOnExperiencesScalarFieldEnum | Prisma.TechStackOnExperiencesScalarFieldEnum[]
}

/**
 * TechStackOnExperiences create
 */
export type TechStackOnExperiencesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnExperiences
   */
  select?: Prisma.TechStackOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnExperiences
   */
  omit?: Prisma.TechStackOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnExperiencesInclude<ExtArgs> | null
  /**
   * The data needed to create a TechStackOnExperiences.
   */
  data: Prisma.XOR<Prisma.TechStackOnExperiencesCreateInput, Prisma.TechStackOnExperiencesUncheckedCreateInput>
}

/**
 * TechStackOnExperiences createMany
 */
export type TechStackOnExperiencesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TechStackOnExperiences.
   */
  data: Prisma.TechStackOnExperiencesCreateManyInput | Prisma.TechStackOnExperiencesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TechStackOnExperiences createManyAndReturn
 */
export type TechStackOnExperiencesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnExperiences
   */
  select?: Prisma.TechStackOnExperiencesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnExperiences
   */
  omit?: Prisma.TechStackOnExperiencesOmit<ExtArgs> | null
  /**
   * The data used to create many TechStackOnExperiences.
   */
  data: Prisma.TechStackOnExperiencesCreateManyInput | Prisma.TechStackOnExperiencesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnExperiencesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TechStackOnExperiences update
 */
export type TechStackOnExperiencesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnExperiences
   */
  select?: Prisma.TechStackOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnExperiences
   */
  omit?: Prisma.TechStackOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnExperiencesInclude<ExtArgs> | null
  /**
   * The data needed to update a TechStackOnExperiences.
   */
  data: Prisma.XOR<Prisma.TechStackOnExperiencesUpdateInput, Prisma.TechStackOnExperiencesUncheckedUpdateInput>
  /**
   * Choose, which TechStackOnExperiences to update.
   */
  where: Prisma.TechStackOnExperiencesWhereUniqueInput
}

/**
 * TechStackOnExperiences updateMany
 */
export type TechStackOnExperiencesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TechStackOnExperiences.
   */
  data: Prisma.XOR<Prisma.TechStackOnExperiencesUpdateManyMutationInput, Prisma.TechStackOnExperiencesUncheckedUpdateManyInput>
  /**
   * Filter which TechStackOnExperiences to update
   */
  where?: Prisma.TechStackOnExperiencesWhereInput
  /**
   * Limit how many TechStackOnExperiences to update.
   */
  limit?: number
}

/**
 * TechStackOnExperiences updateManyAndReturn
 */
export type TechStackOnExperiencesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnExperiences
   */
  select?: Prisma.TechStackOnExperiencesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnExperiences
   */
  omit?: Prisma.TechStackOnExperiencesOmit<ExtArgs> | null
  /**
   * The data used to update TechStackOnExperiences.
   */
  data: Prisma.XOR<Prisma.TechStackOnExperiencesUpdateManyMutationInput, Prisma.TechStackOnExperiencesUncheckedUpdateManyInput>
  /**
   * Filter which TechStackOnExperiences to update
   */
  where?: Prisma.TechStackOnExperiencesWhereInput
  /**
   * Limit how many TechStackOnExperiences to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnExperiencesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TechStackOnExperiences upsert
 */
export type TechStackOnExperiencesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnExperiences
   */
  select?: Prisma.TechStackOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnExperiences
   */
  omit?: Prisma.TechStackOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnExperiencesInclude<ExtArgs> | null
  /**
   * The filter to search for the TechStackOnExperiences to update in case it exists.
   */
  where: Prisma.TechStackOnExperiencesWhereUniqueInput
  /**
   * In case the TechStackOnExperiences found by the `where` argument doesn't exist, create a new TechStackOnExperiences with this data.
   */
  create: Prisma.XOR<Prisma.TechStackOnExperiencesCreateInput, Prisma.TechStackOnExperiencesUncheckedCreateInput>
  /**
   * In case the TechStackOnExperiences was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TechStackOnExperiencesUpdateInput, Prisma.TechStackOnExperiencesUncheckedUpdateInput>
}

/**
 * TechStackOnExperiences delete
 */
export type TechStackOnExperiencesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnExperiences
   */
  select?: Prisma.TechStackOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnExperiences
   */
  omit?: Prisma.TechStackOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnExperiencesInclude<ExtArgs> | null
  /**
   * Filter which TechStackOnExperiences to delete.
   */
  where: Prisma.TechStackOnExperiencesWhereUniqueInput
}

/**
 * TechStackOnExperiences deleteMany
 */
export type TechStackOnExperiencesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TechStackOnExperiences to delete
   */
  where?: Prisma.TechStackOnExperiencesWhereInput
  /**
   * Limit how many TechStackOnExperiences to delete.
   */
  limit?: number
}

/**
 * TechStackOnExperiences without action
 */
export type TechStackOnExperiencesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStackOnExperiences
   */
  select?: Prisma.TechStackOnExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStackOnExperiences
   */
  omit?: Prisma.TechStackOnExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechStackOnExperiencesInclude<ExtArgs> | null
}
