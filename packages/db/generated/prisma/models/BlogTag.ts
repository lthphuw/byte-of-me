
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `BlogTag` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model BlogTag
 * 
 */
export type BlogTagModel = runtime.Types.Result.DefaultSelection<Prisma.$BlogTagPayload>

export type AggregateBlogTag = {
  _count: BlogTagCountAggregateOutputType | null
  _min: BlogTagMinAggregateOutputType | null
  _max: BlogTagMaxAggregateOutputType | null
}

export type BlogTagMinAggregateOutputType = {
  blogId: string | null
  tagId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BlogTagMaxAggregateOutputType = {
  blogId: string | null
  tagId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BlogTagCountAggregateOutputType = {
  blogId: number
  tagId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type BlogTagMinAggregateInputType = {
  blogId?: true
  tagId?: true
  createdAt?: true
  updatedAt?: true
}

export type BlogTagMaxAggregateInputType = {
  blogId?: true
  tagId?: true
  createdAt?: true
  updatedAt?: true
}

export type BlogTagCountAggregateInputType = {
  blogId?: true
  tagId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type BlogTagAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BlogTag to aggregate.
   */
  where?: Prisma.BlogTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BlogTags to fetch.
   */
  orderBy?: Prisma.BlogTagOrderByWithRelationInput | Prisma.BlogTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BlogTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BlogTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BlogTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BlogTags
  **/
  _count?: true | BlogTagCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BlogTagMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BlogTagMaxAggregateInputType
}

export type GetBlogTagAggregateType<T extends BlogTagAggregateArgs> = {
      [P in keyof T & keyof AggregateBlogTag]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBlogTag[P]>
    : Prisma.GetScalarType<T[P], AggregateBlogTag[P]>
}




export type BlogTagGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BlogTagWhereInput
  orderBy?: Prisma.BlogTagOrderByWithAggregationInput | Prisma.BlogTagOrderByWithAggregationInput[]
  by: Prisma.BlogTagScalarFieldEnum[] | Prisma.BlogTagScalarFieldEnum
  having?: Prisma.BlogTagScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BlogTagCountAggregateInputType | true
  _min?: BlogTagMinAggregateInputType
  _max?: BlogTagMaxAggregateInputType
}

export type BlogTagGroupByOutputType = {
  blogId: string
  tagId: string
  createdAt: Date
  updatedAt: Date
  _count: BlogTagCountAggregateOutputType | null
  _min: BlogTagMinAggregateOutputType | null
  _max: BlogTagMaxAggregateOutputType | null
}

type GetBlogTagGroupByPayload<T extends BlogTagGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BlogTagGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BlogTagGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BlogTagGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BlogTagGroupByOutputType[P]>
      }
    >
  > 



export type BlogTagWhereInput = {
  AND?: Prisma.BlogTagWhereInput | Prisma.BlogTagWhereInput[]
  OR?: Prisma.BlogTagWhereInput[]
  NOT?: Prisma.BlogTagWhereInput | Prisma.BlogTagWhereInput[]
  blogId?: Prisma.StringFilter<"BlogTag"> | string
  tagId?: Prisma.StringFilter<"BlogTag"> | string
  createdAt?: Prisma.DateTimeFilter<"BlogTag"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"BlogTag"> | Date | string
  blog?: Prisma.XOR<Prisma.BlogScalarRelationFilter, Prisma.BlogWhereInput>
  tag?: Prisma.XOR<Prisma.TagScalarRelationFilter, Prisma.TagWhereInput>
}

export type BlogTagOrderByWithRelationInput = {
  blogId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  blog?: Prisma.BlogOrderByWithRelationInput
  tag?: Prisma.TagOrderByWithRelationInput
}

export type BlogTagWhereUniqueInput = Prisma.AtLeast<{
  blogId_tagId?: Prisma.BlogTagBlogIdTagIdCompoundUniqueInput
  AND?: Prisma.BlogTagWhereInput | Prisma.BlogTagWhereInput[]
  OR?: Prisma.BlogTagWhereInput[]
  NOT?: Prisma.BlogTagWhereInput | Prisma.BlogTagWhereInput[]
  blogId?: Prisma.StringFilter<"BlogTag"> | string
  tagId?: Prisma.StringFilter<"BlogTag"> | string
  createdAt?: Prisma.DateTimeFilter<"BlogTag"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"BlogTag"> | Date | string
  blog?: Prisma.XOR<Prisma.BlogScalarRelationFilter, Prisma.BlogWhereInput>
  tag?: Prisma.XOR<Prisma.TagScalarRelationFilter, Prisma.TagWhereInput>
}, "blogId_tagId">

export type BlogTagOrderByWithAggregationInput = {
  blogId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.BlogTagCountOrderByAggregateInput
  _max?: Prisma.BlogTagMaxOrderByAggregateInput
  _min?: Prisma.BlogTagMinOrderByAggregateInput
}

export type BlogTagScalarWhereWithAggregatesInput = {
  AND?: Prisma.BlogTagScalarWhereWithAggregatesInput | Prisma.BlogTagScalarWhereWithAggregatesInput[]
  OR?: Prisma.BlogTagScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BlogTagScalarWhereWithAggregatesInput | Prisma.BlogTagScalarWhereWithAggregatesInput[]
  blogId?: Prisma.StringWithAggregatesFilter<"BlogTag"> | string
  tagId?: Prisma.StringWithAggregatesFilter<"BlogTag"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"BlogTag"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"BlogTag"> | Date | string
}

export type BlogTagCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  blog: Prisma.BlogCreateNestedOneWithoutTagsInput
  tag: Prisma.TagCreateNestedOneWithoutBlogsInput
}

export type BlogTagUncheckedCreateInput = {
  blogId: string
  tagId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BlogTagUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  blog?: Prisma.BlogUpdateOneRequiredWithoutTagsNestedInput
  tag?: Prisma.TagUpdateOneRequiredWithoutBlogsNestedInput
}

export type BlogTagUncheckedUpdateInput = {
  blogId?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BlogTagCreateManyInput = {
  blogId: string
  tagId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BlogTagUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BlogTagUncheckedUpdateManyInput = {
  blogId?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BlogTagListRelationFilter = {
  every?: Prisma.BlogTagWhereInput
  some?: Prisma.BlogTagWhereInput
  none?: Prisma.BlogTagWhereInput
}

export type BlogTagOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BlogTagBlogIdTagIdCompoundUniqueInput = {
  blogId: string
  tagId: string
}

export type BlogTagCountOrderByAggregateInput = {
  blogId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BlogTagMaxOrderByAggregateInput = {
  blogId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BlogTagMinOrderByAggregateInput = {
  blogId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BlogTagCreateNestedManyWithoutBlogInput = {
  create?: Prisma.XOR<Prisma.BlogTagCreateWithoutBlogInput, Prisma.BlogTagUncheckedCreateWithoutBlogInput> | Prisma.BlogTagCreateWithoutBlogInput[] | Prisma.BlogTagUncheckedCreateWithoutBlogInput[]
  connectOrCreate?: Prisma.BlogTagCreateOrConnectWithoutBlogInput | Prisma.BlogTagCreateOrConnectWithoutBlogInput[]
  createMany?: Prisma.BlogTagCreateManyBlogInputEnvelope
  connect?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
}

export type BlogTagUncheckedCreateNestedManyWithoutBlogInput = {
  create?: Prisma.XOR<Prisma.BlogTagCreateWithoutBlogInput, Prisma.BlogTagUncheckedCreateWithoutBlogInput> | Prisma.BlogTagCreateWithoutBlogInput[] | Prisma.BlogTagUncheckedCreateWithoutBlogInput[]
  connectOrCreate?: Prisma.BlogTagCreateOrConnectWithoutBlogInput | Prisma.BlogTagCreateOrConnectWithoutBlogInput[]
  createMany?: Prisma.BlogTagCreateManyBlogInputEnvelope
  connect?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
}

export type BlogTagUpdateManyWithoutBlogNestedInput = {
  create?: Prisma.XOR<Prisma.BlogTagCreateWithoutBlogInput, Prisma.BlogTagUncheckedCreateWithoutBlogInput> | Prisma.BlogTagCreateWithoutBlogInput[] | Prisma.BlogTagUncheckedCreateWithoutBlogInput[]
  connectOrCreate?: Prisma.BlogTagCreateOrConnectWithoutBlogInput | Prisma.BlogTagCreateOrConnectWithoutBlogInput[]
  upsert?: Prisma.BlogTagUpsertWithWhereUniqueWithoutBlogInput | Prisma.BlogTagUpsertWithWhereUniqueWithoutBlogInput[]
  createMany?: Prisma.BlogTagCreateManyBlogInputEnvelope
  set?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  disconnect?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  delete?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  connect?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  update?: Prisma.BlogTagUpdateWithWhereUniqueWithoutBlogInput | Prisma.BlogTagUpdateWithWhereUniqueWithoutBlogInput[]
  updateMany?: Prisma.BlogTagUpdateManyWithWhereWithoutBlogInput | Prisma.BlogTagUpdateManyWithWhereWithoutBlogInput[]
  deleteMany?: Prisma.BlogTagScalarWhereInput | Prisma.BlogTagScalarWhereInput[]
}

export type BlogTagUncheckedUpdateManyWithoutBlogNestedInput = {
  create?: Prisma.XOR<Prisma.BlogTagCreateWithoutBlogInput, Prisma.BlogTagUncheckedCreateWithoutBlogInput> | Prisma.BlogTagCreateWithoutBlogInput[] | Prisma.BlogTagUncheckedCreateWithoutBlogInput[]
  connectOrCreate?: Prisma.BlogTagCreateOrConnectWithoutBlogInput | Prisma.BlogTagCreateOrConnectWithoutBlogInput[]
  upsert?: Prisma.BlogTagUpsertWithWhereUniqueWithoutBlogInput | Prisma.BlogTagUpsertWithWhereUniqueWithoutBlogInput[]
  createMany?: Prisma.BlogTagCreateManyBlogInputEnvelope
  set?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  disconnect?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  delete?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  connect?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  update?: Prisma.BlogTagUpdateWithWhereUniqueWithoutBlogInput | Prisma.BlogTagUpdateWithWhereUniqueWithoutBlogInput[]
  updateMany?: Prisma.BlogTagUpdateManyWithWhereWithoutBlogInput | Prisma.BlogTagUpdateManyWithWhereWithoutBlogInput[]
  deleteMany?: Prisma.BlogTagScalarWhereInput | Prisma.BlogTagScalarWhereInput[]
}

export type BlogTagCreateNestedManyWithoutTagInput = {
  create?: Prisma.XOR<Prisma.BlogTagCreateWithoutTagInput, Prisma.BlogTagUncheckedCreateWithoutTagInput> | Prisma.BlogTagCreateWithoutTagInput[] | Prisma.BlogTagUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.BlogTagCreateOrConnectWithoutTagInput | Prisma.BlogTagCreateOrConnectWithoutTagInput[]
  createMany?: Prisma.BlogTagCreateManyTagInputEnvelope
  connect?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
}

export type BlogTagUncheckedCreateNestedManyWithoutTagInput = {
  create?: Prisma.XOR<Prisma.BlogTagCreateWithoutTagInput, Prisma.BlogTagUncheckedCreateWithoutTagInput> | Prisma.BlogTagCreateWithoutTagInput[] | Prisma.BlogTagUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.BlogTagCreateOrConnectWithoutTagInput | Prisma.BlogTagCreateOrConnectWithoutTagInput[]
  createMany?: Prisma.BlogTagCreateManyTagInputEnvelope
  connect?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
}

export type BlogTagUpdateManyWithoutTagNestedInput = {
  create?: Prisma.XOR<Prisma.BlogTagCreateWithoutTagInput, Prisma.BlogTagUncheckedCreateWithoutTagInput> | Prisma.BlogTagCreateWithoutTagInput[] | Prisma.BlogTagUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.BlogTagCreateOrConnectWithoutTagInput | Prisma.BlogTagCreateOrConnectWithoutTagInput[]
  upsert?: Prisma.BlogTagUpsertWithWhereUniqueWithoutTagInput | Prisma.BlogTagUpsertWithWhereUniqueWithoutTagInput[]
  createMany?: Prisma.BlogTagCreateManyTagInputEnvelope
  set?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  disconnect?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  delete?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  connect?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  update?: Prisma.BlogTagUpdateWithWhereUniqueWithoutTagInput | Prisma.BlogTagUpdateWithWhereUniqueWithoutTagInput[]
  updateMany?: Prisma.BlogTagUpdateManyWithWhereWithoutTagInput | Prisma.BlogTagUpdateManyWithWhereWithoutTagInput[]
  deleteMany?: Prisma.BlogTagScalarWhereInput | Prisma.BlogTagScalarWhereInput[]
}

export type BlogTagUncheckedUpdateManyWithoutTagNestedInput = {
  create?: Prisma.XOR<Prisma.BlogTagCreateWithoutTagInput, Prisma.BlogTagUncheckedCreateWithoutTagInput> | Prisma.BlogTagCreateWithoutTagInput[] | Prisma.BlogTagUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.BlogTagCreateOrConnectWithoutTagInput | Prisma.BlogTagCreateOrConnectWithoutTagInput[]
  upsert?: Prisma.BlogTagUpsertWithWhereUniqueWithoutTagInput | Prisma.BlogTagUpsertWithWhereUniqueWithoutTagInput[]
  createMany?: Prisma.BlogTagCreateManyTagInputEnvelope
  set?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  disconnect?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  delete?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  connect?: Prisma.BlogTagWhereUniqueInput | Prisma.BlogTagWhereUniqueInput[]
  update?: Prisma.BlogTagUpdateWithWhereUniqueWithoutTagInput | Prisma.BlogTagUpdateWithWhereUniqueWithoutTagInput[]
  updateMany?: Prisma.BlogTagUpdateManyWithWhereWithoutTagInput | Prisma.BlogTagUpdateManyWithWhereWithoutTagInput[]
  deleteMany?: Prisma.BlogTagScalarWhereInput | Prisma.BlogTagScalarWhereInput[]
}

export type BlogTagCreateWithoutBlogInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  tag: Prisma.TagCreateNestedOneWithoutBlogsInput
}

export type BlogTagUncheckedCreateWithoutBlogInput = {
  tagId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BlogTagCreateOrConnectWithoutBlogInput = {
  where: Prisma.BlogTagWhereUniqueInput
  create: Prisma.XOR<Prisma.BlogTagCreateWithoutBlogInput, Prisma.BlogTagUncheckedCreateWithoutBlogInput>
}

export type BlogTagCreateManyBlogInputEnvelope = {
  data: Prisma.BlogTagCreateManyBlogInput | Prisma.BlogTagCreateManyBlogInput[]
  skipDuplicates?: boolean
}

export type BlogTagUpsertWithWhereUniqueWithoutBlogInput = {
  where: Prisma.BlogTagWhereUniqueInput
  update: Prisma.XOR<Prisma.BlogTagUpdateWithoutBlogInput, Prisma.BlogTagUncheckedUpdateWithoutBlogInput>
  create: Prisma.XOR<Prisma.BlogTagCreateWithoutBlogInput, Prisma.BlogTagUncheckedCreateWithoutBlogInput>
}

export type BlogTagUpdateWithWhereUniqueWithoutBlogInput = {
  where: Prisma.BlogTagWhereUniqueInput
  data: Prisma.XOR<Prisma.BlogTagUpdateWithoutBlogInput, Prisma.BlogTagUncheckedUpdateWithoutBlogInput>
}

export type BlogTagUpdateManyWithWhereWithoutBlogInput = {
  where: Prisma.BlogTagScalarWhereInput
  data: Prisma.XOR<Prisma.BlogTagUpdateManyMutationInput, Prisma.BlogTagUncheckedUpdateManyWithoutBlogInput>
}

export type BlogTagScalarWhereInput = {
  AND?: Prisma.BlogTagScalarWhereInput | Prisma.BlogTagScalarWhereInput[]
  OR?: Prisma.BlogTagScalarWhereInput[]
  NOT?: Prisma.BlogTagScalarWhereInput | Prisma.BlogTagScalarWhereInput[]
  blogId?: Prisma.StringFilter<"BlogTag"> | string
  tagId?: Prisma.StringFilter<"BlogTag"> | string
  createdAt?: Prisma.DateTimeFilter<"BlogTag"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"BlogTag"> | Date | string
}

export type BlogTagCreateWithoutTagInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  blog: Prisma.BlogCreateNestedOneWithoutTagsInput
}

export type BlogTagUncheckedCreateWithoutTagInput = {
  blogId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BlogTagCreateOrConnectWithoutTagInput = {
  where: Prisma.BlogTagWhereUniqueInput
  create: Prisma.XOR<Prisma.BlogTagCreateWithoutTagInput, Prisma.BlogTagUncheckedCreateWithoutTagInput>
}

export type BlogTagCreateManyTagInputEnvelope = {
  data: Prisma.BlogTagCreateManyTagInput | Prisma.BlogTagCreateManyTagInput[]
  skipDuplicates?: boolean
}

export type BlogTagUpsertWithWhereUniqueWithoutTagInput = {
  where: Prisma.BlogTagWhereUniqueInput
  update: Prisma.XOR<Prisma.BlogTagUpdateWithoutTagInput, Prisma.BlogTagUncheckedUpdateWithoutTagInput>
  create: Prisma.XOR<Prisma.BlogTagCreateWithoutTagInput, Prisma.BlogTagUncheckedCreateWithoutTagInput>
}

export type BlogTagUpdateWithWhereUniqueWithoutTagInput = {
  where: Prisma.BlogTagWhereUniqueInput
  data: Prisma.XOR<Prisma.BlogTagUpdateWithoutTagInput, Prisma.BlogTagUncheckedUpdateWithoutTagInput>
}

export type BlogTagUpdateManyWithWhereWithoutTagInput = {
  where: Prisma.BlogTagScalarWhereInput
  data: Prisma.XOR<Prisma.BlogTagUpdateManyMutationInput, Prisma.BlogTagUncheckedUpdateManyWithoutTagInput>
}

export type BlogTagCreateManyBlogInput = {
  tagId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BlogTagUpdateWithoutBlogInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tag?: Prisma.TagUpdateOneRequiredWithoutBlogsNestedInput
}

export type BlogTagUncheckedUpdateWithoutBlogInput = {
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BlogTagUncheckedUpdateManyWithoutBlogInput = {
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BlogTagCreateManyTagInput = {
  blogId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BlogTagUpdateWithoutTagInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  blog?: Prisma.BlogUpdateOneRequiredWithoutTagsNestedInput
}

export type BlogTagUncheckedUpdateWithoutTagInput = {
  blogId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BlogTagUncheckedUpdateManyWithoutTagInput = {
  blogId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type BlogTagSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  blogId?: boolean
  tagId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  blog?: boolean | Prisma.BlogDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["blogTag"]>

export type BlogTagSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  blogId?: boolean
  tagId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  blog?: boolean | Prisma.BlogDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["blogTag"]>

export type BlogTagSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  blogId?: boolean
  tagId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  blog?: boolean | Prisma.BlogDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["blogTag"]>

export type BlogTagSelectScalar = {
  blogId?: boolean
  tagId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type BlogTagOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"blogId" | "tagId" | "createdAt" | "updatedAt", ExtArgs["result"]["blogTag"]>
export type BlogTagInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  blog?: boolean | Prisma.BlogDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}
export type BlogTagIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  blog?: boolean | Prisma.BlogDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}
export type BlogTagIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  blog?: boolean | Prisma.BlogDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}

export type $BlogTagPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BlogTag"
  objects: {
    blog: Prisma.$BlogPayload<ExtArgs>
    tag: Prisma.$TagPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    blogId: string
    tagId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["blogTag"]>
  composites: {}
}

export type BlogTagGetPayload<S extends boolean | null | undefined | BlogTagDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BlogTagPayload, S>

export type BlogTagCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BlogTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BlogTagCountAggregateInputType | true
  }

export interface BlogTagDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BlogTag'], meta: { name: 'BlogTag' } }
  /**
   * Find zero or one BlogTag that matches the filter.
   * @param {BlogTagFindUniqueArgs} args - Arguments to find a BlogTag
   * @example
   * // Get one BlogTag
   * const blogTag = await prisma.blogTag.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BlogTagFindUniqueArgs>(args: Prisma.SelectSubset<T, BlogTagFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BlogTagClient<runtime.Types.Result.GetResult<Prisma.$BlogTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BlogTag that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BlogTagFindUniqueOrThrowArgs} args - Arguments to find a BlogTag
   * @example
   * // Get one BlogTag
   * const blogTag = await prisma.blogTag.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BlogTagFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BlogTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BlogTagClient<runtime.Types.Result.GetResult<Prisma.$BlogTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BlogTag that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlogTagFindFirstArgs} args - Arguments to find a BlogTag
   * @example
   * // Get one BlogTag
   * const blogTag = await prisma.blogTag.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BlogTagFindFirstArgs>(args?: Prisma.SelectSubset<T, BlogTagFindFirstArgs<ExtArgs>>): Prisma.Prisma__BlogTagClient<runtime.Types.Result.GetResult<Prisma.$BlogTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BlogTag that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlogTagFindFirstOrThrowArgs} args - Arguments to find a BlogTag
   * @example
   * // Get one BlogTag
   * const blogTag = await prisma.blogTag.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BlogTagFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BlogTagFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BlogTagClient<runtime.Types.Result.GetResult<Prisma.$BlogTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BlogTags that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlogTagFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BlogTags
   * const blogTags = await prisma.blogTag.findMany()
   * 
   * // Get first 10 BlogTags
   * const blogTags = await prisma.blogTag.findMany({ take: 10 })
   * 
   * // Only select the `blogId`
   * const blogTagWithBlogIdOnly = await prisma.blogTag.findMany({ select: { blogId: true } })
   * 
   */
  findMany<T extends BlogTagFindManyArgs>(args?: Prisma.SelectSubset<T, BlogTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BlogTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BlogTag.
   * @param {BlogTagCreateArgs} args - Arguments to create a BlogTag.
   * @example
   * // Create one BlogTag
   * const BlogTag = await prisma.blogTag.create({
   *   data: {
   *     // ... data to create a BlogTag
   *   }
   * })
   * 
   */
  create<T extends BlogTagCreateArgs>(args: Prisma.SelectSubset<T, BlogTagCreateArgs<ExtArgs>>): Prisma.Prisma__BlogTagClient<runtime.Types.Result.GetResult<Prisma.$BlogTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BlogTags.
   * @param {BlogTagCreateManyArgs} args - Arguments to create many BlogTags.
   * @example
   * // Create many BlogTags
   * const blogTag = await prisma.blogTag.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BlogTagCreateManyArgs>(args?: Prisma.SelectSubset<T, BlogTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many BlogTags and returns the data saved in the database.
   * @param {BlogTagCreateManyAndReturnArgs} args - Arguments to create many BlogTags.
   * @example
   * // Create many BlogTags
   * const blogTag = await prisma.blogTag.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many BlogTags and only return the `blogId`
   * const blogTagWithBlogIdOnly = await prisma.blogTag.createManyAndReturn({
   *   select: { blogId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BlogTagCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BlogTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BlogTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a BlogTag.
   * @param {BlogTagDeleteArgs} args - Arguments to delete one BlogTag.
   * @example
   * // Delete one BlogTag
   * const BlogTag = await prisma.blogTag.delete({
   *   where: {
   *     // ... filter to delete one BlogTag
   *   }
   * })
   * 
   */
  delete<T extends BlogTagDeleteArgs>(args: Prisma.SelectSubset<T, BlogTagDeleteArgs<ExtArgs>>): Prisma.Prisma__BlogTagClient<runtime.Types.Result.GetResult<Prisma.$BlogTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BlogTag.
   * @param {BlogTagUpdateArgs} args - Arguments to update one BlogTag.
   * @example
   * // Update one BlogTag
   * const blogTag = await prisma.blogTag.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BlogTagUpdateArgs>(args: Prisma.SelectSubset<T, BlogTagUpdateArgs<ExtArgs>>): Prisma.Prisma__BlogTagClient<runtime.Types.Result.GetResult<Prisma.$BlogTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BlogTags.
   * @param {BlogTagDeleteManyArgs} args - Arguments to filter BlogTags to delete.
   * @example
   * // Delete a few BlogTags
   * const { count } = await prisma.blogTag.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BlogTagDeleteManyArgs>(args?: Prisma.SelectSubset<T, BlogTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BlogTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlogTagUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BlogTags
   * const blogTag = await prisma.blogTag.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BlogTagUpdateManyArgs>(args: Prisma.SelectSubset<T, BlogTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BlogTags and returns the data updated in the database.
   * @param {BlogTagUpdateManyAndReturnArgs} args - Arguments to update many BlogTags.
   * @example
   * // Update many BlogTags
   * const blogTag = await prisma.blogTag.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more BlogTags and only return the `blogId`
   * const blogTagWithBlogIdOnly = await prisma.blogTag.updateManyAndReturn({
   *   select: { blogId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BlogTagUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BlogTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BlogTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one BlogTag.
   * @param {BlogTagUpsertArgs} args - Arguments to update or create a BlogTag.
   * @example
   * // Update or create a BlogTag
   * const blogTag = await prisma.blogTag.upsert({
   *   create: {
   *     // ... data to create a BlogTag
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BlogTag we want to update
   *   }
   * })
   */
  upsert<T extends BlogTagUpsertArgs>(args: Prisma.SelectSubset<T, BlogTagUpsertArgs<ExtArgs>>): Prisma.Prisma__BlogTagClient<runtime.Types.Result.GetResult<Prisma.$BlogTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of BlogTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlogTagCountArgs} args - Arguments to filter BlogTags to count.
   * @example
   * // Count the number of BlogTags
   * const count = await prisma.blogTag.count({
   *   where: {
   *     // ... the filter for the BlogTags we want to count
   *   }
   * })
  **/
  count<T extends BlogTagCountArgs>(
    args?: Prisma.Subset<T, BlogTagCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BlogTagCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BlogTag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlogTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BlogTagAggregateArgs>(args: Prisma.Subset<T, BlogTagAggregateArgs>): Prisma.PrismaPromise<GetBlogTagAggregateType<T>>

  /**
   * Group by BlogTag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlogTagGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BlogTagGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BlogTagGroupByArgs['orderBy'] }
      : { orderBy?: BlogTagGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BlogTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlogTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BlogTag model
 */
readonly fields: BlogTagFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BlogTag.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BlogTagClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  blog<T extends Prisma.BlogDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BlogDefaultArgs<ExtArgs>>): Prisma.Prisma__BlogClient<runtime.Types.Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  tag<T extends Prisma.TagDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TagDefaultArgs<ExtArgs>>): Prisma.Prisma__TagClient<runtime.Types.Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BlogTag model
 */
export interface BlogTagFieldRefs {
  readonly blogId: Prisma.FieldRef<"BlogTag", 'String'>
  readonly tagId: Prisma.FieldRef<"BlogTag", 'String'>
  readonly createdAt: Prisma.FieldRef<"BlogTag", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"BlogTag", 'DateTime'>
}
    

// Custom InputTypes
/**
 * BlogTag findUnique
 */
export type BlogTagFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BlogTag
   */
  select?: Prisma.BlogTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BlogTag
   */
  omit?: Prisma.BlogTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogTagInclude<ExtArgs> | null
  /**
   * Filter, which BlogTag to fetch.
   */
  where: Prisma.BlogTagWhereUniqueInput
}

/**
 * BlogTag findUniqueOrThrow
 */
export type BlogTagFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BlogTag
   */
  select?: Prisma.BlogTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BlogTag
   */
  omit?: Prisma.BlogTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogTagInclude<ExtArgs> | null
  /**
   * Filter, which BlogTag to fetch.
   */
  where: Prisma.BlogTagWhereUniqueInput
}

/**
 * BlogTag findFirst
 */
export type BlogTagFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BlogTag
   */
  select?: Prisma.BlogTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BlogTag
   */
  omit?: Prisma.BlogTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogTagInclude<ExtArgs> | null
  /**
   * Filter, which BlogTag to fetch.
   */
  where?: Prisma.BlogTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BlogTags to fetch.
   */
  orderBy?: Prisma.BlogTagOrderByWithRelationInput | Prisma.BlogTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BlogTags.
   */
  cursor?: Prisma.BlogTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BlogTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BlogTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BlogTags.
   */
  distinct?: Prisma.BlogTagScalarFieldEnum | Prisma.BlogTagScalarFieldEnum[]
}

/**
 * BlogTag findFirstOrThrow
 */
export type BlogTagFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BlogTag
   */
  select?: Prisma.BlogTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BlogTag
   */
  omit?: Prisma.BlogTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogTagInclude<ExtArgs> | null
  /**
   * Filter, which BlogTag to fetch.
   */
  where?: Prisma.BlogTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BlogTags to fetch.
   */
  orderBy?: Prisma.BlogTagOrderByWithRelationInput | Prisma.BlogTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BlogTags.
   */
  cursor?: Prisma.BlogTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BlogTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BlogTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BlogTags.
   */
  distinct?: Prisma.BlogTagScalarFieldEnum | Prisma.BlogTagScalarFieldEnum[]
}

/**
 * BlogTag findMany
 */
export type BlogTagFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BlogTag
   */
  select?: Prisma.BlogTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BlogTag
   */
  omit?: Prisma.BlogTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogTagInclude<ExtArgs> | null
  /**
   * Filter, which BlogTags to fetch.
   */
  where?: Prisma.BlogTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BlogTags to fetch.
   */
  orderBy?: Prisma.BlogTagOrderByWithRelationInput | Prisma.BlogTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BlogTags.
   */
  cursor?: Prisma.BlogTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BlogTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BlogTags.
   */
  skip?: number
  distinct?: Prisma.BlogTagScalarFieldEnum | Prisma.BlogTagScalarFieldEnum[]
}

/**
 * BlogTag create
 */
export type BlogTagCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BlogTag
   */
  select?: Prisma.BlogTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BlogTag
   */
  omit?: Prisma.BlogTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogTagInclude<ExtArgs> | null
  /**
   * The data needed to create a BlogTag.
   */
  data: Prisma.XOR<Prisma.BlogTagCreateInput, Prisma.BlogTagUncheckedCreateInput>
}

/**
 * BlogTag createMany
 */
export type BlogTagCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BlogTags.
   */
  data: Prisma.BlogTagCreateManyInput | Prisma.BlogTagCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * BlogTag createManyAndReturn
 */
export type BlogTagCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BlogTag
   */
  select?: Prisma.BlogTagSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BlogTag
   */
  omit?: Prisma.BlogTagOmit<ExtArgs> | null
  /**
   * The data used to create many BlogTags.
   */
  data: Prisma.BlogTagCreateManyInput | Prisma.BlogTagCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogTagIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * BlogTag update
 */
export type BlogTagUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BlogTag
   */
  select?: Prisma.BlogTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BlogTag
   */
  omit?: Prisma.BlogTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogTagInclude<ExtArgs> | null
  /**
   * The data needed to update a BlogTag.
   */
  data: Prisma.XOR<Prisma.BlogTagUpdateInput, Prisma.BlogTagUncheckedUpdateInput>
  /**
   * Choose, which BlogTag to update.
   */
  where: Prisma.BlogTagWhereUniqueInput
}

/**
 * BlogTag updateMany
 */
export type BlogTagUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BlogTags.
   */
  data: Prisma.XOR<Prisma.BlogTagUpdateManyMutationInput, Prisma.BlogTagUncheckedUpdateManyInput>
  /**
   * Filter which BlogTags to update
   */
  where?: Prisma.BlogTagWhereInput
  /**
   * Limit how many BlogTags to update.
   */
  limit?: number
}

/**
 * BlogTag updateManyAndReturn
 */
export type BlogTagUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BlogTag
   */
  select?: Prisma.BlogTagSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BlogTag
   */
  omit?: Prisma.BlogTagOmit<ExtArgs> | null
  /**
   * The data used to update BlogTags.
   */
  data: Prisma.XOR<Prisma.BlogTagUpdateManyMutationInput, Prisma.BlogTagUncheckedUpdateManyInput>
  /**
   * Filter which BlogTags to update
   */
  where?: Prisma.BlogTagWhereInput
  /**
   * Limit how many BlogTags to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogTagIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * BlogTag upsert
 */
export type BlogTagUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BlogTag
   */
  select?: Prisma.BlogTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BlogTag
   */
  omit?: Prisma.BlogTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogTagInclude<ExtArgs> | null
  /**
   * The filter to search for the BlogTag to update in case it exists.
   */
  where: Prisma.BlogTagWhereUniqueInput
  /**
   * In case the BlogTag found by the `where` argument doesn't exist, create a new BlogTag with this data.
   */
  create: Prisma.XOR<Prisma.BlogTagCreateInput, Prisma.BlogTagUncheckedCreateInput>
  /**
   * In case the BlogTag was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BlogTagUpdateInput, Prisma.BlogTagUncheckedUpdateInput>
}

/**
 * BlogTag delete
 */
export type BlogTagDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BlogTag
   */
  select?: Prisma.BlogTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BlogTag
   */
  omit?: Prisma.BlogTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogTagInclude<ExtArgs> | null
  /**
   * Filter which BlogTag to delete.
   */
  where: Prisma.BlogTagWhereUniqueInput
}

/**
 * BlogTag deleteMany
 */
export type BlogTagDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BlogTags to delete
   */
  where?: Prisma.BlogTagWhereInput
  /**
   * Limit how many BlogTags to delete.
   */
  limit?: number
}

/**
 * BlogTag without action
 */
export type BlogTagDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BlogTag
   */
  select?: Prisma.BlogTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BlogTag
   */
  omit?: Prisma.BlogTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogTagInclude<ExtArgs> | null
}
