generator client {
  provider        = "prisma-client-js"
  runtime         = "nodejs"
  // moduleFormat           = "esm"
  // generatedFileExtension = "ts"
  // importFileExtension    = "ts"
  // output                 = "../generated/prisma"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  birthdate     String?
  greeting      String?           @db.Text
  tagLine       String?           @db.Text
  email         String?           @unique
  phoneNumber   String?           @unique
  linkedIn      String?           @unique
  facebook      String?           @unique
  github        String?           @unique
  leetCode      String?           @unique
  twitter       String?           @unique
  portfolio     String?           @unique
  stackOverflow String?           @unique
  image         String?
  imageCaption  String?           @db.Text
  quote         String?           @db.Text
  bio           String?           @db.Text
  aboutMe       String?           @db.Text
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @default(now()) @map("updated_at")
  blogs         Blog[]
  educations    Education[]
  experiences   Experience[]
  projects      Project[]
  translations  Translation[]
  bannerImages  UserBannerImage[]
  techstacks    TechStack[]

  @@map("users")
}

model UserBannerImage {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  src          String
  caption      String
  translations Translation[]

  @@map("user_banner_images")
}

model Education {
  id           String             @id @default(cuid())
  userId       String
  timeline     String
  title        String
  message      String?            @db.Text
  icon         String?
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @default(now()) @map("updated_at")
  subItems     EducationSubItem[]
  user         User               @relation(fields: [userId], references: [id])
  translations Translation[]

  @@index([userId])
  @@map("educations")
}

model EducationSubItem {
  id           String        @id @default(cuid())
  educationId  String
  title        String
  message      String?       @db.Text
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  education    Education     @relation(fields: [educationId], references: [id])
  translations Translation[]

  @@index([educationId])
  @@map("education_sub_items")
}

model TechStack {
  id           String                   @id @default(cuid())
  name         String                   @unique
  logo         String?
  group        String
  createdAt    DateTime                 @default(now()) @map("created_at")
  updatedAt    DateTime                 @default(now()) @map("updated_at")
  userId       String
  user         User                     @relation(fields: [userId], references: [id])
  projects     TechStackOnProjects[]
  experiences  TechStackOnExperiences[]
  translations Translation[]

  @@map("tech_stacks")
}

model TechStackOnExperiences {
  experienceId String
  techstackId  String
  experience   Experience @relation(fields: [experienceId], references: [id])
  techstack    TechStack  @relation(fields: [techstackId], references: [id])

  @@id([techstackId, experienceId])
  @@map("experience_tech_stacks")
}

model Experience {
  id           String                   @id @default(cuid())
  userId       String
  company      String
  logoUrl      String
  location     String
  type         String
  description  String?                  @db.Text
  createdAt    DateTime                 @default(now()) @map("created_at")
  updatedAt    DateTime                 @default(now()) @map("updated_at")
  user         User                     @relation(fields: [userId], references: [id])
  roles        ExperienceRole[]
  techstacks   TechStackOnExperiences[]
  translations Translation[]

  @@index([userId])
  @@map("experiences")
}

model ExperienceRole {
  id           String     @id @default(cuid())
  experienceId String
  title        String
  startDate    DateTime
  endDate      DateTime?
  tasks        Task[]
  experience   Experience @relation(fields: [experienceId], references: [id])
}

model Task {
  id               String         @id @default(cuid())
  experienceRoleId String         @map("experience_role_id")
  content          String         @db.Text
  experienceRole   ExperienceRole @relation(fields: [experienceRoleId], references: [id])
  translations     Translation[]
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  @@map("tasks")
}

model Project {
  id           String                     @id @default(cuid())
  userId       String
  title        String
  description  String?                    @db.Text
  githubLink   String?
  liveLink     String?
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime                   @default(now()) @map("created_at")
  updatedAt    DateTime                   @default(now()) @map("updated_at")
  techstacks   TechStackOnProjects[]
  tags         TagsOnProjects[]
  articles     Blog[]
  user         User                       @relation(fields: [userId], references: [id])
  translations Translation[]
  coauthors    ProjectOnProjectCoAuthor[]

  @@index([userId])
  @@map("projects")
}

model ProjectOnProjectCoAuthor {
  projectId  String
  coauthorID String
  project    Project  @relation(fields: [projectId], references: [id])
  coauthor   Coauthor @relation(fields: [coauthorID], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@id([projectId, coauthorID])
  @@index([coauthorID])
  @@map("project_coauthor")
}

model Coauthor {
  id       String                     @id @default(cuid())
  fullname String
  email    String?
  projects ProjectOnProjectCoAuthor[]
}

model TechStackOnProjects {
  projectId   String
  techstackId String
  project     Project   @relation(fields: [projectId], references: [id])
  techstack   TechStack @relation(fields: [techstackId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  @@id([projectId, techstackId])
  @@index([techstackId])
  @@map("project_tech_stacks")
}

model TagsOnProjects {
  projectId String
  tagId     String
  project   Project  @relation(fields: [projectId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@id([projectId, tagId])
  @@index([tagId])
  @@map("project_tag")
}

model Blog {
  id            String        @id @default(cuid())
  userId        String
  title         String
  content       String        @db.Text
  publishedDate DateTime      @default(now())
  slug          String        @unique
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @map("updated_at")
  projectId     String?
  project       Project?      @relation(fields: [projectId], references: [id])
  tags          BlogTag[]
  user          User          @relation(fields: [userId], references: [id])
  translations  Translation[]

  @@index([userId])
  @@map("blogs")
}

model Tag {
  id           String           @id @default(cuid())
  name         String           @unique
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @default(now()) @map("updated_at")
  blogs        BlogTag[]
  translations Translation[]
  projects     TagsOnProjects[]

  @@map("tags")
}

model BlogTag {
  blogId    String
  tagId     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  blog      Blog     @relation(fields: [blogId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@id([blogId, tagId])
  @@index([tagId])
  @@map("blog_tags")
}

model Translation {
  id                 String   @id @default(cuid())
  language           String
  field              String
  value              String   @db.Text
  userId             String?
  educationId        String?
  educationSubItemId String?
  techStackId        String?
  experienceId       String?
  projectId          String?
  projectImageId     String?
  blogId             String?
  tagId              String?
  technologyId       String?
  bannerImageId      String?
  taskId             String?
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @map("updated_at")

  blog             Blog?             @relation(fields: [blogId], references: [id])
  education        Education?        @relation(fields: [educationId], references: [id])
  educationSubItem EducationSubItem? @relation(fields: [educationSubItemId], references: [id])
  experience       Experience?       @relation(fields: [experienceId], references: [id])
  project          Project?          @relation(fields: [projectId], references: [id])
  tag              Tag?              @relation(fields: [tagId], references: [id])
  techStack        TechStack?        @relation(fields: [techStackId], references: [id])
  user             User?             @relation(fields: [userId], references: [id])
  bannerImage      UserBannerImage?  @relation(fields: [bannerImageId], references: [id])
  task             Task?             @relation(fields: [taskId], references: [id])

  @@index([blogId])
  @@index([educationId])
  @@index([educationSubItemId])
  @@index([experienceId])
  @@index([projectId])
  @@index([projectImageId])
  @@index([tagId])
  @@index([techStackId])
  @@index([userId])
  @@map("translations")
}
