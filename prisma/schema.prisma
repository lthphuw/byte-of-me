generator client {
  provider               = "prisma-client"
  output                 = "../src/generated/prisma"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"
  moduleFormat           = "esm"
  runtime                = "nodejs"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  birthdate     String?
  greeting      String?           @db.Text
  tagLine       String?           @db.Text
  email         String?           @unique
  phoneNumber   String?           @unique @db.VarChar(20)
  linkedIn      String?           @unique @db.VarChar(255)
  facebook      String?           @unique @db.VarChar(255)
  github        String?           @unique @db.VarChar(255)
  leetCode      String?           @unique @db.VarChar(255)
  twitter       String?           @unique @db.VarChar(255)
  portfolio     String?           @unique @db.VarChar(255)
  stackOverflow String?           @unique @db.VarChar(255)
  image         String?           @db.VarChar(255)
  imageCaption  String?           @db.Text
  quote         String?           @db.Text
  bio           String?           @db.Text
  aboutMe       String?           @db.Text
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @default(now()) @map("updated_at")
  blogs         Blog[]
  educations    Education[]
  experiences   Experience[]
  projects      Project[]
  translations  Translation[]
  bannerImages  UserBannerImage[]
  techstacks    TechStack[]

  @@map("users")
}

model UserBannerImage {
  id           String        @id @default(cuid())
  userId       String
  User         User          @relation(fields: [userId], references: [id])
  src          String
  caption      String
  translations Translation[]

  @@map("user_banner_images")
}

model Education {
  id           String             @id @default(cuid())
  userId       String
  timeline     String
  title        String
  message      String?            @db.Text
  icon         String?            @db.VarChar(255)
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @default(now()) @map("updated_at")
  subItems     EducationSubItem[]
  user         User               @relation(fields: [userId], references: [id])
  translations Translation[]

  @@index([userId], map: "educations_userId_fkey")
  @@map("educations")
}

model EducationSubItem {
  id           String        @id @default(cuid())
  educationId  String
  title        String
  message      String?       @db.Text
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  education    Education     @relation(fields: [educationId], references: [id])
  translations Translation[]

  @@index([educationId], map: "education_sub_items_educationId_fkey")
  @@map("education_sub_items")
}

model TechStack {
  id           String                    @id @default(cuid())
  name         String                    @unique
  logo         String?                   @db.VarChar(255)
  group        String
  createdAt    DateTime                  @default(now()) @map("created_at")
  updatedAt    DateTime                  @default(now()) @map("updated_at")
  userId       String
  user         User                      @relation(fields: [userId], references: [id])
  projects     TechStackOnProjects[]
  experiences  TechstacksOnExperiences[]
  translations Translation[]

  @@map("tech_stacks")
}

model Experience {
  id           String                    @id @default(cuid())
  userId       String
  company      String
  logoUrl      String
  location     String
  type         String
  description  String?                   @db.Text
  createdAt    DateTime                  @default(now()) @map("created_at")
  updatedAt    DateTime                  @default(now()) @map("updated_at")
  user         User                      @relation(fields: [userId], references: [id])
  roles        ExperienceRole[]
  techstacks   TechstacksOnExperiences[]
  translations Translation[]

  @@index([userId], map: "experiences_userId_fkey")
  @@map("experiences")
}

model TechstacksOnExperiences {
  experienceId String
  experience   Experience @relation(fields: [experienceId], references: [id])

  techstackId String
  techstack   TechStack @relation(fields: [techstackId], references: [id])

  @@id([techstackId, experienceId])
}

model ExperienceRole {
  id           String    @id @default(cuid())
  experienceId String
  title        String
  startDate    DateTime
  endDate      DateTime?
  tasks        Task[]

  experience Experience @relation(fields: [experienceId], references: [id])
}

model Task {
  id               String         @id @default(cuid())
  experienceRoleId String         @map("experience_role_id")
  content          String         @db.Text
  experienceRole   ExperienceRole @relation(fields: [experienceRoleId], references: [id])
  translations     Translation[]
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  @@map("tasks")
}

model Project {
  id           String                @id @default(cuid())
  userId       String
  title        String
  description  String?               @db.Text
  githubLink   String?               @db.VarChar(255)
  liveLink     String?               @db.VarChar(255)
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @default(now()) @map("updated_at")
  techstacks   TechStackOnProjects[]
  tags         TagsOnProjects[]
  articles     Blog[]
  user         User                  @relation(fields: [userId], references: [id])
  translations Translation[]

  @@index([userId], map: "projects_userId_fkey")
  @@map("projects")
}

model TechStackOnProjects {
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  techstackId String
  techStack   TechStack @relation(fields: [techstackId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@id([projectId, techstackId])
  @@index([techstackId], map: "project_tech_stacks_techStackId_fkey")
  @@map("project_tech_stacks")
}

model TagsOnProjects {
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@id([projectId, tagId])
  @@index([tagId], map: "project_tagid_fkey")
  @@map("project_tag")
}

model Blog {
  id            String        @id @default(cuid())
  userId        String
  title         String
  content       String        @db.Text
  publishedDate DateTime      @default(now())
  slug          String        @unique
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @map("updated_at")
  projectId     String?
  project       Project?      @relation(fields: [projectId], references: [id])
  tags          BlogTag[]
  user          User          @relation(fields: [userId], references: [id])
  translations  Translation[]

  @@index([userId], map: "blogs_userId_fkey")
  @@map("blogs")
}

model Tag {
  id           String           @id @default(cuid())
  name         String           @unique
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @default(now()) @map("updated_at")
  blogs        BlogTag[]
  translations Translation[]
  projects     TagsOnProjects[]

  @@map("tags")
}

model BlogTag {
  blogId    String
  tagId     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  blog      Blog     @relation(fields: [blogId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@id([blogId, tagId])
  @@index([tagId], map: "blog_tags_tagId_fkey")
  @@map("blog_tags")
}

model Translation {
  id                 String            @id @default(cuid())
  language           String
  field              String
  value              String            @db.Text
  userId             String?
  educationId        String?
  educationSubItemId String?
  techStackId        String?
  experienceId       String?
  projectId          String?
  projectImageId     String?
  blogId             String?
  tagId              String?
  technologyId       String?
  bannerImageId      String?
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @default(now()) @map("updated_at")
  blog               Blog?             @relation(fields: [blogId], references: [id])
  education          Education?        @relation(fields: [educationId], references: [id])
  educationSubItem   EducationSubItem? @relation(fields: [educationSubItemId], references: [id])
  experience         Experience?       @relation(fields: [experienceId], references: [id])
  project            Project?          @relation(fields: [projectId], references: [id])
  tag                Tag?              @relation(fields: [tagId], references: [id])
  techStack          TechStack?        @relation(fields: [techStackId], references: [id])
  user               User?             @relation(fields: [userId], references: [id])
  bannerImage        UserBannerImage?  @relation(fields: [bannerImageId], references: [id])
  Task               Task?             @relation(fields: [taskId], references: [id])
  taskId             String?

  @@index([blogId], map: "translations_blogId_fkey")
  @@index([educationId], map: "translations_educationId_fkey")
  @@index([educationSubItemId], map: "translations_educationSubItemId_fkey")
  @@index([experienceId], map: "translations_experienceId_fkey")
  @@index([projectId], map: "translations_projectId_fkey")
  @@index([projectImageId], map: "translations_projectImageId_fkey")
  @@index([tagId], map: "translations_tagId_fkey")
  @@index([techStackId], map: "translations_techStackId_fkey")
  @@index([userId], map: "translations_userId_fkey")
  @@map("translations")
}
